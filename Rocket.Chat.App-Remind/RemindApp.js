var k = (n, e) => () => (e || n((e = { exports: {} }).exports, e), e.exports); var et = k(Ue => { "use strict"; Object.defineProperty(Ue, "__esModule", { value: !0 }); Ue.License = void 0; var Mi; (function (n) { n.LicensePurchasePageUrl = "https://addreminders.github.io/license", n.ContactUsPageUrl = "https://addreminders.github.io/contact-us", n.DocumentationLink = "https://addreminders.github.io/docs" })(Mi = Ue.License || (Ue.License = {})) }); var W = k(Y => { "use strict"; Object.defineProperty(Y, "__esModule", { value: !0 }); Y.RecurringReminderFrequencies = Y.ReminderRecipientsType = Y.Durations = void 0; var Ai; (function (n) { n.MINUTES_20 = "20", n.HOUR_1 = "60", n.HOUR_3 = "180", n.TOMORROW = "next-day", n.NEXT_WEEK = "next-week", n.CUSTOM = "custom" })(Ai = Y.Durations || (Y.Durations = {})); var ki; (function (n) { n.ME = "me", n.USER = "user", n.CHANNEL = "channel" })(ki = Y.ReminderRecipientsType || (Y.ReminderRecipientsType = {})); var xi; (function (n) { n.DO_NOT_REPEAT = "do-not-repeat", n.DAILY = "daily", n.DAILY_WEEKDAYS = "daily-weekdays", n.WEEKLY = "weekly", n.BIWEEKLY = "biweekly", n.TRIWEEKLY = "triweekly", n.MONTHLY = "monthly", n.QUARTERLY = "quarterly", n.BIANNUALLY = "biannually", n.ANNUALLY = "annually" })(xi = Y.RecurringReminderFrequencies || (Y.RecurringReminderFrequencies = {})) }); var De = k(te => { "use strict"; Object.defineProperty(te, "__esModule", { value: !0 }); te.settings = te.ServerSetting = te.AppSetting = void 0; var tt = require("@rocket.chat/apps-engine/definition/settings"), ze; (function (n) { n.License = "license", n.SendStats = "sendStats", n.ShowAddReminderButton = "showAddReminderButton", n.ShowViewAllReminderButton = "showViewAllReminderButton" })(ze = te.AppSetting || (te.AppSetting = {})); var vi; (function (n) { n.SITE_URL = "Site_Url" })(vi = te.ServerSetting || (te.ServerSetting = {})); te.settings = [{ id: ze.License, i18nLabel: "license", i18nDescription: "license_description", required: !1, type: tt.SettingType.STRING, public: !0, packageValue: "", value: "" }, { id: ze.SendStats, i18nLabel: "stats_reporting", i18nDescription: "stats_reporting_description", required: !1, type: tt.SettingType.BOOLEAN, public: !0, packageValue: !0, value: !0 }, { id: ze.ShowAddReminderButton, i18nLabel: "show_add_reminder_button", i18nDescription: "show_add_reminder_button_description", required: !1, type: tt.SettingType.BOOLEAN, public: !0, packageValue: !0, value: !0 }, { id: ze.ShowViewAllReminderButton, i18nLabel: "show_view_all_reminder_button", i18nDescription: "show_view_all_reminder_button_description", required: !1, type: tt.SettingType.BOOLEAN, public: !0, packageValue: !0, value: !0 }] }); var ur = k(rt => { "use strict"; Object.defineProperty(rt, "__esModule", { value: !0 }); rt.TimeZones = void 0; rt.TimeZones = [{ value: "Dateline Standard Time", abbr: "DST", offset: -12, isdst: !1, text: "(UTC-12:00) International Date Line West", utc: ["Etc/GMT+12"] }, { value: "UTC-11", abbr: "U", offset: -11, isdst: !1, text: "(UTC-11:00) Coordinated Universal Time-11", utc: ["Etc/GMT+11", "Pacific/Midway", "Pacific/Niue", "Pacific/Pago_Pago"] }, { value: "Hawaiian Standard Time", abbr: "HST", offset: -10, isdst: !1, text: "(UTC-10:00) Hawaii", utc: ["Etc/GMT+10", "Pacific/Honolulu", "Pacific/Johnston", "Pacific/Rarotonga", "Pacific/Tahiti"] }, { value: "Alaskan Standard Time", abbr: "AKDT", offset: -8, isdst: !0, text: "(UTC-09:00) Alaska", utc: ["America/Anchorage", "America/Juneau", "America/Nome", "America/Sitka", "America/Yakutat"] }, { value: "Pacific Standard Time (Mexico)", abbr: "PDT", offset: -7, isdst: !0, text: "(UTC-08:00) Baja California", utc: ["America/Santa_Isabel"] }, { value: "Pacific Daylight Time", abbr: "PDT", offset: -7, isdst: !0, text: "(UTC-07:00) Pacific Time (US & Canada)", utc: ["America/Los_Angeles", "America/Tijuana", "America/Vancouver"] }, { value: "Pacific Standard Time", abbr: "PST", offset: -8, isdst: !1, text: "(UTC-08:00) Pacific Time (US & Canada)", utc: ["America/Los_Angeles", "America/Tijuana", "America/Vancouver", "PST8PDT"] }, { value: "US Mountain Standard Time", abbr: "UMST", offset: -7, isdst: !1, text: "(UTC-07:00) Arizona", utc: ["America/Creston", "America/Dawson", "America/Dawson_Creek", "America/Hermosillo", "America/Phoenix", "America/Whitehorse", "Etc/GMT+7"] }, { value: "Mountain Standard Time (Mexico)", abbr: "MDT", offset: -6, isdst: !0, text: "(UTC-07:00) Chihuahua, La Paz, Mazatlan", utc: ["America/Chihuahua", "America/Mazatlan"] }, { value: "Mountain Standard Time", abbr: "MDT", offset: -6, isdst: !0, text: "(UTC-07:00) Mountain Time (US & Canada)", utc: ["America/Boise", "America/Cambridge_Bay", "America/Denver", "America/Edmonton", "America/Inuvik", "America/Ojinaga", "America/Yellowknife", "MST7MDT"] }, { value: "Central America Standard Time", abbr: "CAST", offset: -6, isdst: !1, text: "(UTC-06:00) Central America", utc: ["America/Belize", "America/Costa_Rica", "America/El_Salvador", "America/Guatemala", "America/Managua", "America/Tegucigalpa", "Etc/GMT+6", "Pacific/Galapagos"] }, { value: "Central Standard Time", abbr: "CDT", offset: -5, isdst: !0, text: "(UTC-06:00) Central Time (US & Canada)", utc: ["America/Chicago", "America/Indiana/Knox", "America/Indiana/Tell_City", "America/Matamoros", "America/Menominee", "America/North_Dakota/Beulah", "America/North_Dakota/Center", "America/North_Dakota/New_Salem", "America/Rainy_River", "America/Rankin_Inlet", "America/Resolute", "America/Winnipeg", "CST6CDT"] }, { value: "Central Standard Time (Mexico)", abbr: "CDT", offset: -5, isdst: !0, text: "(UTC-06:00) Guadalajara, Mexico City, Monterrey", utc: ["America/Bahia_Banderas", "America/Cancun", "America/Merida", "America/Mexico_City", "America/Monterrey"] }, { value: "Canada Central Standard Time", abbr: "CCST", offset: -6, isdst: !1, text: "(UTC-06:00) Saskatchewan", utc: ["America/Regina", "America/Swift_Current"] }, { value: "SA Pacific Standard Time", abbr: "SPST", offset: -5, isdst: !1, text: "(UTC-05:00) Bogota, Lima, Quito", utc: ["America/Bogota", "America/Cayman", "America/Coral_Harbour", "America/Eirunepe", "America/Guayaquil", "America/Jamaica", "America/Lima", "America/Panama", "America/Rio_Branco", "Etc/GMT+5"] }, { value: "Eastern Standard Time", abbr: "EST", offset: -5, isdst: !1, text: "(UTC-05:00) Eastern Time (US & Canada)", utc: ["America/Detroit", "America/Havana", "America/Indiana/Petersburg", "America/Indiana/Vincennes", "America/Indiana/Winamac", "America/Iqaluit", "America/Kentucky/Monticello", "America/Louisville", "America/Montreal", "America/Nassau", "America/New_York", "America/Nipigon", "America/Pangnirtung", "America/Port-au-Prince", "America/Thunder_Bay", "America/Toronto"] }, { value: "Eastern Daylight Time", abbr: "EDT", offset: -4, isdst: !0, text: "(UTC-04:00) Eastern Daylight Time (US & Canada)", utc: ["America/Detroit", "America/Havana", "America/Indiana/Petersburg", "America/Indiana/Vincennes", "America/Indiana/Winamac", "America/Iqaluit", "America/Kentucky/Monticello", "America/Louisville", "America/Montreal", "America/Nassau", "America/New_York", "America/Nipigon", "America/Pangnirtung", "America/Port-au-Prince", "America/Thunder_Bay", "America/Toronto"] }, { value: "US Eastern Standard Time", abbr: "UEDT", offset: -5, isdst: !1, text: "(UTC-05:00) Indiana (East)", utc: ["America/Indiana/Marengo", "America/Indiana/Vevay", "America/Indianapolis"] }, { value: "Venezuela Standard Time", abbr: "VST", offset: -4.5, isdst: !1, text: "(UTC-04:30) Caracas", utc: ["America/Caracas"] }, { value: "Paraguay Standard Time", abbr: "PYT", offset: -4, isdst: !1, text: "(UTC-04:00) Asuncion", utc: ["America/Asuncion"] }, { value: "Atlantic Standard Time", abbr: "ADT", offset: -3, isdst: !0, text: "(UTC-04:00) Atlantic Time (Canada)", utc: ["America/Glace_Bay", "America/Goose_Bay", "America/Halifax", "America/Moncton", "America/Thule", "Atlantic/Bermuda"] }, { value: "Central Brazilian Standard Time", abbr: "CBST", offset: -4, isdst: !1, text: "(UTC-04:00) Cuiaba", utc: ["America/Campo_Grande", "America/Cuiaba"] }, { value: "SA Western Standard Time", abbr: "SWST", offset: -4, isdst: !1, text: "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan", utc: ["America/Anguilla", "America/Antigua", "America/Aruba", "America/Barbados", "America/Blanc-Sablon", "America/Boa_Vista", "America/Curacao", "America/Dominica", "America/Grand_Turk", "America/Grenada", "America/Guadeloupe", "America/Guyana", "America/Kralendijk", "America/La_Paz", "America/Lower_Princes", "America/Manaus", "America/Marigot", "America/Martinique", "America/Montserrat", "America/Port_of_Spain", "America/Porto_Velho", "America/Puerto_Rico", "America/Santo_Domingo", "America/St_Barthelemy", "America/St_Kitts", "America/St_Lucia", "America/St_Thomas", "America/St_Vincent", "America/Tortola", "Etc/GMT+4"] }, { value: "Pacific SA Standard Time", abbr: "PSST", offset: -4, isdst: !1, text: "(UTC-04:00) Santiago", utc: ["America/Santiago", "Antarctica/Palmer"] }, { value: "Newfoundland Standard Time", abbr: "NDT", offset: -2.5, isdst: !0, text: "(UTC-03:30) Newfoundland", utc: ["America/St_Johns"] }, { value: "E. South America Standard Time", abbr: "ESAST", offset: -3, isdst: !1, text: "(UTC-03:00) Brasilia", utc: ["America/Sao_Paulo"] }, { value: "Argentina Standard Time", abbr: "AST", offset: -3, isdst: !1, text: "(UTC-03:00) Buenos Aires", utc: ["America/Argentina/La_Rioja", "America/Argentina/Rio_Gallegos", "America/Argentina/Salta", "America/Argentina/San_Juan", "America/Argentina/San_Luis", "America/Argentina/Tucuman", "America/Argentina/Ushuaia", "America/Buenos_Aires", "America/Catamarca", "America/Cordoba", "America/Jujuy", "America/Mendoza"] }, { value: "SA Eastern Standard Time", abbr: "SEST", offset: -3, isdst: !1, text: "(UTC-03:00) Cayenne, Fortaleza", utc: ["America/Araguaina", "America/Belem", "America/Cayenne", "America/Fortaleza", "America/Maceio", "America/Paramaribo", "America/Recife", "America/Santarem", "Antarctica/Rothera", "Atlantic/Stanley", "Etc/GMT+3"] }, { value: "Greenland Standard Time", abbr: "GDT", offset: -3, isdst: !0, text: "(UTC-03:00) Greenland", utc: ["America/Godthab"] }, { value: "Montevideo Standard Time", abbr: "MST", offset: -3, isdst: !1, text: "(UTC-03:00) Montevideo", utc: ["America/Montevideo"] }, { value: "Bahia Standard Time", abbr: "BST", offset: -3, isdst: !1, text: "(UTC-03:00) Salvador", utc: ["America/Bahia"] }, { value: "UTC-02", abbr: "U", offset: -2, isdst: !1, text: "(UTC-02:00) Coordinated Universal Time-02", utc: ["America/Noronha", "Atlantic/South_Georgia", "Etc/GMT+2"] }, { value: "Mid-Atlantic Standard Time", abbr: "MDT", offset: -1, isdst: !0, text: "(UTC-02:00) Mid-Atlantic - Old", utc: ["Atlantic/Cape_Verde", "Etc/GMT+1"] }, { value: "Azores Standard Time", abbr: "ADT", offset: 0, isdst: !0, text: "(UTC-01:00) Azores", utc: ["America/Scoresbysund", "Atlantic/Azores"] }, { value: "Cape Verde Standard Time", abbr: "CVST", offset: -1, isdst: !1, text: "(UTC-01:00) Cape Verde Is.", utc: ["Atlantic/Cape_Verde", "Etc/GMT+1"] }, { value: "Morocco Standard Time", abbr: "MDT", offset: 1, isdst: !0, text: "(UTC) Casablanca", utc: ["Africa/Casablanca", "Africa/El_Aaiun"] }, { value: "UTC", abbr: "UTC", offset: 0, isdst: !1, text: "(UTC) Coordinated Universal Time", utc: ["America/Danmarkshavn", "Etc/GMT"] }, { value: "GMT Standard Time", abbr: "GMT", offset: 0, isdst: !1, text: "(UTC) Edinburgh, London", utc: ["Europe/Isle_of_Man", "Europe/Guernsey", "Europe/Jersey", "Europe/London"] }, { value: "British Summer Time", abbr: "BST", offset: 1, isdst: !0, text: "(UTC+01:00) Edinburgh, London", utc: ["Europe/Isle_of_Man", "Europe/Guernsey", "Europe/Jersey", "Europe/London"] }, { value: "GMT Standard Time", abbr: "GDT", offset: 1, isdst: !0, text: "(UTC) Dublin, Lisbon", utc: ["Atlantic/Canary", "Atlantic/Faeroe", "Atlantic/Madeira", "Europe/Dublin", "Europe/Lisbon"] }, { value: "Greenwich Standard Time", abbr: "GST", offset: 0, isdst: !1, text: "(UTC) Monrovia, Reykjavik", utc: ["Africa/Abidjan", "Africa/Accra", "Africa/Bamako", "Africa/Banjul", "Africa/Bissau", "Africa/Conakry", "Africa/Dakar", "Africa/Freetown", "Africa/Lome", "Africa/Monrovia", "Africa/Nouakchott", "Africa/Ouagadougou", "Africa/Sao_Tome", "Atlantic/Reykjavik", "Atlantic/St_Helena"] }, { value: "W. Europe Standard Time", abbr: "WEDT", offset: 2, isdst: !0, text: "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", utc: ["Arctic/Longyearbyen", "Europe/Amsterdam", "Europe/Andorra", "Europe/Berlin", "Europe/Busingen", "Europe/Gibraltar", "Europe/Luxembourg", "Europe/Malta", "Europe/Monaco", "Europe/Oslo", "Europe/Rome", "Europe/San_Marino", "Europe/Stockholm", "Europe/Vaduz", "Europe/Vatican", "Europe/Vienna", "Europe/Zurich"] }, { value: "Central Europe Standard Time", abbr: "CEDT", offset: 2, isdst: !0, text: "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", utc: ["Europe/Belgrade", "Europe/Bratislava", "Europe/Budapest", "Europe/Ljubljana", "Europe/Podgorica", "Europe/Prague", "Europe/Tirane"] }, { value: "Romance Standard Time", abbr: "RDT", offset: 2, isdst: !0, text: "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris", utc: ["Africa/Ceuta", "Europe/Brussels", "Europe/Copenhagen", "Europe/Madrid", "Europe/Paris"] }, { value: "Central European Standard Time", abbr: "CEDT", offset: 2, isdst: !0, text: "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb", utc: ["Europe/Sarajevo", "Europe/Skopje", "Europe/Warsaw", "Europe/Zagreb"] }, { value: "W. Central Africa Standard Time", abbr: "WCAST", offset: 1, isdst: !1, text: "(UTC+01:00) West Central Africa", utc: ["Africa/Algiers", "Africa/Bangui", "Africa/Brazzaville", "Africa/Douala", "Africa/Kinshasa", "Africa/Lagos", "Africa/Libreville", "Africa/Luanda", "Africa/Malabo", "Africa/Ndjamena", "Africa/Niamey", "Africa/Porto-Novo", "Africa/Tunis", "Etc/GMT-1"] }, { value: "Namibia Standard Time", abbr: "NST", offset: 1, isdst: !1, text: "(UTC+01:00) Windhoek", utc: ["Africa/Windhoek"] }, { value: "GTB Standard Time", abbr: "GDT", offset: 3, isdst: !0, text: "(UTC+02:00) Athens, Bucharest", utc: ["Asia/Nicosia", "Europe/Athens", "Europe/Bucharest", "Europe/Chisinau"] }, { value: "Middle East Standard Time", abbr: "MEDT", offset: 3, isdst: !0, text: "(UTC+02:00) Beirut", utc: ["Asia/Beirut"] }, { value: "Egypt Standard Time", abbr: "EST", offset: 2, isdst: !1, text: "(UTC+02:00) Cairo", utc: ["Africa/Cairo"] }, { value: "Syria Standard Time", abbr: "SDT", offset: 3, isdst: !0, text: "(UTC+02:00) Damascus", utc: ["Asia/Damascus"] }, { value: "E. Europe Standard Time", abbr: "EEDT", offset: 3, isdst: !0, text: "(UTC+02:00) E. Europe", utc: ["Asia/Nicosia", "Europe/Athens", "Europe/Bucharest", "Europe/Chisinau", "Europe/Helsinki", "Europe/Kiev", "Europe/Mariehamn", "Europe/Nicosia", "Europe/Riga", "Europe/Sofia", "Europe/Tallinn", "Europe/Uzhgorod", "Europe/Vilnius", "Europe/Zaporozhye"] }, { value: "South Africa Standard Time", abbr: "SAST", offset: 2, isdst: !1, text: "(UTC+02:00) Harare, Pretoria", utc: ["Africa/Blantyre", "Africa/Bujumbura", "Africa/Gaborone", "Africa/Harare", "Africa/Johannesburg", "Africa/Kigali", "Africa/Lubumbashi", "Africa/Lusaka", "Africa/Maputo", "Africa/Maseru", "Africa/Mbabane", "Etc/GMT-2"] }, { value: "FLE Standard Time", abbr: "FDT", offset: 3, isdst: !0, text: "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", utc: ["Europe/Helsinki", "Europe/Kiev", "Europe/Mariehamn", "Europe/Riga", "Europe/Sofia", "Europe/Tallinn", "Europe/Uzhgorod", "Europe/Vilnius", "Europe/Zaporozhye"] }, { value: "Turkey Standard Time", abbr: "TDT", offset: 3, isdst: !1, text: "(UTC+03:00) Istanbul", utc: ["Europe/Istanbul"] }, { value: "Israel Standard Time", abbr: "JDT", offset: 3, isdst: !0, text: "(UTC+02:00) Jerusalem", utc: ["Asia/Jerusalem"] }, { value: "Libya Standard Time", abbr: "LST", offset: 2, isdst: !1, text: "(UTC+02:00) Tripoli", utc: ["Africa/Tripoli"] }, { value: "Jordan Standard Time", abbr: "JST", offset: 3, isdst: !1, text: "(UTC+03:00) Amman", utc: ["Asia/Amman"] }, { value: "Arabic Standard Time", abbr: "AST", offset: 3, isdst: !1, text: "(UTC+03:00) Baghdad", utc: ["Asia/Baghdad"] }, { value: "Kaliningrad Standard Time", abbr: "KST", offset: 3, isdst: !1, text: "(UTC+02:00) Kaliningrad", utc: ["Europe/Kaliningrad"] }, { value: "Arab Standard Time", abbr: "AST", offset: 3, isdst: !1, text: "(UTC+03:00) Kuwait, Riyadh", utc: ["Asia/Aden", "Asia/Bahrain", "Asia/Kuwait", "Asia/Qatar", "Asia/Riyadh"] }, { value: "E. Africa Standard Time", abbr: "EAST", offset: 3, isdst: !1, text: "(UTC+03:00) Nairobi", utc: ["Africa/Addis_Ababa", "Africa/Asmera", "Africa/Dar_es_Salaam", "Africa/Djibouti", "Africa/Juba", "Africa/Kampala", "Africa/Khartoum", "Africa/Mogadishu", "Africa/Nairobi", "Antarctica/Syowa", "Etc/GMT-3", "Indian/Antananarivo", "Indian/Comoro", "Indian/Mayotte"] }, { value: "Moscow Standard Time", abbr: "MSK", offset: 3, isdst: !1, text: "(UTC+03:00) Moscow, St. Petersburg, Volgograd, Minsk", utc: ["Europe/Kirov", "Europe/Moscow", "Europe/Simferopol", "Europe/Volgograd", "Europe/Minsk"] }, { value: "Samara Time", abbr: "SAMT", offset: 4, isdst: !1, text: "(UTC+04:00) Samara, Ulyanovsk, Saratov", utc: ["Europe/Astrakhan", "Europe/Samara", "Europe/Ulyanovsk"] }, { value: "Iran Standard Time", abbr: "IDT", offset: 4.5, isdst: !0, text: "(UTC+03:30) Tehran", utc: ["Asia/Tehran"] }, { value: "Arabian Standard Time", abbr: "AST", offset: 4, isdst: !1, text: "(UTC+04:00) Abu Dhabi, Muscat", utc: ["Asia/Dubai", "Asia/Muscat", "Etc/GMT-4"] }, { value: "Azerbaijan Standard Time", abbr: "ADT", offset: 5, isdst: !0, text: "(UTC+04:00) Baku", utc: ["Asia/Baku"] }, { value: "Mauritius Standard Time", abbr: "MST", offset: 4, isdst: !1, text: "(UTC+04:00) Port Louis", utc: ["Indian/Mahe", "Indian/Mauritius", "Indian/Reunion"] }, { value: "Georgian Standard Time", abbr: "GET", offset: 4, isdst: !1, text: "(UTC+04:00) Tbilisi", utc: ["Asia/Tbilisi"] }, { value: "Caucasus Standard Time", abbr: "CST", offset: 4, isdst: !1, text: "(UTC+04:00) Yerevan", utc: ["Asia/Yerevan"] }, { value: "Afghanistan Standard Time", abbr: "AST", offset: 4.5, isdst: !1, text: "(UTC+04:30) Kabul", utc: ["Asia/Kabul"] }, { value: "West Asia Standard Time", abbr: "WAST", offset: 5, isdst: !1, text: "(UTC+05:00) Ashgabat, Tashkent", utc: ["Antarctica/Mawson", "Asia/Aqtau", "Asia/Aqtobe", "Asia/Ashgabat", "Asia/Dushanbe", "Asia/Oral", "Asia/Samarkand", "Asia/Tashkent", "Etc/GMT-5", "Indian/Kerguelen", "Indian/Maldives"] }, { value: "Yekaterinburg Time", abbr: "YEKT", offset: 5, isdst: !1, text: "(UTC+05:00) Yekaterinburg", utc: ["Asia/Yekaterinburg"] }, { value: "Pakistan Standard Time", abbr: "PKT", offset: 5, isdst: !1, text: "(UTC+05:00) Islamabad, Karachi", utc: ["Asia/Karachi"] }, { value: "India Standard Time", abbr: "IST", offset: 5.5, isdst: !1, text: "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi", utc: ["Asia/Kolkata", "Asia/Calcutta"] }, { value: "Sri Lanka Standard Time", abbr: "SLST", offset: 5.5, isdst: !1, text: "(UTC+05:30) Sri Jayawardenepura", utc: ["Asia/Colombo"] }, { value: "Nepal Standard Time", abbr: "NST", offset: 5.75, isdst: !1, text: "(UTC+05:45) Kathmandu", utc: ["Asia/Kathmandu"] }, { value: "Central Asia Standard Time", abbr: "CAST", offset: 6, isdst: !1, text: "(UTC+06:00) Nur-Sultan (Astana)", utc: ["Antarctica/Vostok", "Asia/Almaty", "Asia/Bishkek", "Asia/Qyzylorda", "Asia/Urumqi", "Etc/GMT-6", "Indian/Chagos"] }, { value: "Bangladesh Standard Time", abbr: "BST", offset: 6, isdst: !1, text: "(UTC+06:00) Dhaka", utc: ["Asia/Dhaka", "Asia/Thimphu"] }, { value: "Myanmar Standard Time", abbr: "MST", offset: 6.5, isdst: !1, text: "(UTC+06:30) Yangon (Rangoon)", utc: ["Asia/Rangoon", "Indian/Cocos"] }, { value: "SE Asia Standard Time", abbr: "SAST", offset: 7, isdst: !1, text: "(UTC+07:00) Bangkok, Hanoi, Jakarta", utc: ["Antarctica/Davis", "Asia/Bangkok", "Asia/Hovd", "Asia/Jakarta", "Asia/Phnom_Penh", "Asia/Pontianak", "Asia/Saigon", "Asia/Vientiane", "Etc/GMT-7", "Indian/Christmas"] }, { value: "N. Central Asia Standard Time", abbr: "NCAST", offset: 7, isdst: !1, text: "(UTC+07:00) Novosibirsk", utc: ["Asia/Novokuznetsk", "Asia/Novosibirsk", "Asia/Omsk"] }, { value: "China Standard Time", abbr: "CST", offset: 8, isdst: !1, text: "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi", utc: ["Asia/Hong_Kong", "Asia/Macau", "Asia/Shanghai"] }, { value: "North Asia Standard Time", abbr: "NAST", offset: 8, isdst: !1, text: "(UTC+08:00) Krasnoyarsk", utc: ["Asia/Krasnoyarsk"] }, { value: "Singapore Standard Time", abbr: "MPST", offset: 8, isdst: !1, text: "(UTC+08:00) Kuala Lumpur, Singapore", utc: ["Asia/Brunei", "Asia/Kuala_Lumpur", "Asia/Kuching", "Asia/Makassar", "Asia/Manila", "Asia/Singapore", "Etc/GMT-8"] }, { value: "W. Australia Standard Time", abbr: "WAST", offset: 8, isdst: !1, text: "(UTC+08:00) Perth", utc: ["Antarctica/Casey", "Australia/Perth"] }, { value: "Taipei Standard Time", abbr: "TST", offset: 8, isdst: !1, text: "(UTC+08:00) Taipei", utc: ["Asia/Taipei"] }, { value: "Ulaanbaatar Standard Time", abbr: "UST", offset: 8, isdst: !1, text: "(UTC+08:00) Ulaanbaatar", utc: ["Asia/Choibalsan", "Asia/Ulaanbaatar"] }, { value: "North Asia East Standard Time", abbr: "NAEST", offset: 8, isdst: !1, text: "(UTC+08:00) Irkutsk", utc: ["Asia/Irkutsk"] }, { value: "Japan Standard Time", abbr: "JST", offset: 9, isdst: !1, text: "(UTC+09:00) Osaka, Sapporo, Tokyo", utc: ["Asia/Dili", "Asia/Jayapura", "Asia/Tokyo", "Etc/GMT-9", "Pacific/Palau"] }, { value: "Korea Standard Time", abbr: "KST", offset: 9, isdst: !1, text: "(UTC+09:00) Seoul", utc: ["Asia/Pyongyang", "Asia/Seoul"] }, { value: "Cen. Australia Standard Time", abbr: "CAST", offset: 9.5, isdst: !1, text: "(UTC+09:30) Adelaide", utc: ["Australia/Adelaide", "Australia/Broken_Hill"] }, { value: "AUS Central Standard Time", abbr: "ACST", offset: 9.5, isdst: !1, text: "(UTC+09:30) Darwin", utc: ["Australia/Darwin"] }, { value: "E. Australia Standard Time", abbr: "EAST", offset: 10, isdst: !1, text: "(UTC+10:00) Brisbane", utc: ["Australia/Brisbane", "Australia/Lindeman"] }, { value: "AUS Eastern Standard Time", abbr: "AEST", offset: 10, isdst: !1, text: "(UTC+10:00) Canberra, Melbourne, Sydney", utc: ["Australia/Melbourne", "Australia/Sydney"] }, { value: "West Pacific Standard Time", abbr: "WPST", offset: 10, isdst: !1, text: "(UTC+10:00) Guam, Port Moresby", utc: ["Antarctica/DumontDUrville", "Etc/GMT-10", "Pacific/Guam", "Pacific/Port_Moresby", "Pacific/Saipan", "Pacific/Truk"] }, { value: "Tasmania Standard Time", abbr: "TST", offset: 10, isdst: !1, text: "(UTC+10:00) Hobart", utc: ["Australia/Currie", "Australia/Hobart"] }, { value: "Yakutsk Standard Time", abbr: "YST", offset: 9, isdst: !1, text: "(UTC+09:00) Yakutsk", utc: ["Asia/Chita", "Asia/Khandyga", "Asia/Yakutsk"] }, { value: "Central Pacific Standard Time", abbr: "CPST", offset: 11, isdst: !1, text: "(UTC+11:00) Solomon Is., New Caledonia", utc: ["Antarctica/Macquarie", "Etc/GMT-11", "Pacific/Efate", "Pacific/Guadalcanal", "Pacific/Kosrae", "Pacific/Noumea", "Pacific/Ponape"] }, { value: "Vladivostok Standard Time", abbr: "VST", offset: 11, isdst: !1, text: "(UTC+11:00) Vladivostok", utc: ["Asia/Sakhalin", "Asia/Ust-Nera", "Asia/Vladivostok"] }, { value: "New Zealand Standard Time", abbr: "NZST", offset: 12, isdst: !1, text: "(UTC+12:00) Auckland, Wellington", utc: ["Antarctica/McMurdo", "Pacific/Auckland"] }, { value: "UTC+12", abbr: "U", offset: 12, isdst: !1, text: "(UTC+12:00) Coordinated Universal Time+12", utc: ["Etc/GMT-12", "Pacific/Funafuti", "Pacific/Kwajalein", "Pacific/Majuro", "Pacific/Nauru", "Pacific/Tarawa", "Pacific/Wake", "Pacific/Wallis"] }, { value: "Fiji Standard Time", abbr: "FST", offset: 12, isdst: !1, text: "(UTC+12:00) Fiji", utc: ["Pacific/Fiji"] }, { value: "Magadan Standard Time", abbr: "MST", offset: 12, isdst: !1, text: "(UTC+12:00) Magadan", utc: ["Asia/Anadyr", "Asia/Kamchatka", "Asia/Magadan", "Asia/Srednekolymsk"] }, { value: "Kamchatka Standard Time", abbr: "KDT", offset: 13, isdst: !0, text: "(UTC+12:00) Petropavlovsk-Kamchatsky - Old", utc: ["Asia/Kamchatka"] }, { value: "Tonga Standard Time", abbr: "TST", offset: 13, isdst: !1, text: "(UTC+13:00) Nuku'alofa", utc: ["Etc/GMT-13", "Pacific/Enderbury", "Pacific/Fakaofo", "Pacific/Tongatapu"] }, { value: "Samoa Standard Time", abbr: "SST", offset: 13, isdst: !1, text: "(UTC+13:00) Samoa", utc: ["Pacific/Apia"] }] }); var G = k(y => { "use strict"; Object.defineProperty(y, "__esModule", { value: !0 }); y.CustomDate = y.getUpcomingMondayDate = y.calculateNextSchedulingTime = y.getNextScheduleTime = y.addSecondsToDate = y.addMinutesToDate = y.addHoursToDate = y.convertTime12to24 = y.parseDateAndTimeStringFromUI = y.getTimezoneUtcString = y.getTimeZoneDisplayName = y.getDateWithUTCOffset = y.getNearestTimeIn15MinInterval = y.getTimeBlockOptions = y.getFormattedTimezoneForMsg = y.formatDateTimeForMsg = y.formatTimeForMsg = y.formatDateForMsg = void 0; var u = require("@rocket.chat/apps-engine/definition/uikit"), pr = ur(), re = W(), Ri = (n, e, r) => `${new Intl.DateTimeFormat("en", { day: "numeric", timeZone: r }).format(n)} ${new Intl.DateTimeFormat("en", { month: e, timeZone: r }).format(n)}`; y.formatDateForMsg = Ri; var Si = (n, e) => new Intl.DateTimeFormat("en", { hour: "2-digit", minute: "2-digit", timeZone: e }).format(n); y.formatTimeForMsg = Si; var Pi = (n, e = new Date().getTimezoneOffset()) => { let r = (0, y.getTimezoneUtcString)(e); return `${(0, y.formatDateForMsg)(n, "short", r)} ${(0, y.formatTimeForMsg)(n, r)}` }; y.formatDateTimeForMsg = Pi; var Ei = n => new Intl.DateTimeFormat("en", { timeZone: n, timeZoneName: "long" }).format(new Date).substring(10); y.getFormattedTimezoneForMsg = Ei; var Ii = () => [{ text: { type: u.TextObjectType.PLAINTEXT, text: "12:00 AM (Midnight)" }, value: "12:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "12:15 AM" }, value: "12:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "12:30 AM" }, value: "12:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "12:45 AM" }, value: "12:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:00 AM" }, value: "01:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:15 AM" }, value: "01:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:30 AM" }, value: "01:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:45 AM" }, value: "01:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:00 AM" }, value: "02:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:15 AM" }, value: "02:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:30 AM" }, value: "02:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:45 AM" }, value: "02:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:00 AM" }, value: "03:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:15 AM" }, value: "03:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:30 AM" }, value: "03:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:45 AM" }, value: "03:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:00 AM" }, value: "04:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:15 AM" }, value: "04:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:30 AM" }, value: "04:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:45 AM" }, value: "04:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:00 AM" }, value: "05:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:15 AM" }, value: "05:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:30 AM" }, value: "05:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:45 AM" }, value: "05:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:00 AM" }, value: "06:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:15 AM" }, value: "06:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:30 AM" }, value: "06:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:45 AM" }, value: "06:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:00 AM" }, value: "07:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:15 AM" }, value: "07:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:30 AM" }, value: "07:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:45 AM" }, value: "07:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:00 AM" }, value: "08:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:15 AM" }, value: "08:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:30 AM" }, value: "08:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:45 AM" }, value: "08:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:00 AM" }, value: "09:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:15 AM" }, value: "09:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:30 AM" }, value: "09:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:45 AM" }, value: "09:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:00 AM" }, value: "10:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:15 AM" }, value: "10:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:30 AM" }, value: "10:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:45 AM" }, value: "10:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:00 AM" }, value: "11:00 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:15 AM" }, value: "11:15 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:30 AM" }, value: "11:30 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:45 AM" }, value: "11:45 AM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "12:00 PM (Noon)" }, value: "12:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "12:15 PM" }, value: "12:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "12:30 PM" }, value: "12:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "12:45 PM" }, value: "12:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:00 PM" }, value: "01:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:15 PM" }, value: "01:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:30 PM" }, value: "01:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "01:45 PM" }, value: "01:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:00 PM" }, value: "02:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:15 PM" }, value: "02:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:30 PM" }, value: "02:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "02:45 PM" }, value: "02:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:00 PM" }, value: "03:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:15 PM" }, value: "03:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:30 PM" }, value: "03:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "03:45 PM" }, value: "03:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:00 PM" }, value: "04:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:15 PM" }, value: "04:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:30 PM" }, value: "04:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "04:45 PM" }, value: "04:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:00 PM" }, value: "05:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:15 PM" }, value: "05:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:30 PM" }, value: "05:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "05:45 PM" }, value: "05:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:00 PM" }, value: "06:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:15 PM" }, value: "06:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:30 PM" }, value: "06:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "06:45 PM" }, value: "06:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:00 PM" }, value: "07:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:15 PM" }, value: "07:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:30 PM" }, value: "07:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "07:45 PM" }, value: "07:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:00 PM" }, value: "08:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:15 PM" }, value: "08:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:30 PM" }, value: "08:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "08:45 PM" }, value: "08:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:00 PM" }, value: "09:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:15 PM" }, value: "09:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:30 PM" }, value: "09:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "09:45 PM" }, value: "09:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:00 PM" }, value: "10:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:15 PM" }, value: "10:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:30 PM" }, value: "10:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "10:45 PM" }, value: "10:45 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:00 PM" }, value: "11:00 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:15 PM" }, value: "11:15 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:30 PM" }, value: "11:30 PM" }, { text: { type: u.TextObjectType.PLAINTEXT, text: "11:45 PM" }, value: "11:45 PM" }]; y.getTimeBlockOptions = Ii; var Ui = n => { let e = n.getUTCHours(), r = n.getUTCMinutes(), t = e >= 12 ? "PM" : "AM"; e = e % 12, e = e || 12; let a = ""; return r >= 0 && r < 15 ? a = "15" : r >= 15 && r < 30 ? a = "30" : r >= 30 && r < 45 ? a = "45" : (a = "00", e += 1, n.getUTCHours() === 12 ? t = "PM" : n.getUTCHours() === 23 && (t = "AM"), e = e % 12, e = e || 12), `${e <= 9 ? "0" : ""}${e}:${a} ${t}` }; y.getNearestTimeIn15MinInterval = Ui; var zi = (n, e, r) => { let t = r === void 0 ? -n.getTimezoneOffset() / 60 : r, a = e - t, i = n.getTime(), o = a * 1e3 * 60 * 60; return new Date(i + o) }; y.getDateWithUTCOffset = zi; var Di = n => { if (n === 0) return "(UTC) Coordinated Universal Time"; let e = pr.TimeZones.find(r => r.offset === n); return e ? e.text : "(UTC) Coordinated Universal Time" }; y.getTimeZoneDisplayName = Di; var ji = n => { let e = pr.TimeZones.find(r => r.offset === n && r.utc.length); return e ? e.utc[0] : "UTC" }; y.getTimezoneUtcString = ji; var Oi = (n, e, r) => { let [t, a, i] = n.split("-"), { hour: o, min: s } = (0, y.convertTime12to24)(e), _ = Date.UTC(Number(t), Number(a) - 1, Number(i), o, s, 0, 0) - r * 60 * 60 * 1e3; return new Date(_) }; y.parseDateAndTimeStringFromUI = Oi; var Ci = n => { let [e, r] = n.split(" "), [t, a] = e.split(":"); return t === "12" && (t = "00"), r === "PM" && (t = `${parseInt(t, 10) + 12}`), { hour: parseInt(t), min: parseInt(a) } }; y.convertTime12to24 = Ci; var Li = (n, e) => new Date(n.getTime() + e * 60 * 60 * 1e3); y.addHoursToDate = Li; var Ni = (n, e) => new Date(n.getTime() + e * 6e4); y.addMinutesToDate = Ni; var Bi = (n, e) => new Date(n.getTime() + e * 1e3); y.addSecondsToDate = Bi; var qi = (n, e) => { switch (e) { case re.RecurringReminderFrequencies.DAILY: return (0, y.addMinutesToDate)(n, 24 * 60); case re.RecurringReminderFrequencies.DAILY_WEEKDAYS: { if (n.getDay() >= 1 && n.getDay() <= 4) return (0, y.addMinutesToDate)(n, 24 * 60); let r = 0; switch (n.getDay()) { case 5: { r = 3; break } case 6: { r = 2; break } case 0: { r = 1; break } }return (0, y.addMinutesToDate)(n, r * 24 * 60) } case re.RecurringReminderFrequencies.WEEKLY: return (0, y.addMinutesToDate)(n, 7 * 24 * 60); case re.RecurringReminderFrequencies.BIWEEKLY: return (0, y.addMinutesToDate)(n, 2 * 7 * 24 * 60); case re.RecurringReminderFrequencies.TRIWEEKLY: return (0, y.addMinutesToDate)(n, 3 * 7 * 24 * 60); case re.RecurringReminderFrequencies.MONTHLY: return new fe(n).addMonths(1); case re.RecurringReminderFrequencies.QUARTERLY: return new fe(n).addMonths(3); case re.RecurringReminderFrequencies.BIANNUALLY: return new fe(n).addMonths(6); case re.RecurringReminderFrequencies.ANNUALLY: return new fe(n).addMonths(12); case re.RecurringReminderFrequencies.DO_NOT_REPEAT: throw new Error("DO_NOT_REPEAT is not supported") } }; y.getNextScheduleTime = qi; var $i = async (n, e) => { let r = (0, y.getNextScheduleTime)(n, e); for (; new fe(r).isLessThanOrEqualTo(new Date);)r = (0, y.getNextScheduleTime)(r, e); return r }; y.calculateNextSchedulingTime = $i; var Vi = n => { let e = new Date(n); return e.setDate(e.getDate() + ((1 + 7 - e.getDay()) % 7 || 7)), e }; y.getUpcomingMondayDate = Vi; var fe = class extends Date { _isLeapYear(e) { return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 } _getDaysInMonth(e, r) { return [31, this._isLeapYear(e) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][r] } isLeapYear() { return this._isLeapYear(this.getFullYear()) } getDaysInMonth() { return this._getDaysInMonth(this.getFullYear(), this.getMonth()) } addMonths(e) { let r = this.getDate(); return this.setDate(1), this.setMonth(this.getMonth() + e), this.setDate(Math.min(r, this.getDaysInMonth())), this } isLessThanOrEqualTo(e) { return this.getTime() <= e.getTime() } }; y.CustomDate = fe }); var gr = k(it => {
    "use strict"; Object.defineProperty(it, "__esModule", { value: !0 }); it.en = void 0; it.en = {
        "1_hour": "1 hour", "20_minutes": "20 minutes", "3_hours": "3 hours", add_a_note: "Add a note", add_reminder_message_box_action: "\u23F0 Add Reminder", annually: "Annually", biannually: "Biannually", biweekly: "Biweekly", bulk_delete_reminders_confirmation_message: "You're about to delete **__total__** __reminderType__ reminders. Are you sure?", cancel: "Cancel", channel_plural: "Channel(s)", channel_reminder_info_message: `If you wish to add multiple channel(s), then separate them with a comma.

Note: We'll send a message immediately to these channel(s), letting them know this is coming up.

Tip: Type /remind #general #random from the message input box to use auto-complete feature.`, channel_reminder_message: 'set up a reminder "__description__" in this channel at __time__ __frequency__, __timezone__', close: "Close", completed: "Completed", completed_reminder_in_list_with_description: '"__description__" (completed at __time__)', completed_reminder_in_list_with_message: "About [this message](__messageUrl__) from __userName__ in __roomName__ (completed at __time__)", completed_reminder_in_list_with_message_with_note: 'About [this message](__messageUrl__) from __userName__ in __roomName__ (with note "__note__") (completed at __time__)', connected_message_link: "Connected Message Link", contact_us: "\u{1F517} Contact Us", control_shortcuts: "Control Shortcuts:", create: "Create", create_a_reminder: "Create a Reminder", create_reminder: "Create Reminder", custom: "Custom", daily: "Daily", daily_weekdays_only: "Daily (weekdays only)", date: "Date", delete: "\u274C Delete", delete_all_completed_reminders: "\u2620\uFE0F Delete all completed reminders", delete_all_past_reminders: "\u2620\uFE0F Delete all past reminders", delete_reminder: "Delete Reminders", delete_reminders_success_message: "Successfully deleted all __remindersType__ reminders!", direct_message_with_participants: "Direct message with __participants__", do_not_repeat: "Do not repeat", error: "Error!", error_add_reminder_message_box_action_failed: "Something went wrong. Please try again later or use the /remind command to create a reminder manually.", error_unable_to_find_reminder: "Sorry, We were unable to find the reminder, perhaps it was deleted?", every_2_weeks: "every 2 weeks", every_3_weeks: "every 3 weeks", every_6_months: "every 6 months", every_day: "every day", every_month: "every month", every_quarter: "every quarter", every_week: "every week", every_weekday: "every weekday", every_year: "every year", frequency: "Frequency", help_command_basic_usage: `Basic usage:
*/remind* Create a reminder for yourself or a group of people.
*/remind #channel* Create a reminder for a channel.
*/remind @user* Create a reminder for a user.
*/remind list* List all your reminders.
*/remind help* Shows help message`, help_command_greeting_message: "Hi __name__, I'm Reminder Bot \u{1F44B} Here are some quick tips to get you started!", help_command_message_reminder_usage: "If you want to get reminded about a specific message, then hover over the message, click on three dots icon in the top-right corner of the message and then click on **Remind me about this**", hide_this_message: "Hide this message", in_1_hour: "in 1 hour", in_20_minutes: "in 20 minutes", in_3_hours: "in 3 hours", language: "Language", language_en: "English", language_pl: "Polish", language_pt: "Portuguese", language_de: "German", language_ru: "Russian", license: "Premium License", license_description: "Enter you premium license key to unlock premium features. You can get it from https://addreminders.github.io/license for free right now", livechat_message_with_name: "Livechat message from __name__", mark_as_completed: "\u2705 Mark as Completed", max_5_reminders_limit_exhausted_message: "Oh no! You have exceeded your usage limit of maximum 5 active reminders. Please delete some existing active reminders to create a new one, or upgrade your license to unlimited usage.", me: "Me", message_is_hidden: "This message has been hidden.", monthly: "Monthly", more_help: "\u{1F517} More Help", more_options: "More Options", need_more: "Need more?", next_week_mon_9am: "Next week, Mon 9am", next_week_at_time: "next week at __time__", no_cancel: "No, cancel", no_completed_reminders: "You have no completed reminders to view.", no_upcoming_reminders_to_view: "You have no upcoming reminders to view. Try creating one using `/remind` slash command.", note_your_timezone_is_set_to: "Note: Your timezone is set to __timezone__.", okay_close: "Okay, close", okay_i_will_remind_you_about_this_at_time: "Okay, I will remind you about this at __time__.", optional: "optional", past: "Past", past_and_incomplete: "Past and Incomplete", please_complete_this_required_field: "\u26A0\uFE0F Please complete this required field.", please_give_a_valid_time_in_future: "\u26A0\uFE0F Please give a valid time that is in the future", premium_feature: "\u26A0\uFE0F Premium feature", premium_license_details: "\u26A0\uFE0F Please note that this is a Premium feature. You can use this feature by purchasing a license from [here](__licenseLink__).", premium_license_recurring_feature_warning: "\u26A0\uFE0F Please note that recurring reminders is a premium feature. You can use this feature by purchasing a license from [here](__licenseLink__).", premium_license_warning: "\u26A0\uFE0F Please make sure you have a valid license", quarterly: "Quarterly", recurring_remind_audience_at_time_and_frequency: 'Remind __audience__ "__description__" at __time__, __frequency__.', recurring_reminder_in_list_with_description_and_frequency: '"__description__" due __time__, __frequency__', recurring_reminders: "Recurring Reminders", remind_audience_at_time: 'Remind __audience__ "__description__" at __time__.', remind_audience_completed_at_time: 'Remind __audience__ "__description__" (completed at __time__).', remind_audience_was_due_at_time: 'Reminder for __audience__ "__description__" was due at __time__.', remind_command_description: "Create reminders. Type `/remind help` for more info", remind_command_params: "list, create, help", remind_me_about_this_msg_action: "\u23F0 Remind me about this", remind_me_to: "Remind me to...", reminder_already_completed: "This reminder has already been completed!", reminder_already_snoozed: "This reminder has already been snoozed!", reminder_completed_for_message: "Ok, I've marked the reminder about [this message](__messageUrl__) from __userName__ in __roomName__ as complete.", reminder_completed_for_message_with_note: `Ok, I've marked the reminder about [this message](__messageUrl__) from __userName__ in __roomName__ (with note "__note__") as complete.`, reminder_completed_with_description: `Ok, I've marked the reminder "__description__" as completed.`, reminder_created: "Reminder Created \u2705", reminder_delete_success: "The reminder has been deleted successfully!", reminder_in_list_with_description: '"__description__" due __time__', reminder_in_list_with_message: "About [this message](__messageUrl__) from __userName__ in __roomName__ due on __dueDate__", reminder_in_list_with_message_with_note: 'About [this message](__messageUrl__) from __userName__ in __roomName__ (with note "__note__") due on __dueDate__', reminder_marked_as_completed: "Ok, I've marked this reminder as completed.", reminder_message: "Reminder Message", reminder_message_with_description: 'You asked me to remind you "__description__".', reminder_message_with_message: "You asked me to remind you about [this message](__messageUrl__) from __userName__ in __roomName__", reminder_message_with_message_with_note: 'You asked me to remind you about [this message](__messageUrl__) from __userName__ in __roomName__ (with note "__note__")', reminder_notification: "Reminder Notification", reminder_snoozed: "This reminder has been snoozed! I'll remind you __nextScheduledTime__.", reminder_snoozed_for_message: "This reminder has been snoozed! I'll remind you about [this message](__messageUrl__) from __userName__ in __roomName__ __nextScheduledTime__.", reminder_snoozed_for_message_with_note: `This reminder has been snoozed! I'll remind you about [this message](__messageUrl__) from __userName__ in __roomName__ (with note "__note__") __nextScheduledTime__.`, reminder_snoozed_with_description: `This reminder has been snoozed! I'll remind you "__description__" __nextScheduledTime__.`, room_reminder_from_user_with_name_with_description: "Reminder from @__reminderCreatorUsername__: __description__", room_with_name_not_found: "Room #__roomName__ not found", select_recipient_type: "Select Recipient Type", set_language: "Set Language", set_preferred_language: "Set Preferred Language", show_add_reminder_button: "Show Add Reminder Button", show_add_reminder_button_description: `If Enabled, the Add Reminder button will be shown on the message input box providing a quick way to add a reminder.

Note: After changing this setting, you will need to disable and re-enable the app to see the changes.`, show_my_reminders_room_action: "\u23F0 Show my Reminders", show_view_all_reminder_button: "Show View All Reminders Button", show_view_all_reminder_button_description: `If Enabled, the View All Reminders button will be shown on all room options menu.

Note: After changing this setting, you will need to disable and re-enable the app to see the changes.`, snooze: "Snooze", snooze_in_1_hour: "Snooze in 1 hour", snooze_in_1_week: "Snooze in 1 week", snooze_in_20_minutes: "Snooze in 20 minutes", snooze_in_3_hours: "Snooze in 3 hours", snooze_next_week_mon_9am: "Snooze next week on Monday at 9am", snooze_tomorrow_at_9am: "Snooze tomorrow at 9am", snooze_tomorrow_at_time: "Snooze tomorrow at __time__", something_went_wrong: "Something went wrong", stats_reporting: "Send Statistics", stats_reporting_description: "By sending your statistics, you'll help us identify how you are using this app, as well as how good the app is behaving, so we can further improve it. Don't worry, as no user information is sent and all the information we receive is kept confidential.", success: "Success!", time: "Time", tip_on_how_to_list_all_reminders: 'Tip: You can find a list of all your reminders by either running `/remind list` slash command or by clicking on the "Show My Reminders" button on any of your channels options panel.', tomorrow_at_9AM: "Tomorrow at 9AM", tomorrow_at_time: "tomorrow at __time__", triweekly: "Triweekly", unknown_room: "Unknown Room", unsupported_language: "Unsupported Language", upcoming_reminders: "Upcoming Reminders", update_my_preference: "Update my Preference", upgrade_account: "\u{1F517} Upgrade Account", upgrade_license: "Upgrade License", usage_exhausted: "Usage Exhausted", user_plural: "User(s)", user_reminder_from_user_with_name_with_description: '@__reminderCreatorUsername__ asked me to remind you about "__description__"', user_reminder_info_message: `If you wish to add multiple user(s), then separate them with a comma.

Tip: Type /remind @john.doe @jane.doe from the message input box to use auto-complete feature.`, user_with_username_not_found: "User @__username__ not found", view_all_reminders: "View All Reminders", view_completed_reminders: "View Completed Reminders", view_existing_reminders: "View Existing Reminders", view_reminders: "View Reminders", weekly: "Weekly", when: "When?", when_do_you_want_to_be_reminded: "When do you want to be reminded?", who_to_remind: "Who to Remind?", yes_delete_reminders: "Yes, delete reminders", you: "you", you_have_no_reminders: "You have no reminders to view. Try creating one using `/remind` slash command.", your_preferred_language_has_been_updated_to_language: "Your preferred language has been updated to __language__"
    }
}); var hr = k(nt => {
    "use strict"; Object.defineProperty(nt, "__esModule", { value: !0 }); nt.de = void 0; nt.de = {
        "1_hour": "1 Stunde", "20_minutes": "20 Minuten", "3_hours": "3 Stunden", add_a_note: "Eine Notiz hinzuf\xFCgen", add_reminder_message_box_action: "\u23F0 Erinnerung hinzuf\xFCgen", annually: "J\xE4hrlich", biannually: "Halbj\xE4hrlich", biweekly: "Zweiw\xF6chentlich", bulk_delete_reminders_confirmation_message: "Sie sind dabei, **__total__** __reminderType__ Erinnerungen zu l\xF6schen. Sind Sie sicher?", cancel: "Abbrechen", channel_plural: "Kanal(e)", channel_reminder_info_message: `Wenn Sie mehrere Kan\xE4le hinzuf\xFCgen m\xF6chten, trennen Sie diese durch ein Komma.

Hinweis: Wir senden sofort eine Nachricht an diese(n) Kanal(e), um sie zu informieren, dass dies ansteht.

Tipp: Geben Sie /remind #general #random in das Nachrichteneingabefeld ein, um die Autovervollst\xE4ndigungsfunktion zu nutzen.`, channel_reminder_message: 'eine Erinnerung "__description__" in diesen Kanal um __time__ __frequency__, __timezone__ einrichten', close: "Schlie\xDFen", completed: "Abgeschlossen", completed_reminder_in_list_with_description: '"__description__" (abgeschlossen am __time__)', completed_reminder_in_list_with_message: "\xDCber [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ (abgeschlossen um __time__)", completed_reminder_in_list_with_message_with_note: '\xDCber [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ (mit Notiz "__note__") (abgeschlossen um __time__)', connected_message_link: "Verbundene Nachricht Link", contact_us: "\u{1F517} Kontakt", control_shortcuts: "Tastenkombinationen steuern:", create: "Erstellen", create_a_reminder: "Eine Erinnerung erstellen", create_reminder: "Erinnerung erstellen", custom: "Benutzerdefiniert", daily: "T\xE4glich", daily_weekdays_only: "T\xE4glich (nur werktags)", date: "Datum", delete: "\u274C L\xF6schen", delete_all_completed_reminders: "\u2620\uFE0F Alle erledigten Erinnerungen l\xF6schen", delete_all_past_reminders: "\u2620\uFE0F Alle vergangenen Erinnerungen l\xF6schen", delete_reminder: "Erinnerungen l\xF6schen", delete_reminders_success_message: "Erfolgreich alle __remindersType__-Erinnerungen gel\xF6scht!", direct_message_with_participants: "Direktnachricht mit __participants__", do_not_repeat: "Nicht wiederholen", error: "Fehler!", error_add_reminder_message_box_action_failed: "Es ist ein Fehler aufgetreten. Bitte versuchen Sie es sp\xE4ter noch einmal oder verwenden Sie den Befehl /remind, um manuell eine Erinnerung zu erstellen.", error_unable_to_find_reminder: "Sorry, wir konnten die Erinnerung nicht finden, vielleicht wurde sie gel\xF6scht?", every_2_weeks: "alle 2 Wochen", every_3_weeks: "alle 3 Wochen", every_6_months: "alle 6 Monate", every_day: "jeden Tag", every_month: "jeden Monat", every_quarter: "viertelj\xE4hrlich", every_week: "jede Woche", every_weekday: "jeden Wochentag", every_year: "jedes Jahr", frequency: "Frequenz", help_command_basic_usage: `Grundlegende Verwendung:
*/remind* Erstellen Sie eine Erinnerung f\xFCr sich selbst oder eine Gruppe von Personen.
*/remind #Kanal* Erstellen Sie eine Erinnerung f\xFCr einen Kanal.
*/remind @Benutzer* Erstellen Sie eine Erinnerung f\xFCr einen Benutzer.
*/remind liste* Listet alle Ihre Erinnerungen auf.
*/remind helfen* Zeigt eine Hilfemeldung an`, help_command_greeting_message: "Hallo __name__, ich bin Erinnerungs-Bot \u{1F44B} Hier sind ein paar schnelle Tipps, damit du loslegen kannst!", help_command_message_reminder_usage: "Wenn Sie an eine bestimmte Nachricht erinnert werden m\xF6chten, bewegen Sie den Mauszeiger \xFCber die Nachricht, klicken Sie auf das Symbol mit den drei Punkten in der oberen rechten Ecke der Nachricht und dann auf **Erinnern Sie mich daran**", hide_this_message: "Diese Nachricht ausblenden", in_1_hour: "in 1 Stunde", in_20_minutes: "in 20 Minuten", in_3_hours: "in 3 Stunden", language: "Sprache", language_en: "Englisch", language_pl: "Polieren", language_pt: "Portugiesisch", language_de: "Deutsch", language_ru: "Russisch", license: "Premium-Lizenz", license_description: "Geben Sie Ihren Premium-Lizenzschl\xFCssel ein, um die Premium-Funktionen freizuschalten. Sie k\xF6nnen es jetzt kostenlos von https://addreminders.github.io/license erhalten", livechat_message_with_name: "Livechat-Nachricht von __name__", mark_as_completed: "\u2705 Als erledigt markieren", max_5_reminders_limit_exhausted_message: "Oh nein! Sie haben Ihr Nutzungslimit von maximal 5 aktiven Erinnerungen \xFCberschritten. Bitte l\xF6schen Sie einige bestehende aktive Erinnerungen, um eine neue zu erstellen, oder erweitern Sie Ihre Lizenz auf unbegrenzte Nutzung.", me: "Ich", message_is_hidden: "Diese Nachricht wurde ausgeblendet.", monthly: "Monatlich", more_help: "\u{1F517} Mehr Hilfe", more_options: "Mehr Optionen", need_more: "Brauchen Sie mehr?", next_week_mon_9am: "N\xE4chste Woche, Mo 9am", next_week_at_time: "n\xE4chste Woche um __time__", no_cancel: "Nein, abbrechen", no_completed_reminders: "Sie haben keine abgeschlossenen Erinnerungen zur Ansicht.", no_upcoming_reminders_to_view: "Sie haben keine anstehenden Erinnerungen zu sehen. Versuchen Sie, eine mit dem Schr\xE4gstrichbefehl `/remind` zu erstellen.", note_your_timezone_is_set_to: "Hinweis: Ihre Zeitzone ist auf __timezone__ eingestellt.", okay_close: "Okay, schlie\xDFen", okay_i_will_remind_you_about_this_at_time: "Okay, ich werde Sie um __time__ daran erinnern.", optional: "optional", past: "vergangen", past_and_incomplete: "Vergangen und unvollst\xE4ndig", please_complete_this_required_field: "\u26A0\uFE0F Bitte f\xFCllen Sie dieses Pflichtfeld aus.", please_give_a_valid_time_in_future: "\u26A0\uFE0F Bitte geben Sie einen g\xFCltigen Zeitpunkt an, der in der Zukunft liegt", premium_feature: "\u26A0\uFE0F Premium-Funktion", premium_license_details: "bitte beachten Sie, dass dies eine Premium-Funktion ist. Sie k\xF6nnen diese Funktion nutzen, indem Sie eine Lizenz von [hier](__licenseLink__) erwerben.", premium_license_recurring_feature_warning: "\u26A0\uFE0F Bitte beachten Sie, dass wiederkehrende Erinnerungen eine Premium-Funktion sind. Sie k\xF6nnen diese Funktion nutzen, indem Sie eine Lizenz von [hier](__licenseLink__) erwerben.", premium_license_warning: "\u26A0\uFE0F Bitte stellen Sie sicher, dass Sie einen g\xFCltige Lizenz haben", quarterly: "Viertelj\xE4hrlich", recurring_remind_audience_at_time_and_frequency: 'Erinnern Sie __audience__ "__description__" zu __time__, __frequency__.', recurring_reminder_in_list_with_description_and_frequency: '"__description__" durch __time__, __frequency__', recurring_reminders: "Wiederkehrende Erinnerungen", remind_audience_at_time: 'Erinnern Sie __audience__ "__description__" zu __time__.', remind_audience_completed_at_time: 'Erinnern Sie __audience__ "__description__" (ausgef\xFCllt am __time__).', remind_audience_was_due_at_time: 'Erinnerung f\xFCr __audience__ "__description__" war um __time__ f\xE4llig.', remind_command_description: "Erinnerung erstellen. Tippen Sie `/remind helfen` f\xFCr weitere Informationen", remind_command_params: "liste, erstellen, helfen", remind_me_about_this_msg_action: "\u23F0 Erinnern Sie mich daran", remind_me_to: "Erinnern Sie mich daran, dass...", reminder_already_completed: "Diese Erinnerung ist bereits abgeschlossen!", reminder_already_snoozed: "Diese Erinnerung wurde bereits stummgeschaltet!", reminder_completed_for_message: "Ok, ich habe die Erinnerung an [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ als abgeschlossen markiert.", reminder_completed_for_message_with_note: 'Ok, ich habe die Erinnerung \xFCber [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ (mit der Notiz "__note__") als vollst\xE4ndig markiert.', reminder_completed_with_description: 'Ok, ich habe die Erinnerung "__description__" als erledigt markiert.', reminder_created: "Erinnerung erstellt \u2705", reminder_delete_success: "Die Erinnerung wurde erfolgreich gel\xF6scht!", reminder_in_list_with_description: '"__description__" f\xE4llig __time__', reminder_in_list_with_message: "\xDCber [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ f\xE4llig am __dueDate__", reminder_in_list_with_message_with_note: '\xDCber [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ (mit Notiz "__note__") f\xE4llig am __dueDate__', reminder_marked_as_completed: "Ok, ich habe diese Erinnerung als abgeschlossen markiert.", reminder_message: "Erinnerungsnachricht", reminder_message_with_description: 'Sie haben mich gebeten, Sie an "__description__" zu erinnern.', reminder_message_with_message: "Sie haben mich gebeten, Sie an [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ zu erinnern", reminder_message_with_message_with_note: 'Sie haben mich gebeten, Sie an [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ zu erinnern (mit Notiz "__note__")', reminder_notification: "Erinnerungsbenachrichtigung", reminder_snoozed: "Diese Erinnerung wurde stummgeschaltet! Ich erinnere Sie an __nextScheduledTime__.", reminder_snoozed_for_message: "Diese Erinnerung wurde stummgeschaltet! Ich erinnere Sie an [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ __nextScheduledTime__.", reminder_snoozed_for_message_with_note: 'Diese Erinnerung wurde stummgeschaltet! Ich erinnere Sie an [diese Nachricht](__messageUrl__) von __userName__ in __roomName__ (mit Hinweis "__note__") __nextScheduledTime__.', reminder_snoozed_with_description: 'Diese Erinnerung wurde verschlummert! Ich erinnere Sie an "__description__" __nextScheduledTime__.', room_reminder_from_user_with_name_with_description: "Erinnerung von @__reminderCreatorUsername__: __description__", room_with_name_not_found: "Raum #__roomName__ nicht gefunden", select_recipient_type: "Empf\xE4ngertyp ausw\xE4hlen", set_language: "Sprache einstellen", set_preferred_language: "Bevorzugte Sprache einstellen", show_add_reminder_button: 'Schaltfl\xE4che "Erinnerung hinzuf\xFCgen" anzeigen', show_add_reminder_button_description: `Wenn diese Option aktiviert ist, wird die Schaltfl\xE4che "Erinnerung hinzuf\xFCgen" im Eingabefeld f\xFCr die Nachricht angezeigt, damit Sie schnell eine Erinnerung hinzuf\xFCgen k\xF6nnen.

Hinweis: Nachdem Sie diese Einstellung ge\xE4ndert haben, m\xFCssen Sie die App deaktivieren und wieder aktivieren, um die \xC4nderungen zu sehen.`, show_my_reminders_room_action: "\u23F0 Meine Erinnerungen anzeigen", show_view_all_reminder_button: 'Schaltfl\xE4che "Alle Erinnerungen anzeigen', show_view_all_reminder_button_description: `Wenn diese Option aktiviert ist, wird die Schaltfl\xE4che Alle Erinnerungen anzeigen in allen Raumoptionen angezeigt.

Hinweis: Nachdem Sie diese Einstellung ge\xE4ndert haben, m\xFCssen Sie die App deaktivieren und erneut aktivieren, um die \xC4nderungen zu sehen.`, snooze: "Stummschalten", snooze_in_1_hour: "Stummschalten f\xFCr 1 Stunde", snooze_in_1_week: "Stummschalten f\xFCr 1 Woche", snooze_in_20_minutes: "Stummschalten f\xFCr 20 Minuten", snooze_in_3_hours: "Stummschalten f\xFCr 3 Stunden", snooze_next_week_mon_9am: "Stummschalten n\xE4chste Woche, Mo um 9am", snooze_tomorrow_at_9am: "Stummschalten f\xFCr morgen um 9am", snooze_tomorrow_at_time: "Stummschalten f\xFCr morgen um __time__", something_went_wrong: "Etwas ist schief gelaufen", stats_reporting: "Statistik senden", stats_reporting_description: "Indem Sie uns Ihre Statistiken \xFCbermitteln, helfen Sie uns herauszufinden, wie Sie diese App nutzen und wie gut sie sich verh\xE4lt, damit wir sie weiter verbessern k\xF6nnen. Keine Sorge, es werden keine Benutzerdaten gesendet und alle Informationen, die wir erhalten, werden vertraulich behandelt.", success: "Erfolgreich!", time: "Zeit", tip_on_how_to_list_all_reminders: 'Tipp: Sie k\xF6nnen eine Liste aller Ihrer Erinnerungen finden, indem Sie entweder den Schr\xE4gstrich-Befehl `/remind liste` ausf\xFChren oder auf die Schaltfl\xE4che "Meine Erinnerungen anzeigen" in einem der Optionsfelder Ihrer Kan\xE4le klicken.', tomorrow_at_9AM: "morgen um 9AM", tomorrow_at_time: "morgen um __time__", triweekly: "Dreiw\xF6chentlich", unknown_room: "Unbekannter Raum", unsupported_language: "Nicht unterst\xFCtzte Sprache", upcoming_reminders: "Kommende Mahnungen", update_my_preference: "Meine Pr\xE4ferenz aktualisieren", upgrade_account: "\u{1F517} Konto aktualisieren", upgrade_license: "Upgrade-Lizenz", usage_exhausted: "Verwendung ersch\xF6pft", user_plural: "Benutzer(innen)", user_reminder_from_user_with_name_with_description: '@__reminderCreatorUsername__ bat mich, dich an "__description__" zu erinnern', user_reminder_info_message: `Wenn Sie mehrere Benutzer hinzuf\xFCgen m\xF6chten, trennen Sie diese durch ein Komma.

Tipp: Geben Sie /remind @john.doe @jane.doe in das Nachrichteneingabefeld ein, um die Autovervollst\xE4ndigungsfunktion zu nutzen.`, user_with_username_not_found: "Benutzer @__username__ nicht gefunden", view_all_reminders: "Alle Erinnerungen anzeigen", view_completed_reminders: "Erledigte Erinnerungen anzeigen", view_existing_reminders: "Vorhandene Erinnerungen anzeigen", view_reminders: "Erinnerungen anzeigen", weekly: "W\xF6chentlich", when: "Wann?", when_do_you_want_to_be_reminded: "Wann m\xF6chten Sie daran erinnert werden?", who_to_remind: "Wer soll erinnert werden?", yes_delete_reminders: "Ja, Erinnerungen l\xF6schen", you: "sie", you_have_no_reminders: "Sie haben keine Erinnerungen zur Ansicht. Versuchen Sie, eine mit dem Schr\xE4gstrichbefehl `/remind` zu erstellen.", your_preferred_language_has_been_updated_to_language: "Ihre bevorzugte Sprache wurde auf __language__ aktualisiert"
    }
}); var fr = k(at => {
    "use strict"; Object.defineProperty(at, "__esModule", { value: !0 }); at.pt = void 0; at.pt = {
        "1_hour": "1 hora", "20_minutes": "20 minutos", "3_hours": "3 horas", add_a_note: "Acrescentar uma nota", add_reminder_message_box_action: "\u23F0 Adicionar Lembrete", annually: "Anualmente", biannually: "Semestralmente", biweekly: "Quinzenal", bulk_delete_reminders_confirmation_message: "Est\xE1 prestes a apagar **__total__** __reminderType__ lembretes. Tem a certeza?", cancel: "Cancelar", channel_plural: "Canais", channel_reminder_info_message: `Se desejar adicionar v\xE1rios canais, ent\xE3o separ\xE1-los com uma v\xEDrgula.

Nota: Enviaremos imediatamente uma mensagem a este(s) canal(es), avisando-os de que isto est\xE1 a chegar.

Dica: Digite /remind #general #random da caixa de entrada de mensagens para usar a funcionalidade de auto-completar.`, channel_reminder_message: 'criou um lembrete "__description__" neste canal \xE0s __time__ __frequency__, __timezone__', close: "Fechar", completed: "Conclu\xEDdo", completed_reminder_in_list_with_description: '"__description__" (preenchido em __time__)', completed_reminder_in_list_with_message: "Sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ (completado em __time__)", completed_reminder_in_list_with_message_with_note: 'Sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ (com a nota "__note__") (completada em __time__)', connected_message_link: "Liga\xE7\xE3o de Mensagem Ligada", contact_us: "\u{1F517} Contacte-nos", control_shortcuts: "Atalhos de controlo:", create: "Criar", create_a_reminder: "Criar um Lembrete", create_reminder: "Criar Lembrete", custom: "Personalizado", daily: "Di\xE1rio", daily_weekdays_only: "Diariamente (apenas durante a semana)", date: "Data", delete: "\u274C Apagar", delete_all_completed_reminders: "\u2620\uFE0F Apagar todos os lembretes completos", delete_all_past_reminders: "\u2620\uFE0F Apagar todos os lembretes anteriores", delete_reminder: "Apagar Lembretes", delete_reminders_success_message: "Todos os lembretes __reminderType__ foram eliminados com sucesso!", direct_message_with_participants: "Mensagem directa com __participants__", do_not_repeat: "N\xE3o repetir", error: "Erro!", error_add_reminder_message_box_action_failed: "Alguma coisa correu mal. Tente novamente mais tarde ou use o comando /remind para criar um lembrete manualmente.", error_unable_to_find_reminder: "Desculpe, n\xE3o conseguimos encontrar o lembrete, talvez tenha sido apagado?", every_2_weeks: "A cada 2 semanas", every_3_weeks: "A cada 3 semanas", every_6_months: "A cada 6 meses", every_day: "todos os dias", every_month: "todo m\xEAs", every_quarter: "cada trimestre", every_week: "todas as semanas", every_weekday: "todos os dias da semana", every_year: "todos os anos", frequency: "Frequ\xEAncia", help_command_basic_usage: `Utiliza\xE7\xE3o b\xE1sica:
*/remind* Crie um lembrete para si ou para um grupo de pessoas.
*/remind #channel* Crie um lembrete para um canal.
*/remind @user* Crie um lembrete para um utilizador.
*/remind listar* Liste todos os seus lembretes.
*/remind ajuda* Mostra a mensagem de ajuda`, help_command_greeting_message: "Ol\xE1 __name__, Sou o Lembrete Bot \u{1F44B} Aqui est\xE3o algumas dicas r\xE1pidas para come\xE7ar!", help_command_message_reminder_usage: "Se quiser ser lembrado de uma mensagem espec\xEDfica, ent\xE3o passe o cursor sobre a mensagem, clique no \xEDcone de tr\xEAs pontos no canto superior direito da mensagem e depois clique em **Relembra-me sobre isto***", hide_this_message: "Ocultar esta mensagem", in_1_hour: "em 1 hora", in_20_minutes: "em 20 minutos", in_3_hours: "em 3 horas", language: "Idioma", language_en: "Ingl\xEAs", language_pl: "Polaco", language_pt: "Portugu\xEAs", language_de: "Alem\xE3o", language_ru: "Russian", license: "Licen\xE7a Premium", license_description: "Introduza a sua chave de licen\xE7a premium para desbloquear funcionalidades premium. Pode obt\xEA-la em https://addreminders.github.io/license gratuitamente agora mesmo", livechat_message_with_name: "Mensagem de __name__ do Livechat", mark_as_completed: "\u2705 Marcar como Conclu\xEDdo", max_5_reminders_limit_exhausted_message: "Oh n\xE3o! excedeu o seu limite de utiliza\xE7\xE3o de um m\xE1ximo de 5 lembretes activos. Por favor, elimine alguns lembretes activos existentes para criar um novo, ou actualize a sua licen\xE7a para uma utiliza\xE7\xE3o ilimitada.", me: "Eu", message_is_hidden: "Esta mensagem tem sido escondida.", monthly: "Mensal", more_help: "\u{1F517} Mais ajuda", more_options: "Mais op\xE7\xF5es", need_more: "Precisa de mais?", next_week_mon_9am: "Na pr\xF3xima semana, Seg 9am", next_week_at_time: "na pr\xF3xima semana em __time__", no_cancel: "N\xE3o, cancelar", no_completed_reminders: "N\xE3o tem lembretes completos para ver.", no_upcoming_reminders_to_view: 'N\xE3o tem lembretes futuros para ver. Tente criar um utilizando o comando "/remind" slash.', note_your_timezone_is_set_to: "Nota: O seu fuso hor\xE1rio est\xE1 definido para __timezone__.", okay_close: "Muito bem, fechar", okay_i_will_remind_you_about_this_at_time: "Muito bem, vou lembrar-vos disto em __time__.", optional: "opcional", past: "Passado", past_and_incomplete: "Passado e Incompleto", please_complete_this_required_field: "\u26A0\uFE0F Favor preencher este campo obrigat\xF3rio.", please_give_a_valid_time_in_future: "\u26A0\uFE0F Por favor, d\xEA um tempo v\xE1lido que est\xE1 no futuro", premium_feature: "\u26A0\uFE0F Funcionalidade Premium", premium_license_details: "\u26A0\uFE0F Note por favor que esta \xE9 uma caracter\xEDstica Premium. Pode utilizar esta funcionalidade comprando uma licen\xE7a de [aqui](__licenseLink__).", premium_license_recurring_feature_warning: "\u26A0\uFE0F Note que os lembretes recorrentes s\xE3o uma caracter\xEDstica premium. Pode utilizar esta funcionalidade comprando uma licen\xE7a de [aqui](__licenseLink__).", premium_license_warning: "\u26A0\uFE0F Por favor, certifique-se de que tem uma licen\xE7a v\xE1lida", quarterly: "Trimestralmente", recurring_remind_audience_at_time_and_frequency: 'Relembrar __audience__ "__description__" em __time__, __frequency__.', recurring_reminder_in_list_with_description_and_frequency: '"__description__" com vencimento em __time__, __frequency__', recurring_reminders: "Lembretes Recorrentes", remind_audience_at_time: 'Relembrar __audience__ "__description__" em __time__.', remind_audience_completed_at_time: 'Relembrar __audience__ "__description__" (completado em __time__).', remind_audience_was_due_at_time: 'Lembrete para __audience__ "__description__" era devido em __time__.', remind_command_description: 'Criar lembretes. Escreva "/remind ajuda" para mais informa\xE7\xF5es', remind_command_params: "listar, criar, ajuda", remind_me_about_this_msg_action: "\u23F0 Relembra-me sobre isto", remind_me_to: "Lembra-me de...", reminder_already_completed: "Este lembrete j\xE1 foi completado!", reminder_already_snoozed: "Este lembrete j\xE1 foi sonolento!", reminder_completed_for_message: "Ok, eu marquei o lembrete sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ como completo.", reminder_completed_for_message_with_note: 'Ok, marquei o lembrete sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ (com a nota "__note__") como completa.', reminder_completed_with_description: 'Ok, marquei o lembrete "__description__" como completo.', reminder_created: "Lembrete Criado \u2705", reminder_delete_success: "O lembrete foi apagado com sucesso!", reminder_in_list_with_description: '"__description__" devido __time__', reminder_in_list_with_message: "Sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ devido em __dueDate__", reminder_in_list_with_message_with_note: 'Sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ (com a nota "__note__") devido em __dueDate__', reminder_marked_as_completed: "Ok, eu marquei este lembrete como completo.", reminder_message: "Mensagem de Lembrete", reminder_message_with_description: 'Pediu-me para lhe lembrar "__description__".', reminder_message_with_message: "Pediu-me para lhe lembrar [esta mensagem](__messageUrl__) de __userName__ em __roomName__", reminder_message_with_message_with_note: 'Pediu-me para lhe lembrar sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ (com a nota "__note__")', reminder_notification: "Notifica\xE7\xE3o de lembrete", reminder_snoozed: "Este lembrete foi adiado! Lembrar-vos-ei __nextScheduledTime__.", reminder_snoozed_for_message: "Este lembrete foi adiado! Lembrar-vos-ei sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ __nextScheduledTime__.", reminder_snoozed_for_message_with_note: 'Este lembrete foi adiado! Lembrarei sobre [esta mensagem](__messageUrl__) de __userName__ em __roomName__ (com nota "__note__") __nextScheduledTime__.', reminder_snoozed_with_description: 'Este lembrete foi adiado! Lembrar-vos-ei de "__description__" __nextScheduledTime__.', room_reminder_from_user_with_name_with_description: "Lembrete de @__reminderCreatorUsername__: __description__", room_with_name_not_found: "Quarto #__roomName__ n\xE3o encontrado", select_recipient_type: "Seleccione o Tipo de Destinat\xE1rio", set_language: "L\xEDngua do conjunto", set_preferred_language: "Definir L\xEDngua Preferida", show_add_reminder_button: "Mostrar Bot\xE3o Adicionar Lembrete", show_add_reminder_button_description: `Se Activado, o bot\xE3o Adicionar Lembrete ser\xE1 mostrado na caixa de entrada de mensagens, proporcionando uma forma r\xE1pida de adicionar um lembrete.

Nota: Depois de alterar esta configura\xE7\xE3o, ter\xE1 de desactivar e voltar a activar a aplica\xE7\xE3o para ver as altera\xE7\xF5es.`, show_my_reminders_room_action: "\u23F0 Mostrar os meus Lembretes", show_view_all_reminder_button: "Mostrar Ver todos os bot\xF5es de lembretes", show_view_all_reminder_button_description: `Se Activado, o bot\xE3o View All Reminder ser\xE1 mostrado no menu de todas as op\xE7\xF5es da sala.

Nota: Depois de alterar esta configura\xE7\xE3o, ter\xE1 de desactivar e voltar a activar a aplica\xE7\xE3o para ver as altera\xE7\xF5es.`, snooze: "Adiar", snooze_in_1_hour: "adiar por 1 hora", snooze_in_1_week: "adiar por 1 semana", snooze_in_20_minutes: "adiar por 20 minutos", snooze_in_3_hours: "adiar por 3 horas", snooze_next_week_mon_9am: "adiar pr\xF3xima semana, Seg 9am", snooze_tomorrow_at_9am: "adiar por amanh\xE3 \xE0 9am", snooze_tomorrow_at_time: "adiar por amanh\xE3 \xE0 __time__", something_went_wrong: "Algo correu mal", stats_reporting: "Enviar estat\xEDsticas", stats_reporting_description: "Ao enviar as suas estat\xEDsticas, ir\xE1 ajudar-nos a identificar como est\xE1 a utilizar esta aplica\xE7\xE3o, bem como o bom comportamento da aplica\xE7\xE3o, para que possamos melhor\xE1-la ainda mais. N\xE3o se preocupe, pois n\xE3o \xE9 enviada qualquer informa\xE7\xE3o do utilizador e toda a informa\xE7\xE3o que recebemos \xE9 mantida confidencial.", success: "Sucesso!", time: "Hora", tip_on_how_to_list_all_reminders: 'Dica: Pode encontrar uma lista de todos os seus lembretes executando o comando "/remind listar" ou clicando no bot\xE3o "Mostrar os meus lembretes" em qualquer um dos seus pain\xE9is de op\xE7\xF5es de canais.', tomorrow_at_9AM: "amanh\xE3 \xE0 9am", tomorrow_at_time: "amanh\xE3 \xE0 __ time__", triweekly: "Trizenalmente", unknown_room: "Sala Desconhecida", unsupported_language: "L\xEDngua n\xE3o suportada", upcoming_reminders: "Pr\xF3ximos Lembretes", update_my_preference: "Actualizar a minha prefer\xEAncia", upgrade_account: "\u{1F517} Conta de actualiza\xE7\xE3o", upgrade_license: "Licen\xE7a de actualiza\xE7\xE3o", usage_exhausted: "Uso Exausto", user_plural: "Utilizador(es)", user_reminder_from_user_with_name_with_description: '@__reminderCreatorUsername__ pediu-me para lhe lembrar sobre "__description__"', user_reminder_info_message: `Se desejar adicionar v\xE1rios utilizadores, ent\xE3o separ\xE1-los com uma v\xEDrgula.

Dica: Digite /remind @john.doe @jane.doe da caixa de entrada de mensagens para usar a fun\xE7\xE3o de auto-completar.`, user_with_username_not_found: "Utilizador @__username__ n\xE3o encontrado", view_all_reminders: "Ver todos os lembretes", view_completed_reminders: "Ver Lembretes Completos", view_existing_reminders: "Ver Lembretes Existentes", view_reminders: "Ver Lembretes", weekly: "Semanalmente", when: "Quando?", when_do_you_want_to_be_reminded: "Quando quer ser lembrado?", who_to_remind: "Quem Lembrar?", yes_delete_reminders: "Sim, eliminar lembretes", you: "voc\xEA", you_have_no_reminders: "N\xE3o tem lembretes para ver. Tente criar um utilizando o comando de corte `/remind'.", your_preferred_language_has_been_updated_to_language: "A sua l\xEDngua preferida foi actualizada para __language__"
    }
}); var wr = k(ot => {
    "use strict"; Object.defineProperty(ot, "__esModule", { value: !0 }); ot.ru = void 0; ot.ru = {
        "1_hour": "1 \u0447\u0430\u0441", "20_minutes": "20 \u043C\u0438\u043D\u0443\u0442", "3_hours": "3 \u0447\u0430\u0441\u0430", add_a_note: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443", add_reminder_message_box_action: "\u23F0 \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435", annually: "\u0415\u0436\u0435\u0433\u043E\u0434\u043D\u043E", biannually: "\u0420\u0430\u0437 \u0432 2 \u0433\u043E\u0434\u0430", biweekly: "\u0420\u0430\u0437 \u0432 2 \u043D\u0435\u0434\u0435\u043B\u0438", bulk_delete_reminders_confirmation_message: "\u0412\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043B\u0438\u0442\u044C **__total__** __reminderType__ \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0439. \u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B?", cancel: "\u041E\u0442\u043C\u0435\u043D\u0430", channel_plural: "\u041A\u0430\u043D\u0430\u043B(\u044B)", channel_reminder_info_message: `\u0415\u0441\u043B\u0438 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u043A\u0430\u043D\u0430\u043B\u043E\u0432, \u0442\u043E \u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435 \u0438\u0445 \u043F\u0440\u0438 \u043F\u043E\u043C\u043E\u0449\u0438 \u0437\u0430\u043F\u044F\u0442\u043E\u0439.

\u0417\u0430\u043C\u0435\u0447\u0430\u043D\u0438\u0435: \u041C\u044B \u043E\u0442\u043F\u0440\u0430\u0432\u0438\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0432 \u044D\u0442\u0438 \u043A\u0430\u043D\u0430\u043B\u044B \u043D\u0435\u043C\u0435\u0434\u043B\u0435\u043D\u043D\u043E.

\u0421\u043E\u0432\u0435\u0442: \u041D\u0430\u043F\u0438\u0448\u0438\u0442\u0435 /remind #general #random \u0432 \u043F\u043E\u043B\u0435 \u0432\u0432\u043E\u0434\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F, \u0447\u0442\u043E\u0431\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0430\u0432\u0442\u043E\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u0435 \u0438\u043C\u0435\u043D\u0438 \u043A\u0430\u043D\u0430\u043B\u043E\u0432.`, channel_reminder_message: '\u043F\u043E\u0434\u0433\u043E\u0442\u043E\u0432\u043B\u0435\u043D\u043E \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 "__description__" \u0432 \u044D\u0442\u043E\u043C \u043A\u0430\u043D\u0430\u043B\u0435 \u0432 __time__ __frequency__, __timezone__', close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C", completed: "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E", completed_reminder_in_list_with_description: '"__description__" (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E \u0432 __time__)', completed_reminder_in_list_with_message: "\u041E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E \u0432 __time__)", completed_reminder_in_list_with_message_with_note: '\u041E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ (\u0441 \u0437\u0430\u043C\u0435\u0442\u043A\u043E\u0439 "__note__") (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E \u0432 __time__)', connected_message_link: "\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435", contact_us: "\u{1F517} \u0421\u0432\u044F\u0436\u0438\u0442\u0435\u0441\u044C \u0441 \u043D\u0430\u043C\u0438", control_shortcuts: "\u0423\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F\u043C\u0438:", create: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C", create_a_reminder: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435", create_reminder: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435", custom: "\u041D\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043C\u043E\u0435", daily: "\u0415\u0436\u0435\u0434\u043D\u0435\u0432\u043D\u043E", daily_weekdays_only: "\u0415\u0436\u0435\u0434\u043D\u0435\u0432\u043D\u043E (\u0442\u043E\u043B\u044C\u043A\u043E \u0431\u0443\u0434\u043D\u0438)", date: "\u0414\u0430\u0442\u0430", delete: "\u274C \u0423\u0434\u0430\u043B\u0438\u0442\u044C", delete_all_completed_reminders: "\u2620\uFE0F \u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u0441\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u044B\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", delete_all_past_reminders: "\u2620\uFE0F \u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u0441\u0435 \u043F\u0440\u043E\u0448\u0435\u0434\u0448\u0438\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", delete_reminder: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", delete_reminders_success_message: "\u0423\u0441\u043F\u0435\u0448\u043D\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u044B \u0432\u0441\u0435 __remindersType__ \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F!", direct_message_with_participants: "\u041B\u0438\u0447\u043D\u0430\u044F \u0431\u0435\u0441\u0435\u0434\u0430 \u0441 __participants__", do_not_repeat: "\u041D\u0435 \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u0442\u044C", error: "\u041E\u0448\u0438\u0431\u043A\u0430!", error_add_reminder_message_box_action_failed: "\u0427\u0442\u043E-\u0442\u043E \u043F\u043E\u0448\u043B\u043E\u043D\u0435 \u0442\u0430\u043A. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u043F\u043E\u0437\u0436\u0435 \u0438\u043B\u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u043A\u043E\u043C\u0430\u043D\u0434\u0443 /remind \u0434\u043B\u044F \u0442\u043E\u0433\u043E, \u0447\u0442\u043E\u0431\u044B \u0441\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0432\u0440\u0443\u0447\u043D\u0443\u044E.", error_unable_to_find_reminder: "\u0418\u0437\u0432\u0438\u043D\u0438\u0442\u0435, \u043C\u044B \u043D\u0435 \u043C\u043E\u0436\u0435\u043C \u043D\u0430\u0439\u0442\u0438 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435, \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u043E\u043D\u043E \u0431\u044B\u043B\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u043E?", every_2_weeks: "\u043A\u0430\u0436\u0434\u044B\u0435 2 \u043D\u0435\u0434\u0435\u043B\u0438", every_3_weeks: "\u043A\u0430\u0436\u0434\u044B\u0435 3 \u043D\u0435\u0434\u0435\u043B\u0438", every_6_months: "\u043A\u0430\u0436\u0434\u044B\u0435 6 \u043C\u0435\u0441\u044F\u0446\u0435\u0432", every_day: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0434\u0435\u043D\u044C", every_month: "\u043A\u0430\u0436\u0434\u044B\u0439 \u043C\u0435\u0441\u044F\u0446", every_quarter: "\u043A\u0430\u0436\u0434\u044B\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", every_week: "\u043A\u0430\u0436\u0434\u0443\u044E \u043D\u0435\u0434\u0435\u043B\u044E", every_weekday: "\u0432\u0441\u0435 \u0431\u0443\u0434\u043D\u0438", every_year: "\u043A\u0430\u0436\u0434\u044B\u0439 \u0433\u043E\u0434", frequency: "\u0427\u0430\u0441\u0442\u043E\u0442\u0430", help_command_basic_usage: `\u041F\u0440\u043E\u0441\u0442\u043E\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435:
*/remind* \u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0441\u0435\u0431\u0435 \u0438\u043B\u0438 \u0433\u0440\u0443\u043F\u043F\u0435 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439.
*/remind #channel* \u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0434\u043B\u044F \u0447\u0430\u0442\u0430l.
*/remind @user* \u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0434\u043B\u044F \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F.
*/remind list* \u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0441\u043F\u0438\u0441\u043E\u043A \u0441\u0432\u043E\u0438\u0445 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0439.
*/remind help* \u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0441\u043F\u0440\u0430\u0432\u043A\u0443 \u043F\u043E \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044E \u0438 \u0434\u043E\u0441\u0442\u0443\u043F \u043A \u043A\u043D\u043E\u043F\u043A\u0430\u043C \u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F\u043C\u0438`, help_command_greeting_message: "\u041F\u0440\u0438\u0432\u0435\u0442 __name__, \u042F \u0411\u043E\u0442 \u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u0442\u0435\u043B\u044C \u{1F44B} \u0412\u043E\u0442 \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u043E\u0432\u0435\u0442\u043E\u0432, \u0447\u0442\u043E\u0431\u044B \u043D\u0430\u0447\u0430\u0442\u044C!", help_command_message_reminder_usage: "\u0415\u0441\u043B\u0438 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0438\u043D\u0435 \u043E \u043A\u0430\u043A\u043E\u043C-\u0442\u043E \u043A\u043E\u043D\u043A\u0440\u0435\u0442\u043D\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438, \u0442\u043E \u043D\u0430\u0432\u0435\u0434\u0438\u0442\u0435 \u043C\u044B\u0448\u043A\u0443 \u043D\u0430 \u044D\u0442\u043E \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435, \u0449\u0435\u043B\u043A\u043D\u0438\u0442\u0435 \u043D\u0430 \u0438\u043A\u043E\u043D\u043A\u0443 \u0441 \u0442\u0440\u0435\u043C\u044F \u0442\u043E\u0447\u043A\u0430\u043C\u0438 \u0432 \u0432\u0435\u0440\u0445\u043D\u0435\u043C \u043F\u0440\u0430\u0432\u043E\u043C \u0443\u0433\u043B\u0443 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0438 \u0437\u0430\u0442\u0435\u043C \u0449\u0435\u043B\u043A\u043D\u0438\u0442\u0435 \u043D\u0430 **\u041D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C \u043C\u043D\u0435 \u043E\u0431 \u044D\u0442\u043E\u043C**", hide_this_message: "\u0421\u043A\u0440\u044B\u0442\u044C \u044D\u0442\u043E \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435", in_1_hour: "\u0447\u0435\u0440\u0435\u0437 1 \u0447\u0430\u0441", in_20_minutes: "\u0447\u0435\u0440\u0435\u0437 20 \u043C\u0438\u043D\u0443\u0442", in_3_hours: "\u0447\u0435\u0440\u0435\u0437 3 \u0447\u0430\u0441\u0430", language: "\u042F\u0437\u044B\u043A", language_en: "English", language_pl: "Polish", language_pt: "Portuguese", language_de: "German", language_ru: "Russian", license: "\u041F\u0440\u0435\u043C\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u043B\u0438\u0446\u0435\u043D\u0437\u0438\u044F", license_description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043A\u043B\u044E\u0447 \u0432\u0430\u0448\u0435\u0439 \u043F\u0440\u0438\u043C\u0438\u0430\u043B\u044C\u043D\u043E\u0439 \u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0438, \u0447\u0442\u043E\u0431\u044B \u0440\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u0440\u0435\u043C\u0438\u0430\u043B\u044C\u043D\u044B\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u0438. \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u0435\u0435 \u0441 https://addreminders.github.io/license \u0431\u0435\u0441\u043F\u043B\u0430\u0442\u043D\u043E \u043D\u0430 \u0434\u0430\u043D\u043D\u044B\u0439 \u043C\u043E\u043C\u0435\u043D\u0442", livechat_message_with_name: "Livechat \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u043E\u0442 __name__", mark_as_completed: "\u2705 \u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0435", max_5_reminders_limit_exhausted_message: "\u041E, \u043D\u0435\u0442! \u0412\u044B \u0438\u0437\u0440\u0430\u0441\u0445\u043E\u0434\u043E\u0432\u0430\u043B\u0438 \u0432\u0430\u0448 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u043B\u0438\u043C\u0438\u0442 \u0432 5 \u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0445 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0439. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0443\u0434\u0430\u043B\u0438\u0442\u0435 \u043D\u0435\u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F, \u0447\u0442\u043E\u0431\u044B \u0441\u043E\u0437\u0434\u0430\u043D\u043E \u043D\u043E\u0432\u043E\u0435, \u0438\u043B\u0438 \u0443\u043B\u0443\u0447\u0448\u0438\u0442\u0435 \u0432\u0430\u0448\u0443 \u043B\u0438\u0446\u0435\u043D\u0437\u0438\u044E \u0434\u043B\u044F \u0431\u0435\u0437\u043B\u0438\u043C\u0438\u0442\u043D\u043E\u0433\u043E \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F.", me: "\u042F", message_is_hidden: "\u042D\u0442\u043E \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u0441\u043A\u0440\u044B\u0442\u043E.", monthly: "\u0415\u0436\u0435\u043C\u0435\u0441\u044F\u0447\u043D\u043E", more_help: "\u{1F517} \u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0430\u044F \u043F\u043E\u043C\u043E\u0449\u044C", more_options: "\u0411\u043E\u043B\u044C\u0448\u0435 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A", need_more: "\u041D\u0443\u0436\u043D\u043E \u0431\u043E\u043B\u044C\u0448\u0435?", next_week_mon_9am: "\u041D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439 \u043D\u0435\u0434\u0435\u043B\u0435, \u043F\u043D 9am", next_week_at_time: "\u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u0449\u0435\u0439 \u043D\u0435\u0434\u0435\u043B\u0435 \u0432 __time__", no_cancel: "\u041D\u0435\u0442, \u043E\u0442\u043C\u0435\u043D\u0430", no_completed_reminders: "\u0423 \u0432\u0430\u0441 \u043D\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u044B\u0445 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0439 \u0434\u043B\u044F \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430.", no_upcoming_reminders_to_view: "\u0423 \u0432\u0430\u0441 \u043D\u0435\u0442 \u043F\u0440\u0435\u0434\u0441\u0442\u043E\u044F\u0449\u0438\u0445 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0439 \u0434\u043B\u044F \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430. \u041F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u043F\u0440\u0438 \u043F\u043E\u043C\u043E\u0449\u0438 \u043A\u043E\u043C\u0430\u043D\u0434\u044B `/remind` ", note_your_timezone_is_set_to: "\u0417\u0430\u043C\u0435\u0442\u043A\u0430: \u0412\u0430\u0448 \u0447\u0430\u0441\u043E\u0432\u043E\u0439 \u043F\u043E\u044F\u0441 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D \u043D\u0430 __timezone__.", okay_close: "\u043E\u043A, \u0437\u0430\u043A\u0440\u044B\u0442\u044C", okay_i_will_remind_you_about_this_at_time: "Ok, \u042F \u043D\u0430\u043F\u043E\u043C\u043D\u044E \u0432\u0430\u043C \u043E\u0431 \u044D\u0442\u043E\u043C \u0432 __time__.", optional: "\u043E\u043F\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u043E", past: "\u041F\u0440\u043E\u0448\u0435\u0434\u0448\u0438\u0435", past_and_incomplete: "\u041F\u0440\u043E\u0448\u0435\u0434\u0448\u0438\u0435 \u0438 \u043D\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u044B\u0435", please_complete_this_required_field: "\u26A0\uFE0F \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0437\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u0435 \u0432\u0441\u0435 \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u043F\u043E\u043B\u044F.", please_give_a_valid_time_in_future: "\u26A0\uFE0F \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u044C\u0442\u0435 \u0432\u0430\u043B\u0438\u0434\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043E", premium_feature: "\u26A0\uFE0F \u041F\u0440\u0435\u043C\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u044F", premium_license_details: "\u26A0\uFE0F \u0423\u0447\u0442\u0438\u0442\u0435, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0447\u0442\u043E \u044D\u0442\u043E \u043F\u0440\u0435\u043C\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u044F. \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0434\u0430\u043D\u043D\u0443\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u043A\u0443\u043F\u0438\u0432 \u043B\u0438\u0446\u0435\u043D\u0437\u0438\u044E [\u0437\u0434\u0435\u0441\u044C](__licenseLink__).", premium_license_recurring_feature_warning: "\u26A0\uFE0F \u0423\u0447\u0442\u0438\u0442\u0435, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0447\u0442\u043E \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0449\u0438\u0435\u0441\u044F \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F \u044D\u0442\u043E \u043F\u0440\u0435\u043C\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u044F. \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0434\u0430\u043D\u043D\u0443\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u043A\u0443\u043F\u0438\u0432 \u043B\u0438\u0446\u0435\u043D\u0437\u0438\u044E [\u0437\u0434\u0435\u0441\u044C](__licenseLink__).", premium_license_warning: "\u26A0\uFE0F \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C, \u0447\u0442\u043E \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044C \u0432\u0430\u043B\u0438\u0434\u0430\u043D\u0430\u044F \u043B\u0438\u0446\u0435\u043D\u0437\u0438\u044F", quarterly: "\u0415\u0436\u0435\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u044C\u043D\u043E", recurring_remind_audience_at_time_and_frequency: '\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u0442\u044C __audience__ "__description__" \u0432 __time__, __frequency__.', recurring_reminder_in_list_with_description_and_frequency: '"__description__" \u0432 __time__, __frequency__', recurring_reminders: "\u041F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0449\u0438\u0435\u0441\u044F \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", remind_audience_at_time: '\u041D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C __audience__ "__description__" \u0432 __time__.', remind_audience_completed_at_time: '\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 __audience__ "__description__" (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E \u0432 __time__).', remind_audience_was_due_at_time: '\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0434\u043B\u044F __audience__ "__description__" \u0431\u044B\u043B\u043E \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u043E \u0432 __time__.', remind_command_description: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435. \u041D\u0430\u043F\u0438\u0448\u0438\u0442\u0435 `/remind help` \u0434\u043B\u044F \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0439 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438", remind_command_params: "list, create, help", remind_me_about_this_msg_action: "\u23F0 \u041D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C \u043C\u043D\u0435 \u043E\u0431 \u044D\u0442\u043E\u043C", remind_me_to: "\u041D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C \u043C\u043D\u0435 \u043A...", reminder_already_completed: "\u0414\u0430\u043D\u043D\u043E\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0443\u0436\u0435 \u0431\u044B\u043B\u043E \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E!", reminder_already_snoozed: "\u0414\u0430\u043D\u043D\u043E\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0443\u0436\u0435 \u0431\u044B\u043B\u043E \u043E\u0442\u043B\u043E\u0436\u0435\u043D\u043E!", reminder_completed_for_message: "Ok, \u042F \u043F\u043E\u043C\u0435\u0442\u0438\u043B \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u043E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ \u043A\u0430\u043A \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0435.", reminder_completed_for_message_with_note: 'Ok, \u042F \u043F\u043E\u043C\u0435\u0442\u0438\u043B \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u043E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ (\u0441 \u0437\u0430\u043C\u0435\u0442\u043A\u043E\u0439 "__note__") \u043A\u0430\u043A \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0435.', reminder_completed_with_description: 'Ok, \u042F \u043F\u043E\u043C\u0435\u0442\u0438\u043B \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 "__description__" \u043A\u0430\u043A \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0435.', reminder_created: "\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0441\u043E\u0437\u0434\u0430\u043D\u043E \u2705", reminder_delete_success: "\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u043E \u0443\u0441\u043F\u0435\u0448\u043D\u043E!", reminder_in_list_with_description: '"__description__" \u043A __time__', reminder_in_list_with_message: "\u041E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ \u043A __dueDate__", reminder_in_list_with_message_with_note: '\u041E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ (\u0441 \u0437\u0430\u043C\u0435\u0442\u043A\u043E\u0439 "__note__") \u043A __dueDate__', reminder_marked_as_completed: "Ok, \u042F \u043F\u043E\u043C\u0435\u0442\u0438\u043B \u0434\u0430\u043D\u043D\u043E\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u043A\u0430\u043A \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0435.", reminder_message: "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", reminder_message_with_description: '\u0412\u044B \u043F\u0440\u043E\u0441\u0438\u043B\u0438 \u043C\u0435\u043D\u044F \u043D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C \u0432\u0430\u043C "__description__".', reminder_message_with_message: "\u0412\u044B \u043F\u0440\u043E\u0441\u0438\u043B\u0438 \u043C\u0435\u043D\u044F \u043D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C \u043E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__", reminder_message_with_message_with_note: '\u0412\u044B \u043F\u0440\u043E\u0441\u0438\u043B\u0438 \u043C\u0435\u043D\u044F \u043D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C \u043E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ (\u0441 \u0437\u0430\u043C\u0435\u0442\u043A\u043E\u0439 "__note__")', reminder_notification: "\u0423\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0435 \u043E \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0438", reminder_snoozed: "\u042D\u0442\u043E \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u043E\u0442\u043B\u043E\u0436\u0435\u043D\u043E! \u042F \u043D\u0430\u043F\u043E\u043C\u043D\u044E \u0432\u0430\u043C __nextScheduledTime__.", reminder_snoozed_for_message: "\u042D\u0442\u043E \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u043E\u0442\u043B\u043E\u0436\u0435\u043D\u043E! \u042F \u043D\u0430\u043F\u043E\u043C\u043D\u044E \u0432\u0430\u043C \u043E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ __nextScheduledTime__.", reminder_snoozed_for_message_with_note: '\u042D\u0442\u043E \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u043E\u0442\u043B\u043E\u0436\u0435\u043D\u043E! \u042F \u043D\u0430\u043F\u043E\u043C\u043D\u044E \u0432\u0430\u043C \u043E\u0431 [\u044D\u0442\u043E\u043C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0438](__messageUrl__) \u043E\u0442 __userName__ \u0432 __roomName__ (\u0441 \u0437\u0430\u043C\u0435\u0442\u043A\u043E\u0439 "__note__") __nextScheduledTime__.', reminder_snoozed_with_description: '\u042D\u0442\u043E \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u043E\u0442\u043B\u043E\u0436\u0435\u043D\u043E! \u042F \u043D\u0430\u043F\u043E\u043C\u043D\u044E \u043E "__description__" __nextScheduledTime__.', room_reminder_from_user_with_name_with_description: "\u041D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u043E\u0442 @__reminderCreatorUsername__: __description__", room_with_name_not_found: "\u0427\u0430\u0442 #__roomName__ \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D", select_recipient_type: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0442\u0438\u043F \u043F\u043E\u043B\u0443\u0447\u0430\u0442\u0435\u043B\u044F", set_language: "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u044F\u0437\u044B\u043A", set_preferred_language: "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043F\u0440\u0435\u0434\u043F\u043E\u0447\u0435\u0442\u0430\u0435\u043C\u044B\u0439 \u044F\u0437\u044B\u043A", show_add_reminder_button: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043A\u043D\u043E\u043F\u043A\u0443 \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435", show_add_reminder_button_description: `\u0415\u0441\u043B\u0438 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u043E, \u0442\u043E \u043A\u043D\u043E\u043F\u043A\u0430 \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043F\u043E\u043A\u0430\u0437\u0430\u043D\u0430 \u0432 \u043F\u043E\u043B\u0435 \u0432\u0432\u043E\u0434\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u044E \u0431\u044B\u0441\u0442\u0440\u044B\u0439 \u0441\u043F\u043E\u0441\u043E\u0431 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F.

\u0417\u0430\u043C\u0435\u0442\u043A\u0430: \u041F\u043E\u0441\u043B\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u0434\u0430\u043D\u043D\u043E\u0439 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438, \u0432\u0430\u043C \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0438 \u0437\u0430\u0442\u0435\u043C \u0437\u0430\u043D\u043E\u0432\u043E \u0432\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0434\u0430\u043D\u043D\u043E\u0435 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u0434\u043B\u044F \u0442\u043E\u0433\u043E, \u0447\u0442\u043E\u0431\u044B \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u043F\u0440\u0438\u043C\u0435\u043D\u0438\u043B\u0430\u0441\u044C.`, show_my_reminders_room_action: "\u23F0 \u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u041C\u043E\u0438 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", show_view_all_reminder_button: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043A\u043D\u043E\u043F\u043A\u0443 \u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0438\u043D\u0438\u044F", show_view_all_reminder_button_description: `\u0415\u0441\u043B\u0438 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u043E, \u0442\u043E \u043A\u043D\u043E\u043F\u043A\u0430 \u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F \u0431\u0443\u0434\u0435\u0442 \u043F\u043E\u043A\u0430\u0437\u0430\u043D\u0430 \u0432 \u043C\u0435\u043D\u044E \u043E\u043F\u0446\u0438\u0439 \u0432\u0441\u0435\u0445 \u0447\u0430\u0442\u043E\u0432.

\u0417\u0430\u043C\u0435\u0442\u043A\u0430: \u041F\u043E\u0441\u043B\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u0434\u0430\u043D\u043D\u043E\u0439 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438, \u0432\u0430\u043C \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0438 \u0437\u0430\u0442\u0435\u043C \u0437\u0430\u043D\u043E\u0432\u043E \u0432\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0434\u0430\u043D\u043D\u043E\u0435 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u0434\u043B\u044F \u0442\u043E\u0433\u043E, \u0447\u0442\u043E\u0431\u044B \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u043F\u0440\u0438\u043C\u0435\u043D\u0438\u043B\u0430\u0441\u044C.`, snooze: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C", snooze_in_1_hour: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C \u043D\u0430 1 \u0447\u0430\u0441", snooze_in_1_week: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C \u043D\u0430 1 \u043D\u0435\u0434\u0435\u043B\u044E", snooze_in_20_minutes: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C \u043D\u0430 20 \u043C\u0438\u043D\u0443\u0442", snooze_in_3_hours: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C \u043D\u0430 3 \u0447\u0430\u0441\u0430", snooze_next_week_mon_9am: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C \u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439 \u043D\u0435\u0434\u0435\u043B\u0435, \u043F\u043D 9am", snooze_tomorrow_at_9am: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C \u0434\u043E \u0437\u0430\u0432\u0442\u0440\u0430 \u0434\u043E 9am", snooze_tomorrow_at_time: "\u041E\u0442\u043B\u043E\u0436\u0438\u0442\u044C \u0434\u043E \u0437\u0430\u0432\u0442\u0440\u0430 \u0434\u043E __time__", something_went_wrong: "\u0427\u0442\u043E-\u0442\u043E \u043F\u043E\u0448\u043B\u043E \u043D\u0435 \u0442\u0430\u043A", stats_reporting: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043A\u0443", stats_reporting_description: "\u041E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u044F \u0432\u0430\u0448\u0443 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043A\u0443, \u0432\u044B \u043F\u043E\u043C\u043E\u0433\u0430\u0435\u0442\u0435 \u043D\u0430\u043C \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0442\u043E, \u043A\u0430\u043A \u0432\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0435 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u043D\u0430\u0440\u044F\u0434\u0443 \u0441 \u0442\u0435\u043C \u043A\u0430\u043A \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435, \u0447\u0442\u043E\u0431\u044B \u043C\u044B \u043C\u043E\u0433\u043B\u0438 \u0435\u043C\u0443 \u0443\u043B\u0443\u0447\u0448\u0438\u0442\u044C. \u041D\u0435 \u0431\u0435\u0441\u043F\u043E\u043A\u043E\u0439\u0442\u0435\u0441\u044C, \u043D\u0438\u043A\u0430\u043A\u043E\u0439 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u043E\u0439 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438 \u043D\u0435 \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u0438 \u0432\u0441\u044F \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F, \u043A\u043E\u0442\u043E\u0440\u0443\u044E \u043C\u044B \u043F\u043E\u043B\u0443\u0447\u0430\u0435 \u0445\u0440\u0430\u043D\u0438\u0442\u0441\u044F \u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E.", success: "\u0423\u0441\u043F\u0435\u0448\u043D\u043E!", time: "\u0412\u0440\u0435\u043C\u044F", tip_on_how_to_list_all_reminders: '\u0421\u043E\u0432\u0435\u0442: \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u0441\u043F\u0438\u0441\u043E\u043A \u0432\u0441\u0435\u0445 \u0432\u0430\u0448\u0438\u0445 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0439 \u043B\u0438\u0431\u043E \u043F\u0440\u0438 \u043F\u043E\u043C\u043E\u0449\u0438 \u043A\u043E\u043C\u0430\u043D\u0434\u044B `/remind list` \u0438\u043B\u0438 \u0449\u0435\u043B\u0447\u043A\u043E\u043C \u043F\u043E \u043A\u043D\u043E\u043F\u043A\u0435 "Show My Reminders" \u0432 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445 \u043B\u044E\u0431\u043E\u0433\u043E \u0447\u0430\u0442\u0430.', tomorrow_at_9AM: "\u0437\u0430\u0432\u0442\u0440\u0430 \u0432 9am", tomorrow_at_time: "\u0437\u0430\u0432\u0442\u0440\u0430 \u0432 __time__", triweekly: "\u0420\u0430\u0437 \u0432 3 \u043D\u0435\u0434\u0435\u043B\u0438", unknown_room: "\u041D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043D\u044B\u0439 \u0447\u0430\u0442", unsupported_language: "\u041D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043C\u044B\u0439 \u044F\u0437\u044B\u043A", upcoming_reminders: "\u041F\u0440\u0435\u0434\u0441\u0442\u043E\u044F\u0449\u0438\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", update_my_preference: "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C \u043C\u043E\u0438 \u043F\u0440\u0435\u0434\u043F\u043E\u0447\u0442\u0435\u043D\u0438\u044F", upgrade_account: "\u{1F517} \u0423\u043B\u0443\u0447\u0448\u0435\u043D\u0438\u0435 \u0443\u0447\u0435\u0442\u043D\u043E\u0439 \u0437\u0430\u043F\u0438\u0441\u0438", upgrade_license: "\u0423\u043B\u0443\u0447\u0448\u0435\u043D\u0438\u0435 \u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0438", usage_exhausted: "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435 \u0438\u0437\u0440\u0430\u0441\u0445\u043E\u0434\u043E\u0432\u0430\u043D\u043E", user_plural: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C(\u0438)", user_reminder_from_user_with_name_with_description: '@__reminderCreatorUsername__ \u043F\u043E\u043F\u0440\u043E\u0441\u0438\u043B \u043C\u0435\u043D\u044F \u043D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C \u0432\u0430\u043C \u043E "__description__"', user_reminder_info_message: `\u0415\u0441\u043B\u0438 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435 \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439, \u0442\u043E \u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435 \u0438\u0437 \u0437\u0430\u043F\u044F\u0442\u043E\u0439.

\u0421\u043E\u0432\u0435\u0442: \u041D\u0430\u043F\u0438\u0448\u0438\u0442\u0435 /remind @john.doe @jane.doe \u0432 \u0441\u0442\u0440\u043E\u043A\u0435 \u0434\u043B\u044F \u0432\u0432\u043E\u0434\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439, \u0447\u0442\u043E\u0431\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u0430\u0432\u0442\u043E\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u044F.`, user_with_username_not_found: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C @__username__ \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D", view_all_reminders: "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", view_completed_reminders: "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u044B\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", view_existing_reminders: "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0435 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", view_reminders: "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", weekly: "\u0415\u0436\u0435\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u043E", when: "\u041A\u043E\u0433\u0434\u0430?", when_do_you_want_to_be_reminded: "\u041A\u043E\u0433\u0434\u0430 \u0432\u044B \u0445\u043E\u0442\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u0432\u0430\u043C \u043D\u0430\u043F\u043E\u043C\u043D\u0438\u043B\u0438?", who_to_remind: "\u041A\u043E\u043C\u0443 \u043D\u0430\u043F\u043E\u043C\u043D\u0438\u0442\u044C?", yes_delete_reminders: "\u0414\u0430, \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u044F", you: "\u0432\u0430\u0441", you_have_no_reminders: "\u0423 \u0432\u0430\u0441 \u043D\u0435\u0442 \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0439 \u0434\u043B\u044F \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430. \u041F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043E\u0437\u0434\u0430\u0442\u044C \u043D\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u043D\u0438\u0435 \u043F\u0440\u0438 \u043F\u043E\u043C\u043E\u0449\u0438 \u043A\u043E\u043C\u0430\u043D\u0434\u044B `/remind` ", your_preferred_language_has_been_updated_to_language: "\u0412\u0430\u0448 \u043F\u0440\u0435\u0434\u043F\u043E\u0447\u0442\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u044F\u0437\u044B\u043A \u0438\u0437\u043C\u0435\u043D\u0435\u043D \u043D\u0430 __language__"
    }
}); var Tr = k(st => {
    "use strict"; Object.defineProperty(st, "__esModule", { value: !0 }); st.pl = void 0; st.pl = {
        "1_hour": "1 godzina", "20_minutes": "20 minut", "3_hours": "3 godziny", add_a_note: "Dodaj notatk\u0119", add_reminder_message_box_action: "\u23F0 Dodaj przypomnienie", annually: "Rocznie", biannually: "Co dwa lata", biweekly: "Dwutygodniowy", bulk_delete_reminders_confirmation_message: "Zaraz usuniesz **__total__** __reminderType__ Przypomnienie. Jeste\u015B pewny?", cancel: "Anuluj", channel_plural: "Kana\u0142y", channel_reminder_info_message: `Je\u015Bli chcesz doda\u0107 wiele kana\u0142\xF3w, oddziel je przecinkiem.

Uwaga: natychmiast wy\u015Blemy wiadomo\u015B\u0107 do tych kana\u0142\xF3w, informuj\u0105c ich, \u017Ce to si\u0119 zbli\u017Ca.

WSKAZ\xD3WKA: Wpisz /remind #general #Random z pola wej\u015Bciowego komunikatu, aby u\u017Cy\u0107 funkcji automatycznego kompletnego.`, channel_reminder_message: 'Skonfiguruj przypomnienie "__description__" w tym kanale na __time__ __frequency__, __timeZone__', close: "Zamknij", completed: "Zako\u0144czony", completed_reminder_in_list_with_description: '"__description__" (zako\u0144czony w __time__)', completed_reminder_in_list_with_message: "O [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ (uko\u0144czony w __time__)", completed_reminder_in_list_with_message_with_note: 'O [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ (z notatk\u0105 "__note__") (uko\u0144czony w __time__)', connected_message_link: "Po\u0142\u0105czony link wiadomo\u015Bci", contact_us: "\u{1F517} Skontaktuj si\u0119 z nami", control_shortcuts: "Skr\xF3ty kontrolne:", create: "Stw\xF3rz", create_a_reminder: "Utw\xF3rz przypomnienie", create_reminder: "Utw\xF3rz przypomnienie", custom: "W\u0142asny", daily: "Codzienny", daily_weekdays_only: "Codziennie (tylko w dni powszednie)", date: "Data", delete: "\u274C Usu\u0144", delete_all_completed_reminders: "\u2620\uFE0F Usu\u0144 wszystkie zako\u0144czone przypomnienia", delete_all_past_reminders: "\u2620\uFE0F Usu\u0144 wszystkie wcze\u015Bniejsze przypomnienia", delete_reminder: "Usu\u0144 przypomnienia", delete_reminders_success_message: "Z powodzeniem usun\u0119\u0142em wszystkie przypomnienia __remindersType__!", direct_message_with_participants: "Bezpo\u015Bredni komunikat z __participants__", do_not_repeat: "Nie powtarzaj", error: "B\u0142\u0105d!", error_add_reminder_message_box_action_failed: "Co\u015B posz\u0142o nie tak. Spr\xF3buj ponownie p\xF3\u017Aniej lub u\u017Cyj polecenia /remind, aby r\u0119cznie utworzy\u0107 przypomnienie.", error_unable_to_find_reminder: "Przepraszam, nie byli\u015Bmy w stanie znale\u017A\u0107 przypomnienia, by\u0107 mo\u017Ce zosta\u0142o usuni\u0119te?", every_2_weeks: "co 2 tygodnie", every_3_weeks: "co 3 tygodnie", every_6_months: "co 6 miesi\u0119cy", every_day: "codzienny", every_month: "ka\u017Cdego miesi\u0105ca", every_quarter: "co kwarta\u0142", every_week: "co tydzie\u0144", every_weekday: "ka\u017Cdego dnia roboczego", every_year: "ka\u017Cdego roku", frequency: "Cz\u0119stotliwo\u015B\u0107", help_command_basic_usage: `Podstawowe u\u017Cycie:
 */remind* Stw\xF3rz przypomnienie dla siebie lub grupy ludzi.
*/remind #kana\u0142* Utw\xF3rz przypomnienie dla kana\u0142u.
*/remind @u\u017Cytkownik* Utw\xF3rz przypomnienie dla u\u017Cytkownika.
*/remind lista* Wymie\u0144 wszystkie swoje przypomnienia.
*/remind pomoc* pokazuje wiadomo\u015B\u0107 o pomocy`, help_command_greeting_message: "Cze\u015B\u0107 __name__, Przypominam bot \u{1F44B} Oto kilka szybkich wskaz\xF3wek, aby zacz\u0105\u0107!", help_command_message_reminder_usage: "Je\u015Bli chcesz przypomnie\u0107 sobie o konkretnej wiadomo\u015Bci, a nast\u0119pnie unosi\u0107 si\u0119 nad komunikatem, kliknij ikon\u0119 trzech kropek w prawym g\xF3rnym rogu wiadomo\u015Bci, a nast\u0119pnie kliknij ** Przypomnij mi o tym **", hide_this_message: "Ukryj t\u0119 wiadomo\u015B\u0107", in_1_hour: "w 1 godzin\u0119", in_20_minutes: "w 20 minut", in_3_hours: "za 3 godziny", language: "J\u0119zyk", language_en: "Angielski", language_pl: "Polski", language_pt: "Portugalski", language_de: "Niemiecki", language_ru: "Rosyjski", license: "Licencja premium", license_description: "Wprowad\u017A sw\xF3j klucz licencyjny premium w celu odblokowania funkcji premium.Mo\u017Cesz go uzyska\u0107 z https://addreminders.github.io/license za darmo", livechat_message_with_name: "Wiadomo\u015B\u0107 LiveChat od __name__", mark_as_completed: "\u2705 Oznacz jako zako\u0144czony", max_5_reminders_limit_exhausted_message: "O nie! Przekroczy\u0142e\u015B limit u\u017Cytkowania maksymalnie 5 aktywnych przypomnie\u0144.Usu\u0144 niekt\xF3re istniej\u0105ce aktywne przypomnienia o utworzeniu nowego lub zaktualizuj licencj\u0119 do nieograniczonego u\u017Cytkowania.", me: "Ja", message_is_hidden: "Ta wiadomo\u015B\u0107 zosta\u0142a ukryta.", monthly: "Miesi\u0119czny", more_help: "\u{1F517} Wi\u0119cej pomocy", more_options: "Wi\u0119cej opcji", need_more: "Potrzeba wi\u0119cej?", next_week_mon_9am: "Nast\u0119pny Tydzie\u0144, Poniedzia\u0142ek 9:00", next_week_at_time: "W przysz\u0142ym tygodniu o __time__", no_cancel: "Nie, anuluj", no_completed_reminders: "Nie masz zako\u0144czonych przypomnie\u0144 do obejrzenia.", no_upcoming_reminders_to_view: "Nie masz nadchodz\u0105cych przypomnie\u0144 do obejrzenia.Spr\xF3buj utworzy\u0107 jednego przy u\u017Cyciu polecenia `/remind`.", note_your_timezone_is_set_to: "Uwaga: Twoja strefa czasowa jest ustawiona na __timezone__.", okay_close: "OK, zamknij", okay_i_will_remind_you_about_this_at_time: "Okej, przypomn\u0119 ci o tym __time__.", optional: "opcjonalny", past: "Po", past_and_incomplete: "Przesz\u0142o\u015B\u0107 i niekompletna", please_complete_this_required_field: "\u26A0\uFE0F Wype\u0142nij to wymagane pole.", please_give_a_valid_time_in_future: "\u26A0\uFE0F Prosz\u0119 poda\u0107 wa\u017Cny czas, kt\xF3ry jest w przysz\u0142o\u015Bci", premium_feature: "\u26A0\uFE0F Funkcja premium", premium_license_details: "\u26A0\uFE0F Pami\u0119taj, \u017Ce jest to funkcja premium.Mo\u017Cesz u\u017Cy\u0107 tej funkcji, kupuj\u0105c licencj\u0119 z [tutaj](__licenseLink__).", premium_license_recurring_feature_warning: "\u26A0\uFE0F Pami\u0119taj, \u017Ce powtarzaj\u0105ce si\u0119 przypomnienia s\u0105 cech\u0105 premium.Mo\u017Cesz u\u017Cy\u0107 tej funkcji, kupuj\u0105c licencj\u0119 z [tutaj](__licenseLink__).", premium_license_warning: "\u26A0\uFE0F Upewnij si\u0119, \u017Ce masz wa\u017Cn\u0105 licencj\u0119", quarterly: "Kwartalny", recurring_remind_audience_at_time_and_frequency: 'Przypomnij __audience__ "__description__" w __time__, __frequency__.', recurring_reminder_in_list_with_description_and_frequency: '"__description__" o __time__, __frequency__', recurring_reminders: "Powtarzaj\u0105ce si\u0119 przypomnienia", remind_audience_at_time: 'Przypomnij __audience__ "__description__" na __time__.', remind_audience_completed_at_time: 'Przypomnij __audience__ "__description__" (uko\u0144czony w __time__).', remind_audience_was_due_at_time: 'Przypomnienie dla __audience__ "__description__" by\u0142o nale\u017Cne w __time__.', remind_command_description: "Utw\xF3rz przypomnienia.Wpisz `/remind pomoc', aby uzyska\u0107 wi\u0119cej informacji", remind_command_params: "lista, utw\xF3rz, pomoc", remind_me_about_this_msg_action: "\u23F0 Przypomnij mi o tym", remind_me_to: "Przypomnij mi...", reminder_already_completed: "To przypomnienie zosta\u0142o ju\u017C zako\u0144czone!", reminder_already_snoozed: "To przypomnienie zosta\u0142o ju\u017C drzemki!", reminder_completed_for_message: "OK, zaznaczy\u0142em przypomnienie o [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ jako kompletne.", reminder_completed_for_message_with_note: 'OK, oznaczy\u0142em przypomnienie o [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ (z notatk\u0105 "__note__") jako kompletne.', reminder_completed_with_description: 'OK, oznaczy\u0142em przypomnienie "__description__" po zako\u0144czeniu.', reminder_created: "Przypomnienie stworzone \u2705", reminder_delete_success: "Przypomnienie zosta\u0142o pomy\u015Blnie usuni\u0119te!", reminder_in_list_with_description: '"__description__" z powodu __time__', reminder_in_list_with_message: "O [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ nale\u017Cnych __dueDate__", reminder_in_list_with_message_with_note: 'O [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ (z notatk\u0105 "__note__") na __dueDate__', reminder_marked_as_completed: "OK, oznaczy\u0142em to przypomnienie jako zako\u0144czone.", reminder_message: "Wiadomo\u015B\u0107 przypomnienia", reminder_message_with_description: 'Poprosi\u0142e\u015B mnie, \u017Cebym przypomnia\u0142 "__description__".', reminder_message_with_message: "Poprosi\u0142e\u015B mnie, abym przypomnia\u0142 o [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__", reminder_message_with_message_with_note: 'Poprosi\u0142e\u015B mnie, \u017Cebym przypomnia\u0142 o [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ (z notatk\u0105 "__note__")', reminder_notification: "Powiadomienie o przypomnieniu", reminder_snoozed: "To przypomnienie zosta\u0142o drzemki!Przypomn\u0119 ci __nextScheduledTime__.", reminder_snoozed_for_message: "To przypomnienie zosta\u0142o drzemki!Przypomn\u0119 ci o [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ __nextScheduledTime__.", reminder_snoozed_for_message_with_note: 'To przypomnienie zosta\u0142o drzemki!Przypomn\u0119 ci o [tej wiadomo\u015Bci](__messageUrl__) z __userName__ w __roomName__ (z notatk\u0105 "__note__") __nextScheduledTime__.', reminder_snoozed_with_description: 'To przypomnienie zosta\u0142o drzemki!Przypomn\u0119 ci "__description__" __nextScheduledTime__.', room_reminder_from_user_with_name_with_description: "Przypomnienie z @__reminderCreatorUsername__: __description__", room_with_name_not_found: "Pok\xF3j #__roomName__ nie znaleziono", select_recipient_type: "Wybierz typ odbiorcy", set_language: "Ustaw j\u0119zyk", set_preferred_language: "Ustaw preferowany j\u0119zyk", show_add_reminder_button: "Poka\u017C przycisk Dodaj przypomnienie", show_add_reminder_button_description: `Je\u015Bli zostanie w\u0142\u0105czony, przycisk Dodaj przypomnienie zostanie wy\u015Bwietlony na polu wprowadzania wiadomo\u015Bci, zapewniaj\u0105c szybki spos\xF3b dodania przypomnienia.

Uwaga: Po zmianie tego ustawienia musisz wy\u0142\u0105czy\u0107 i ponownie w\u0142\u0105czy\u0107 aplikacj\u0119, aby zobaczy\u0107 zmiany.`, show_my_reminders_room_action: "\u23F0 Poka\u017C moje przypomnienia", show_view_all_reminder_button: "Poka\u017C przycisk Widok WSZYSTKIE", show_view_all_reminder_button_description: `Je\u015Bli zostanie w\u0142\u0105czony, przycisk Widok wszystkich przypomnie\u0144 zostanie wy\u015Bwietlony w menu opcji wszystkich pokoju.

Uwaga: Po zmianie tego ustawienia musisz wy\u0142\u0105czy\u0107 i ponownie w\u0142\u0105czy\u0107 aplikacj\u0119, aby zobaczy\u0107 zmiany.`, snooze: "Drzemka", snooze_in_1_hour: "Drzemka za 1 godzin\u0119", snooze_in_1_week: "Drzemka w 1 tydzie\u0144", snooze_in_20_minutes: "Drzemka za 20 minut", snooze_in_3_hours: "Drzemka za 3 godziny", snooze_next_week_mon_9am: "Drzemka w przysz\u0142ym tygodniu w poniedzia\u0142ek o 9 rano", snooze_tomorrow_at_9am: "Drzemka jutro o 9 rano", snooze_tomorrow_at_time: "Drzemka jutro o __time__", something_went_wrong: "Co\u015B posz\u0142o nie tak", stats_reporting: "Wy\u015Blij statystyki", stats_reporting_description: "Wysy\u0142aj\u0105c swoje statystyki, pomo\u017Cesz nam ustali\u0107, w jaki spos\xF3b korzystasz z tej aplikacji, a tak\u017Ce jak dobra aplikacja zachowuje si\u0119, aby\u015Bmy mogli j\u0105 jeszcze bardziej poprawi\u0107.Nie martw si\u0119, poniewa\u017C \u017Cadne informacje o u\u017Cytkowniku nie s\u0105 wysy\u0142ane, a wszystkie otrzymywane przez nas informacje s\u0105 poufne.", success: "Powodzenie!", time: "Czas", tip_on_how_to_list_all_reminders: 'Wskaz\xF3wka: Mo\u017Cesz znale\u017A\u0107 list\u0119 wszystkich przypomnie\u0144, uruchamiaj\u0105c polecenie "/remind lista" lub klikaj\u0105c przycisk "Poka\u017C moje przypomnienia" na dowolnym panelu opcji kana\u0142\xF3w.', tomorrow_at_9AM: "Jutro o 9 rano", tomorrow_at_time: "jutro o __time__", triweekly: "Co trzy tygodnie", unknown_room: "Nieznany pok\xF3j", unsupported_language: "Nieobs\u0142ugiwany j\u0119zyk", upcoming_reminders: "Nadchodz\u0105ce przypomnienia", update_my_preference: "Zaktualizuj moje preferencje", upgrade_account: "\u{1F517} Zaktualizuj konto", upgrade_license: "Zaktualizuj Licencj\u0119", usage_exhausted: "Zastosowanie wyczerpane", user_plural: "U\u017Cytkownicy", user_reminder_from_user_with_name_with_description: '@__reminderCreatorUsername__ poprosi\u0142 mnie, abym przypomnia\u0142 o "__description__"', user_reminder_info_message: `Je\u015Bli chcesz doda\u0107 wiele u\u017Cytkownik\xF3w (\xF3w), oddziel je przecinkiem.

WSKAZ\xD3WKA: Wpisz /remind @John.doe @jane.doe z pola wej\u015Bciowego wiadomo\u015Bci, aby u\u017Cy\u0107 funkcji automatycznego kompletnego.`, user_with_username_not_found: "U\u017Cytkownik @__username__", view_all_reminders: "Zobacz wszystkie przypomnienia", view_completed_reminders: "Zobacz zako\u0144czone przypomnienia", view_existing_reminders: "Wy\u015Bwietl istniej\u0105ce przypomnienia", view_reminders: "Zobacz przypomnienia", weekly: "Co tydzie\u0144", when: "Kiedy?", when_do_you_want_to_be_reminded: "Kiedy chcesz otrzyma\u0107 przypomnienie?", who_to_remind: "Kogo przypomnie\u0107?", yes_delete_reminders: "Tak, usu\u0144 przypomnienia", you: "ty", you_have_no_reminders: "Nie masz przypomnie\u0144 do ogl\u0105dania.Spr\xF3buj utworzy\u0107 jedno przy u\u017Cyciu polecenia `/remind`.", your_preferred_language_has_been_updated_to_language: "Tw\xF3j preferowany j\u0119zyk zosta\u0142 zaktualizowany na __language__"
    }
}); var I = k(ae => { "use strict"; Object.defineProperty(ae, "__esModule", { value: !0 }); ae.t = ae.supportedLanguageList = ae.Language = void 0; var br = gr(), Fi = hr(), Wi = fr(), Ji = wr(), Hi = Tr(), Z; (function (n) { n.en = "en", n.de = "de", n.pt = "pt", n.ru = "ru", n.pl = "pl" })(Z = ae.Language || (ae.Language = {})); ae.supportedLanguageList = [Z.en, Z.de, Z.pt, Z.ru, Z.pl]; var Ki = (n, e, r) => { let t = Xi(e)[n]; return r ? Gi(t, r) : t }; ae.t = Ki; var Xi = n => { switch (n) { case Z.en: return br.en; case Z.de: return Fi.de; case Z.pt: return Wi.pt; case Z.ru: return Ji.ru; case Z.pl: return Hi.pl; default: return br.en } }, Gi = (n, e) => n.replace(/__([^\s\\]+)__/g, (r, t) => e[t]) }); var J = k(B => { "use strict"; Object.defineProperty(B, "__esModule", { value: !0 }); B.isRecurringReminder = B.getSiteUrl = B.getNextSnoozedDateAndMsg = B.truncateString = B.getOnlyDateAsString = B.uuid = B.concatStrings = void 0; var je = W(), Yi = De(), Zi = W(), oe = G(), Oe = I(), Qi = (n, e = "") => n.filter(Boolean).join(e); B.concatStrings = Qi; var en = () => "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, n => { let e = Math.random() * 16 | 0; return (n === "x" ? e : e & 3 | 8).toString(16) }); B.uuid = en; var tn = n => n.toISOString().split("T")[0]; B.getOnlyDateAsString = tn; var rn = (n, e = 500) => n.length > e ? n.substring(0, e) + "..." : n; B.truncateString = rn; var nn = (n, e, r, t) => { let a = new Date; switch (e) { case je.Durations.MINUTES_20: return { nextSnoozeDate: (0, oe.addMinutesToDate)(a, 20), nextSnoozeMsg: (0, Oe.t)("in_20_minutes", t) }; case je.Durations.HOUR_1: return { nextSnoozeDate: (0, oe.addMinutesToDate)(a, 60), nextSnoozeMsg: (0, Oe.t)("in_1_hour", t) }; case je.Durations.HOUR_3: return { nextSnoozeDate: (0, oe.addMinutesToDate)(a, 180), nextSnoozeMsg: (0, Oe.t)("in_3_hours", t) }; case je.Durations.TOMORROW: { let i = new Date(new Date().getTime() + r * 60 * 60 * 1e3); i = (0, oe.addHoursToDate)(i, 24), i.setHours(9), i.setMinutes(0), i.setSeconds(0), i.setMilliseconds(0); let o = new Date(i.getTime() - r * 60 * 60 * 1e3); return { nextSnoozeDate: o, nextSnoozeMsg: (0, Oe.t)("tomorrow_at_time", t, { time: (0, oe.formatTimeForMsg)(o, (0, oe.getTimezoneUtcString)(r || 0)) }) } } case je.Durations.NEXT_WEEK: { let i = new Date(new Date().getTime() + r * 60 * 60 * 1e3); i = (0, oe.getUpcomingMondayDate)(i), i.setHours(9), i.setMinutes(0), i.setSeconds(0), i.setMilliseconds(0); let o = new Date(i.getTime() - r * 60 * 60 * 1e3); return { nextSnoozeDate: o, nextSnoozeMsg: (0, Oe.t)("next_week_at_time", t, { time: (0, oe.formatTimeForMsg)(o, (0, oe.getTimezoneUtcString)(r || 0)) }) } } default: throw new Error("Invalid snooze duration") } }; B.getNextSnoozedDateAndMsg = nn; var an = async n => (await n.getServerSettings().getValueById(Yi.ServerSetting.SITE_URL)).replace(/\/$/, ""); B.getSiteUrl = an; var on = n => n !== Zi.RecurringReminderFrequencies.DO_NOT_REPEAT; B.isRecurringReminder = on }); var Nt = k(Ae => { "use strict"; Object.defineProperty(Ae, "__esModule", { value: !0 }); Ae.getUsageComparatorFunctionBody = Ae.getPublicKey = void 0; var sn = require("crypto"), dn = "1103fa90c999dac165532d8cd7da05a54682dcb28883bd4bd1fc1c5822c75d77d34e58f3206f48035684e28a025895125d4a5efdd1dd17bc60be25d764205f24e58aa4b6165acc5714691015ca7e58700d5be5c7731b23711c8ec3c867062cd18e626a232bcb7b9b969777a4dc4787b7cb5d877172b86a2f6b2644cc657c8e9eb4fa5ae16c9774ad958651b3491ec3165c9d094f25fa851ffa6ebd332be4c29c1b119b80c40ccf1ffe6d4448f6df2acb5260a8ab4bc91f84216345ecd837e13c0a4c7d55f45f53f34920ccbbd014a767291351ace3b48689825f1ee6eb9a32032ffa512028a83f4074587850fa62410859dd116a27c61de8074d93771347bdfde431e9df67cae9edb2618da952f62d4764e5896d1466113643d237164452ff51ac57c812d7274061837a379d6404f5b8799cae5d1a51ea06225f85bf32164a7c966f2fbf597c47ee7609efd6e666b4b1b1cd6176689b5bad002058e76f3e85720b42a77c5f10bd9bd9eb018ebc4c0a6f36bee01132d4a9ac0f33b19627467e7fd4d330ca86e479c6e5cfb1cc053c247bf8415b9f9a16f547ca8c40aacdd9f98b439f80788d020aae6bb145a01cdc10ae4f57d3c4e03a8ed3aafcc980a11d709608378652f59d029f21355592633be1dc2940ba18dd2bcb3d2e26a839086045210f8228da1b8bdb5548a1d5049fb1e3f716918a770d02d0d1ff566647ce0d851da6e7b1b1806066128cf6493c56ea3a5985170398511c89a66e8e0f9683edcc47a99a3f4b7f87c91d09bb32739c61b0ab38fd3d973e6b040d0db23ff6b51e4965349ff07c5564088cd1cfb57b6a1ea4252f14180b64853f4a069507b62940af9039f2b9ff9d1067efe8bda09ba349a799a1494bf585607dba4fab2c3f6de1049f", _n = "945e13f7b0a65e07af7bab48b82a3271", cn = "41cb3af3dfd0848967c717193e716ffd3808057531a1c30d2b7637a15661306d", mn = "aes-256-cbc", yr = () => { let n = (0, sn.createDecipheriv)(mn, Buffer.from(cn, "hex"), Buffer.from(_n, "hex")), e = n.update(dn, "hex", "utf8"); return e += n.final("utf8"), JSON.parse(e) }, ln = () => { let [n] = yr(); return n }; Ae.getPublicKey = ln; var un = () => { let [, n] = yr(); return n }; Ae.getUsageComparatorFunctionBody = un }); var Mr = k(dt => { "use strict"; Object.defineProperty(dt, "__esModule", { value: !0 }); dt.decrypt = void 0; var pn = require("crypto"), gn = Nt(), hn = n => { let e = (0, gn.getPublicKey)(); return (0, pn.publicDecrypt)(Buffer.from(e, "base64").toString("utf-8"), Buffer.from(n, "base64")).toString("utf-8") }; dt.decrypt = hn }); var ke = k(_t => { "use strict"; Object.defineProperty(_t, "__esModule", { value: !0 }); _t.hasValidLicense = void 0; var fn = De(), wn = J(), Tn = Mr(), bn = async (n, e, r = !1) => { let t = await yn(n); if (!t || !t.trim().length) return e.log("Reminder App License is not set"), !1; let a = ""; try { let _ = t.trim().replace(/\n/g, ""); if (a = (0, Tn.decrypt)(_), !a || !a.trim().length) throw new Error("Empty License string found") } catch (_) { return e.log("Error decrypting Reminder App License. Please check your license key.", _), !r && console.log("Error decrypting Reminder App License. Please check your license key.", _), !1 } let i = JSON.parse(a); if (!i || !i.url || !i.expiry) return e.log("Reminder App License content is not valid. Please check your license key."), !1; let o = new Date(i.expiry); if (o < new Date) return e.log("Reminder App License has expired on", o, ". You will not be able to use premium features from the app. You can renew the license from https://surveys.chat/license"), !r && console.log("Reminder App License has expired on", o, ". You will not be able to use premium features from the app. You can renew the license from https://surveys.chat/license"), !1; let s = await (0, wn.getSiteUrl)(n.getEnvironmentReader()); return (!s || !s.trim().length) && e.log("Unable to validate Reminder App license since Site URL is not set"), i.url !== s ? (e.log(`Reminder App License is not valid for this workspace. The license is meant for ${i.url}. Please check your license key.`), !r && console.log(`Reminder App License is not valid for this workspace. The license is meant for ${i.url}. Please check your license key.`), !1) : !0 }; _t.hasValidLicense = bn; var yn = async n => await n.getEnvironmentReader().getSettings().getValueById(fn.AppSetting.License) }); var Ar = k(xe => { "use strict"; Object.defineProperty(xe, "__esModule", { value: !0 }); xe.sendUserNotification = xe.sendRoomNotification = void 0; var Mn = async (n, e, r, t, a, i, o) => { let s = await e.getUserReader().getAppUser(n.getID()); if (!s) throw new Error("No app user found"); let _ = r.getCreator().startMessage().setGroupable(!1).setSender(s).setRoom(t); return a && a.length && _.setText(a), i && i.length > 0 && _.setAttachments(i), o !== void 0 && _.setBlocks(o), e.getNotifier().notifyRoom(t, _.getMessage()) }; xe.sendRoomNotification = Mn; var An = async (n, e, r, t, a, i, o, s) => { let _ = await e.getUserReader().getAppUser(n.getID()); if (!_) throw new Error("Error! No app user found"); let m = r.getCreator().startMessage().setGroupable(!1).setSender(_).setRoom(t); return i && i.length > 0 && m.setText(i), o && o.length > 0 && m.setAttachments(o), s && m.setBlocks(s), e.getNotifier().notifyUser(a, m.getMessage()) }; xe.sendUserNotification = An }); var Sr = k(ue => { "use strict"; Object.defineProperty(ue, "__esModule", { value: !0 }); ue.hasUserUsageExceeded = ue.decryptUsageData = ue.encryptUsageData = void 0; var kr = require("crypto"), kn = Nt(), xr = "3183be973af7f514eda5135f78a6f74a", vr = "6b6ddfbe50ce94a8e0208ba41dc43e5cd414f9c35e121bc00e5ae6ccab51feba", Rr = "aes-256-cbc", xn = n => { let e = (0, kr.createCipheriv)(Rr, Buffer.from(vr, "hex"), Buffer.from(xr, "hex")), r = e.update(JSON.stringify(n), "utf8", "hex"); return r += e.final("hex"), r }; ue.encryptUsageData = xn; var vn = n => { let e = (0, kr.createDecipheriv)(Rr, Buffer.from(vr, "hex"), Buffer.from(xr, "hex")), r = e.update(n, "hex", "utf8"); return r += e.final("utf8"), JSON.parse(r) }; ue.decryptUsageData = vn; var Rn = n => { let e = (0, kn.getUsageComparatorFunctionBody)(); return new Function("l", e)(n) }; ue.hasUserUsageExceeded = Rn }); var L = k(U => { "use strict"; Object.defineProperty(U, "__esModule", { value: !0 }); U.UserPreference = U.UserUsage = U.JobData = U.BulkDeleteConfirmationModalUiData = U.MsgReminderCreateModalUiData = U.ReminderCreateModalUiData = U.Reminder = U.ModalClickEventLock = void 0; var ct = require("@rocket.chat/apps-engine/definition/metadata"), pe = Sr(), se = class { constructor(e, r, t) { this.baseAssociation = new ct.RocketChatAssociationRecord(ct.RocketChatAssociationModel.MISC, e), r && (this.indexedProperties = r), t && (this.customStorageDefinition = t) } insertOne(e, r) { return e.createWithAssociations(r, this.convertModelToAssociation(r, !1)) } insertOrUpdate(e, r) { return e.updateByAssociations(this.convertModelToAssociation(r, !1), r, !0) } async findAll(e, r) { let t = await e.readByAssociations(this.convertModelToAssociation(r, !0)); return !t || !t.length ? [] : t } async findOne(e, r) { let t = await this.findAll(e, r); return !t || !t.length ? null : t[0] } clearAll(e) { return e.removeByAssociation(this.baseAssociation) } clearByQuery(e, r) { return e.removeByAssociations(this.convertModelToAssociation(r, !0)) } convertModelToAssociation(e, r) { let t = [this.baseAssociation]; if (!e) return t; if (r && !this.indexedProperties && Object.keys(e).length) throw new Error("Error! Trying to search on a non-indexed field. Also no index definition found. Please ensure you've indexed the field which you're using within query"); if (!this.indexedProperties) return t; let a; for (a in e) { if (!this.indexedProperties[a]) { if (r) throw new Error("Error! Trying to search on a non-indexed field. Please ensure you've indexed the field which you're using within query"); continue } let i = e[a]; if (i === void 0) throw new Error(`Error! Invalid Query. No value provided for query property ${String(a)}`); if (typeof i != "string") throw new Error("Error! Please ensure that the indexed properties have a string value"); t.push(new ct.RocketChatAssociationRecord(this.getAssociationModel(a), i)) } return t } getAssociationModel(e) { return this.customStorageDefinition && this.customStorageDefinition[e] || ct.RocketChatAssociationModel.MISC } }, Pr = class extends se { constructor() { super("modalClickEventLock", { viewId: 1 }) } }, Er = class extends se { constructor() { super("task", { id: 1, createdBy: 1, roomId: 1, status: 1 }) } async markReminderAsComplete(e, r, t) { t.status !== "completed" && (await U.Reminder.clearByQuery(r, { id: t.id }), await U.Reminder.insertOrUpdate(r, Object.assign(Object.assign({}, t), { status: "completed", completedAt: new Date })), await U.UserUsage.decrementRemindersCreatedCount(e.getPersistenceReader(), r, t.createdBy, 1)) } }, Ir = class extends se { constructor() { super("taskCreateModalUiData", { viewId: 1 }) } }, Ur = class extends se { constructor() { super("msgReminderCreateModalUiData", { viewId: 1 }) } }, zr = class extends se { constructor() { super("bulkDeleteConfirmationModalUiData", { viewId: 1 }) } }, Dr = class extends se { constructor() { super("jobData", { jobId: 1, jobName: 1 }) } }, jr = class extends se { constructor() { super("userUsage", { userId: 1 }) } async incrementRemindersCreatedCount(e, r, t, a = 1) { let i = await this.findOne(e, { userId: t }); i || (i = { userId: t, data: (0, pe.encryptUsageData)({ totalScheduledReminders: 0, totalActiveReminders: 0, lastReminderCreatedAt: new Date().getTime() }), statsSynced: !1 }); let o = (0, pe.decryptUsageData)(i.data); return o.totalActiveReminders < 0 && (o.totalActiveReminders = 0), o.totalActiveReminders += a, o.totalScheduledReminders += a, o.lastReminderCreatedAt = new Date().getTime(), i.data = (0, pe.encryptUsageData)(o), i.statsSynced = !1, await this.insertOrUpdate(r, i), i } async decrementRemindersCreatedCount(e, r, t, a = 1) { let i = await this.findOne(e, { userId: t }); if (!i) return i = { userId: t, data: (0, pe.encryptUsageData)({ totalScheduledReminders: 0, totalActiveReminders: 0, lastReminderCreatedAt: new Date().getTime() }), statsSynced: !1 }, await this.insertOrUpdate(r, i), i; let o = (0, pe.decryptUsageData)(i.data); return o.totalActiveReminders -= a, o.totalActiveReminders < 0 && (o.totalActiveReminders = 0), i.data = (0, pe.encryptUsageData)(o), i.statsSynced = !1, await this.insertOrUpdate(r, i), i } async hasExceededUsage(e, r, t) { let a = await this.findOne(e, { userId: t }); if (!a) { let o = await U.Reminder.findAll(e, { createdBy: t, status: "active" }); if (!o.length) return !1; a = await this.incrementRemindersCreatedCount(e, r, t, o.length) } let i = (0, pe.decryptUsageData)(a.data); return (0, pe.hasUserUsageExceeded)(i.totalActiveReminders) } async getUsageStats(e) { let r = await this.findAll(e); if (!r) throw new Error("No stats found"); return r.filter(a => !a.statsSynced) } async markStatsSynced(e, r) { for (let t of r) t.statsSynced = !0, await this.insertOrUpdate(e, t) } }, Or = class extends se { constructor() { super("userPreference", { userId: 1 }) } }; U.ModalClickEventLock = new Pr; U.Reminder = new Er; U.ReminderCreateModalUiData = new Ir; U.MsgReminderCreateModalUiData = new Ur; U.BulkDeleteConfirmationModalUiData = new zr; U.JobData = new Dr; U.UserUsage = new jr; U.UserPreference = new Or }); var de = k(we => { "use strict"; Object.defineProperty(we, "__esModule", { value: !0 }); we.isSupportedLanguage = we.getUserPreferredLanguage = void 0; var Sn = L(), mt = I(), Pn = async (n, e) => { if (!e) return mt.Language.en; let r = await Sn.UserPreference.findOne(n, { userId: e }), t = (r == null ? void 0 : r.language) || mt.Language.en; return (0, we.isSupportedLanguage)(t) ? t : mt.Language.en }; we.getUserPreferredLanguage = Pn; var En = n => mt.supportedLanguageList.includes(n); we.isSupportedLanguage = En }); var ve = k(lt => { "use strict"; Object.defineProperty(lt, "__esModule", { value: !0 }); lt.dialogModal = void 0; var In = require("@rocket.chat/apps-engine/definition/uikit/blocks"), Cr = I(), Un = ({ title: n, text: e, modify: r, viewId: t, language: a }) => { let i = r.getCreator().getBlockBuilder(); return i.addSectionBlock({ text: i.newMarkdownTextObject(e) }), { id: t || "reminder-dialog-modal", title: { type: In.TextObjectType.PLAINTEXT, text: n || (0, Cr.t)("reminder_notification", a) }, close: i.newButtonElement({ text: i.newPlainTextObject((0, Cr.t)("close", a)) }), blocks: i.getBlocks() } }; lt.dialogModal = Un }); var ut = k(Re => { "use strict"; Object.defineProperty(Re, "__esModule", { value: !0 }); Re.convertFrequencyToText = Re.getFrequencyBlockOptions = void 0; var z = W(), D = I(), zn = (n, e, r) => { let t = e ? "" : ` (${(0, D.t)("premium_feature", r)})`; return [{ text: n.newPlainTextObject((0, D.t)("do_not_repeat", r)), value: z.RecurringReminderFrequencies.DO_NOT_REPEAT }, { text: n.newPlainTextObject(`${(0, D.t)("daily", r)}${t}`), value: z.RecurringReminderFrequencies.DAILY }, { text: n.newPlainTextObject(`${(0, D.t)("daily_weekdays_only", r)}${t}`), value: z.RecurringReminderFrequencies.DAILY_WEEKDAYS }, { text: n.newPlainTextObject(`${(0, D.t)("weekly", r)}${t}`), value: z.RecurringReminderFrequencies.WEEKLY }, { text: n.newPlainTextObject(`${(0, D.t)("biweekly", r)}${t}`), value: z.RecurringReminderFrequencies.BIWEEKLY }, { text: n.newPlainTextObject(`${(0, D.t)("triweekly", r)}${t}`), value: z.RecurringReminderFrequencies.TRIWEEKLY }, { text: n.newPlainTextObject(`${(0, D.t)("monthly", r)}${t}`), value: z.RecurringReminderFrequencies.MONTHLY }, { text: n.newPlainTextObject(`${(0, D.t)("quarterly", r)}${t}`), value: z.RecurringReminderFrequencies.QUARTERLY }, { text: n.newPlainTextObject(`${(0, D.t)("biannually", r)}${t}`), value: z.RecurringReminderFrequencies.BIANNUALLY }, { text: n.newPlainTextObject(`${(0, D.t)("annually", r)}${t}`), value: z.RecurringReminderFrequencies.ANNUALLY }] }; Re.getFrequencyBlockOptions = zn; var Dn = (n, e) => { switch (n) { case z.RecurringReminderFrequencies.DO_NOT_REPEAT: return ""; case z.RecurringReminderFrequencies.DAILY: return (0, D.t)("every_day", e); case z.RecurringReminderFrequencies.DAILY_WEEKDAYS: return (0, D.t)("every_weekday", e); case z.RecurringReminderFrequencies.WEEKLY: return (0, D.t)("every_week", e); case z.RecurringReminderFrequencies.BIWEEKLY: return (0, D.t)("every_2_weeks", e); case z.RecurringReminderFrequencies.TRIWEEKLY: return (0, D.t)("every_3_weeks", e); case z.RecurringReminderFrequencies.MONTHLY: return (0, D.t)("every_month", e); case z.RecurringReminderFrequencies.QUARTERLY: return (0, D.t)("every_quarter", e); case z.RecurringReminderFrequencies.BIANNUALLY: return (0, D.t)("every_6_months", e); case z.RecurringReminderFrequencies.ANNUALLY: return (0, D.t)("every_year", e) } }; Re.convertFrequencyToText = Dn }); var Se = k(Te => { "use strict"; Object.defineProperty(Te, "__esModule", { value: !0 }); Te.createTaskCreationModal = Te.ReminderCreateModalViewIdPrefix = void 0; var jn = require("@rocket.chat/apps-engine/definition/uikit"), Lr = et(), ie = W(), pt = G(), On = ke(), Bt = L(), E = I(), qt = J(), Cn = ut(); Te.ReminderCreateModalViewIdPrefix = "reminderCreateModal"; var Ln = async ({ persistence: n, modify: e, roomId: r, userId: t, read: a, recipientType: i = ie.ReminderRecipientsType.ME, existingViewId: o, existingUserUtcOffset: s, moreOptionsVisible: _ = !1, initialTargetAudience: m = "", initialDescription: d = "", logger: g, language: p }) => { let f = o || (0, qt.concatStrings)([Te.ReminderCreateModalViewIdPrefix, (0, qt.uuid)()], "-"), l = 0; if (o) { if (s === void 0) throw new Error("Error! No existing user UTC offset found while trying to update an existing view"); l = s; let w = await Bt.ReminderCreateModalUiData.findOne(a.getPersistenceReader(), { viewId: o }); if (!w) throw new Error("Error! No existing reminder ui data found"); await Bt.ReminderCreateModalUiData.insertOrUpdate(n, Object.assign(Object.assign({}, w), { recipientType: i })) } else { if (!r || !t) throw new Error("Missing roomId or userId"); let w = await a.getUserReader().getById(t); if (!w) throw new Error("User not found"); l = w.utcOffset; let M = { viewId: f, roomId: r, userId: t, userUtcOffset: l, recipientType: i }; await Bt.ReminderCreateModalUiData.insertOrUpdate(n, M) } let h = new Date(new Date().getTime() + l * 60 * 60 * 1e3), c = e.getCreator().getBlockBuilder(); if (c.addInputBlock({ blockId: "reminder", element: { placeholder: c.newPlainTextObject((0, E.t)("when", p)), type: "datepicker", actionId: "date", initialValue: (0, qt.getOnlyDateAsString)(h) }, label: c.newPlainTextObject((0, E.t)("when", p)) }), c.addInputBlock({ blockId: "reminder", element: c.newStaticSelectElement({ placeholder: c.newPlainTextObject((0, E.t)("time", p)), actionId: "time", initialValue: (0, pt.getNearestTimeIn15MinInterval)(h), options: (0, pt.getTimeBlockOptions)() }), label: c.newPlainTextObject((0, E.t)("time", p)) }), c.addInputBlock({ blockId: "reminder", element: c.newPlainTextInputElement({ actionId: "description", multiline: !0, placeholder: c.newPlainTextObject((0, E.t)("remind_me_to", p)), initialValue: d }), label: c.newPlainTextObject((0, E.t)("reminder_message", p)) }), _ || i !== ie.ReminderRecipientsType.ME) { c.addSectionBlock({ text: c.newMarkdownTextObject(`**${(0, E.t)("who_to_remind", p)}**`) }); let w = await (0, On.hasValidLicense)(a, g); c.addActionsBlock({ elements: [c.newStaticSelectElement({ options: [{ text: c.newPlainTextObject(`${(0, E.t)("me", p)}`), value: ie.ReminderRecipientsType.ME }, { text: c.newPlainTextObject(`${(0, E.t)("channel_plural", p)}${w ? "" : ` (${(0, E.t)("premium_feature", p)})`}`), value: ie.ReminderRecipientsType.CHANNEL }, { text: c.newPlainTextObject(`${(0, E.t)("user_plural", p)}${w ? "" : ` (${(0, E.t)("premium_feature", p)})`}`), value: ie.ReminderRecipientsType.USER }], actionId: `create-reminder-recipient-type-change_${f}_${l}`, initialValue: i, placeholder: c.newPlainTextObject((0, E.t)("select_recipient_type", p)) })] }), (i === ie.ReminderRecipientsType.CHANNEL || i === ie.ReminderRecipientsType.USER) && (w || c.addContextBlock({ elements: [c.newMarkdownTextObject(`${(0, E.t)("premium_license_details", p, { licenseLink: Lr.License.LicensePurchasePageUrl })}`)] }), c.addInputBlock({ blockId: "reminder", element: c.newPlainTextInputElement({ placeholder: c.newPlainTextObject(i === ie.ReminderRecipientsType.CHANNEL ? "#general,#random" : "@john.doe,@jane.doe"), actionId: `target_${i}`, initialValue: m }), label: c.newPlainTextObject(i === ie.ReminderRecipientsType.CHANNEL ? "List of Channel(s) to remind" : "List of User(s) to remind") }), i === ie.ReminderRecipientsType.CHANNEL ? c.addContextBlock({ elements: [c.newMarkdownTextObject((0, E.t)("channel_reminder_info_message", p))] }) : c.addContextBlock({ elements: [c.newMarkdownTextObject((0, E.t)("user_reminder_info_message", p))] })), c.addInputBlock({ blockId: "reminder", element: c.newStaticSelectElement({ options: (0, Cn.getFrequencyBlockOptions)(c, w, p), actionId: "frequency", initialValue: "do-not-repeat", placeholder: c.newPlainTextObject((0, E.t)("frequency", p)) }), label: c.newPlainTextObject((0, E.t)("frequency", p)) }), w || c.addContextBlock({ elements: [c.newMarkdownTextObject((0, E.t)("premium_license_recurring_feature_warning", p, { licenseLink: Lr.License.LicensePurchasePageUrl }))] }) } else c.addActionsBlock({ elements: [c.newButtonElement({ text: c.newPlainTextObject((0, E.t)("more_options", p)), actionId: `create-reminder-more-options_${f}_${l}`, style: jn.ButtonStyle.PRIMARY })] }); return c.addDividerBlock(), c.addSectionBlock({ text: c.newPlainTextObject((0, E.t)("note_your_timezone_is_set_to", p, { timezone: (0, pt.getFormattedTimezoneForMsg)((0, pt.getTimezoneUtcString)(l)) })) }), { id: f, title: c.newPlainTextObject((0, E.t)("create_reminder", p)), submit: c.newButtonElement({ text: c.newPlainTextObject((0, E.t)("create", p)) }), close: c.newButtonElement({ text: c.newPlainTextObject((0, E.t)("cancel", p)) }), blocks: c.getBlocks() } }; Te.createTaskCreationModal = Ln }); var gt = k(V => { "use strict"; Object.defineProperty(V, "__esModule", { value: !0 }); V.addBotToRoomIfNotAlreadyAdded = V.isReminderBotPartOfTheRoom = V.findDMWithBotOrCreate = V.isDMWithAppBot = V.resolveRoomPreviewTitle = V.resolveRoomUrlPath = void 0; var H = require("@rocket.chat/apps-engine/definition/rooms"), Nn = ({ type: n, slugifiedName: e, id: r }, t) => { switch (n) { case H.RoomType.CHANNEL: return `${t}/channel/${e}`; case H.RoomType.PRIVATE_GROUP: return `${t}/group/${e}`; case H.RoomType.DIRECT_MESSAGE: return `${t}/direct/${r}`; case H.RoomType.LIVE_CHAT: return `${t}/live/${r}`; default: return "" } }; V.resolveRoomUrlPath = Nn; var Bn = async (n, e, r, t) => { let { type: a, slugifiedName: i, displayName: o, parentRoom: s } = e; switch (a) { case H.RoomType.CHANNEL: case H.RoomType.PRIVATE_GROUP: return s && o ? { type: a, name: o, url: t } : { type: a, name: i, url: t }; case H.RoomType.DIRECT_MESSAGE: { let m = (await n.getRoomReader().getMembers(e.id)).filter(d => d.id !== r).map(d => d.username); return { type: H.RoomType.DIRECT_MESSAGE, url: t, otherParticipants: m } } case H.RoomType.LIVE_CHAT: return { type: H.RoomType.LIVE_CHAT, url: t, name: o || i }; default: return { type: "unknown" } } }; V.resolveRoomPreviewTitle = Bn; var qn = async (n, e, r) => { let { type: t } = r; if (t !== H.RoomType.DIRECT_MESSAGE) return !1; let a = await n.getUserReader().getAppUser(e); if (!a) throw new Error("No app user found"); let i = await n.getRoomReader().getMembers(r.id); return i.findIndex(({ id: s }) => s === a.id) !== -1 && i.length === 2 }; V.isDMWithAppBot = qn; var $n = async (n, e, r, t) => { let a = await n.getRoomReader().getDirectByUsernames([t.username, r.username]); if (a === void 0) { let i = e.getCreator().startRoom().setCreator(t).setType(H.RoomType.DIRECT_MESSAGE).setMembersToBeAddedByUsernames([r.username]), o = await e.getCreator().finish(i); if (a = await n.getRoomReader().getById(o), !a) throw new Error(`No room found for room id: ${o}`) } return a }; V.findDMWithBotOrCreate = $n; var Vn = async (n, e, r) => n.type !== H.RoomType.PRIVATE_GROUP ? !0 : (await e.getRoomReader().getMembers(n.id)).findIndex(({ id: i }) => i === r.id) !== -1; V.isReminderBotPartOfTheRoom = Vn; var Fn = async (n, e, r, t) => { if (n.type !== H.RoomType.PRIVATE_GROUP || await (0, V.isReminderBotPartOfTheRoom)(n, e, t)) return; let a = await r.getUpdater().room(n.id, t); a.addMemberToBeAddedByUsername(t.username), await r.getUpdater().finish(a) }; V.addBotToRoomIfNotAlreadyAdded = Fn }); var _e = k(q => { "use strict"; Object.defineProperty(q, "__esModule", { value: !0 }); q.addLinkedMessagePreviewBlock = q.resolveTranslatedUserNameInfo = q.resolveTranslatedRoomName = q.resolveAdditionalInfoForReminderWithLinkedMessage = q.updateRoomMessageAfterRemovingPreviousContent = q.sendRoomMessage = q.resolvePreviewTitleAndMessageUrlFromMessageId = void 0; var ht = require("@rocket.chat/apps-engine/definition/rooms"), $t = gt(), ft = I(), Vt = J(), Wn = async (n, e) => { let r; try { let i = await n.getMessageReader().getById(e); if (!i) throw new Error("Message not found"); r = i } catch (i) { return console.info(`[Reminder App] Message ${e} not found. Most likely it has been deleted.`, i), { previewTitle: "__**Connected Message not found. Perhaps it has been deleted**__", messageUrl: "" } } let { text: t } = r, a = await Xn(n, r); return Object.assign({ messageUrl: a }, t && t.trim().length && { previewTitle: (0, Vt.truncateString)(t) }) }; q.resolvePreviewTitleAndMessageUrlFromMessageId = Wn; var Jn = async (n, e, r, t, a, i, o) => { let s = n.getCreator().startMessage().setGroupable(!1).setSender(e).setRoom(r); return o && s.setParseUrls(!1), t && t.length && s.setText(t), a && a.length > 0 && s.setAttachments(a), i && s.setBlocks(i), n.getCreator().finish(s) }; q.sendRoomMessage = Jn; var Hn = async (n, e, r, t, a) => { let i = await n.getUpdater().message(e, r); i.setEditor(i.getSender()); let { text: o, attachments: s, blocks: _ } = t; return Object.assign(i.getMessage(), Object.assign(Object.assign({ file: void 0, text: "" }, a && { attachments: [] }), { blocks: [] })), o && o.length && i.setText(o), s && s.length > 0 && i.setAttachments(s), _ && i.setBlocks(_), n.getUpdater().finish(i) }; q.updateRoomMessageAfterRemovingPreviousContent = Hn; var Kn = async (n, e, r, t) => { let { linkedMessage: a } = r; if (!a) throw new Error("Linked message not found"); let { id: i } = a; try { let o = await n.getMessageReader().getById(i); if (!o) throw new Error("Linked message not found. Perhaps it has been deleted."); let { sender: { username: s }, room: _ } = o, m = await (0, Vt.getSiteUrl)(n.getEnvironmentReader()), d = (0, $t.resolveRoomUrlPath)(_, m), g = await (0, $t.resolveRoomPreviewTitle)(n, _, t.id, d); return { fromUser: { username: s, directMessageLink: `${m}/direct/${s}` }, fromRoom: g } } catch (o) { e.error("Error while trying to resolve linked message. Perhaps the message was deleted?", o); return } }; q.resolveAdditionalInfoForReminderWithLinkedMessage = Kn; var Xn = async (n, e) => { let r = await (0, Vt.getSiteUrl)(n.getEnvironmentReader()), { room: t, id: a } = e; return `${(0, $t.resolveRoomUrlPath)(t, r)}?msg=${a}` }, Gn = (n, e, r) => { let { type: t } = n; switch (t) { case ht.RoomType.CHANNEL: case ht.RoomType.PRIVATE_GROUP: return `[${n.name}](${e})`; case ht.RoomType.DIRECT_MESSAGE: { let a = n.otherParticipants.join(", "); return (0, ft.t)("direct_message_with_participants", r, { participants: a }) } case ht.RoomType.LIVE_CHAT: return (0, ft.t)("livechat_message_with_name", r, { name: n.name }); default: return (0, ft.t)("unknown_room", r) } }; q.resolveTranslatedRoomName = Gn; var Yn = (n, e, r) => { let { username: t, directMessageLink: a } = n; return t === e ? (0, ft.t)("you", r) : `[@${t}](${a})` }; q.resolveTranslatedUserNameInfo = Yn; var Zn = async (n, e, r, t) => { try { let a = await r.getMessageReader().getById(t); if (!a) throw new Error(`Message ${t} not found`); let { text: i } = a; if (i) { let o = i.length > 85 ? `${i.substring(0, 85)}...` : i; n.addContextBlock({ elements: [n.newMarkdownTextObject(`${o}`)] }) } } catch (a) { e.warn("Error while adding message preview", a) } }; q.addLinkedMessagePreviewBlock = Zn }); var Pe = k(be => { "use strict"; Object.defineProperty(be, "__esModule", { value: !0 }); be.createReminderListModal = be.ReminderListModalViewIdPrefix = void 0; var Q = require("@rocket.chat/apps-engine/definition/uikit"), Ce = W(), C = G(), ge = _e(), Qn = L(), x = I(), Ft = J(), Nr = ut(), ea = ve(); be.ReminderListModalViewIdPrefix = "reminderListModal"; var ta = async ({ modify: n, user: { id: e, username: r, utcOffset: t }, read: a, showCompleted: i = !1, existingViewId: o, language: s, logger: _ }) => { let m = o || (0, Ft.concatStrings)([be.ReminderListModalViewIdPrefix, (0, Ft.uuid)()], "-"), d = n.getCreator().getBlockBuilder(), g = await Qn.Reminder.findAll(a.getPersistenceReader(), Object.assign({ createdBy: e }, !i && { status: "active" })); if (g.length === 0) return i ? (0, ea.dialogModal)({ title: (0, x.t)("view_reminders", s), text: (0, x.t)("you_have_no_reminders", s), modify: n, viewId: m, language: s }) : ra(d, m, s); let p = [], f = [], l = []; if (g.filter(({ status: h }) => h === "active").forEach(h => { let { frequency: c, dueDate: w } = h; (0, Ft.isRecurringReminder)(c) ? l.push(h) : w.getTime() > new Date().getTime() ? p.push(h) : f.push(h) }), p.length > 0) { d.addSectionBlock({ text: d.newMarkdownTextObject(`**${(0, x.t)("upcoming_reminders", s)}:**`) }); let h = p.sort((c, w) => c.dueDate.getTime() - w.dueDate.getTime()); for (let c of h) { let { audience: w, linkedMessage: M, description: A } = c; if (w) { let { type: b, ids: T } = w, R = b === "user" ? "@" : "#", S = `${T.map(v => `${R}${v}`).join(", ")}`; d.addSectionBlock({ text: d.newMarkdownTextObject((0, x.t)("remind_audience_at_time", s, { audience: S, time: (0, C.formatDateTimeForMsg)(c.dueDate, t), description: c.description })), accessory: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete", s)), actionId: `delete-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.DANGER }) }) } else { if (M) { let { url: b, msgAdditionalInfoPreview: T, metadata: { fromRoom: R, fromUser: S } = {}, id: v } = M, $ = ""; T || !R || !S ? $ = `About [this message](${b}) ${T} due ${(0, C.formatDateTimeForMsg)(c.dueDate, t)}.` : $ = (0, x.t)(A ? "reminder_in_list_with_message_with_note" : "reminder_in_list_with_message", s, Object.assign(Object.assign({ messageUrl: b, userName: (0, ge.resolveTranslatedUserNameInfo)(S, r, s), roomName: (0, ge.resolveTranslatedRoomName)(R, R.type === "unknown" ? "" : R.url, s) }, A && { note: A }), { dueDate: (0, C.formatDateTimeForMsg)(c.dueDate, t) })), d.addSectionBlock({ text: d.newMarkdownTextObject($) }), await (0, ge.addLinkedMessagePreviewBlock)(d, _, a, v) } else d.addSectionBlock({ text: d.newMarkdownTextObject((0, x.t)("reminder_in_list_with_description", s, { description: A, time: (0, C.formatDateTimeForMsg)(c.dueDate, t) })) }); d.addActionsBlock({ elements: [d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("mark_as_completed", s)), actionId: `mark-as-completed-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.PRIMARY }), d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete", s)), actionId: `delete-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.DANGER })] }) } d.addSectionBlock({ text: d.newMarkdownTextObject("") }) } d.addDividerBlock() } if (f.length > 0) { d.addSectionBlock({ text: d.newMarkdownTextObject(`**${(0, x.t)("past_and_incomplete", s)}:**`), accessory: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete_all_past_reminders", s)), style: Q.ButtonStyle.DANGER, actionId: `delete-all-past-reminders_${m}`, value: f.map(({ id: c }) => c).join(",") }) }); let h = f.sort((c, w) => c.dueDate.getTime() - w.dueDate.getTime()); for (let c of h) { let { audience: w, linkedMessage: M, description: A } = c; if (w) { let { type: b, ids: T } = w, R = b === "user" ? "@" : "#", S = `${T.map(v => `${R}${v}`).join(", ")}`; d.addSectionBlock({ text: d.newMarkdownTextObject((0, x.t)("remind_audience_was_due_at_time", s, { audience: S, time: (0, C.formatDateTimeForMsg)(c.dueDate, t), description: A })), accessory: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete", s)), actionId: `delete-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.DANGER }) }) } else { let b; if (M) { let { url: T, msgAdditionalInfoPreview: R, metadata: { fromRoom: S, fromUser: v } = {} } = M; R || !S || !v ? b = d.newMarkdownTextObject(`About [this message](${T}) ${R} due ${(0, C.formatDateTimeForMsg)(c.dueDate, t)}.`) : b = d.newMarkdownTextObject((0, x.t)(A ? "reminder_in_list_with_message_with_note" : "reminder_in_list_with_message", s, Object.assign(Object.assign({ messageUrl: T, userName: (0, ge.resolveTranslatedUserNameInfo)(v, r, s), roomName: (0, ge.resolveTranslatedRoomName)(S, S.type === "unknown" ? "" : S.url, s) }, A && { note: A }), { dueDate: (0, C.formatDateTimeForMsg)(c.dueDate, t) }))) } else b = d.newMarkdownTextObject((0, x.t)("reminder_in_list_with_description", s, { description: A, time: (0, C.formatDateTimeForMsg)(c.dueDate, t) })); d.addSectionBlock({ text: b, accessory: d.newOverflowMenuElement({ actionId: `snooze-reminder-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, options: [{ text: d.newPlainTextObject((0, x.t)("snooze_in_20_minutes", s)), value: Ce.Durations.MINUTES_20 }, { text: d.newPlainTextObject((0, x.t)("snooze_in_1_hour", s)), value: Ce.Durations.HOUR_1 }, { text: d.newPlainTextObject((0, x.t)("snooze_in_3_hours", s)), value: Ce.Durations.HOUR_3 }, { text: d.newPlainTextObject((0, x.t)("snooze_tomorrow_at_9am", s)), value: Ce.Durations.TOMORROW }, { text: d.newPlainTextObject((0, x.t)("snooze_next_week_mon_9am", s)), value: Ce.Durations.NEXT_WEEK }] }) }), M && await (0, ge.addLinkedMessagePreviewBlock)(d, _, a, M.id), d.addActionsBlock({ elements: [d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("mark_as_completed", s)), actionId: `mark-as-completed-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.PRIMARY }), d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete", s)), actionId: `delete-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.DANGER })] }) } d.addSectionBlock({ text: d.newMarkdownTextObject("") }) } d.addDividerBlock() } if (l.length > 0 && (d.addSectionBlock({ text: d.newMarkdownTextObject(`**${(0, x.t)("recurring_reminders", s)}:**`) }), l.sort((h, c) => h.createdAt.getTime() - c.createdAt.getTime()).forEach(h => { let { audience: c, frequency: w, description: M } = h, A; if (c) { let { type: b, ids: T } = c, R = b === "user" ? "@" : "#", S = `${T.map(v => `${R}${v}`).join(", ")}`; A = d.newMarkdownTextObject((0, x.t)("recurring_remind_audience_at_time_and_frequency", s, { audience: S, time: (0, C.formatTimeForMsg)(h.dueDate, (0, C.getTimezoneUtcString)(t || 0)), frequency: (0, Nr.convertFrequencyToText)(w, s), description: M })) } else A = d.newMarkdownTextObject((0, x.t)("recurring_reminder_in_list_with_description_and_frequency", s, { description: h.description, time: (0, C.formatTimeForMsg)(h.dueDate, (0, C.getTimezoneUtcString)(t || 0)), frequency: (0, Nr.convertFrequencyToText)(w, s) })); d.addSectionBlock({ text: A, accessory: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete", s)), actionId: `delete-in-modal_${m}_${h.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.DANGER }) }), d.addSectionBlock({ text: d.newMarkdownTextObject("") }) }), d.addDividerBlock()), i) { let h = g.filter(c => c.status === "completed"); d.addSectionBlock(Object.assign({ text: d.newMarkdownTextObject(`**${(0, x.t)("completed", s)}:**`) }, h.length > 0 && { accessory: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete_all_completed_reminders", s)), style: Q.ButtonStyle.DANGER, actionId: `delete-all-completed-reminders_${m}`, value: h.map(({ id: c }) => c).join(",") }) })), h.length === 0 ? d.addSectionBlock({ text: d.newMarkdownTextObject((0, x.t)("no_completed_reminders", s)) }) : (h.sort((c, w) => c.dueDate.getTime() - w.dueDate.getTime()).forEach(c => { let { audience: w, linkedMessage: M, description: A } = c; if (w) { let { type: b, ids: T } = w, R = b === "user" ? "@" : "#", S = `${T.map(v => `${R}${v}`).join(", ")}`; d.addSectionBlock({ text: d.newMarkdownTextObject((0, x.t)("remind_audience_completed_at_time", s, { audience: S, description: A, time: (0, C.formatDateTimeForMsg)(c.completedAt, t) })), accessory: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete", s)), actionId: `delete-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.DANGER }) }) } else { let b; if (M) { let { url: T, msgAdditionalInfoPreview: R, metadata: { fromRoom: S, fromUser: v } = {} } = M; R || !S || !v ? b = d.newMarkdownTextObject(`About [this message](${T}) ${R} (completed at ${(0, C.formatDateTimeForMsg)(c.completedAt, t)}).`) : b = d.newMarkdownTextObject((0, x.t)(A ? "completed_reminder_in_list_with_message_with_note" : "completed_reminder_in_list_with_message", s, Object.assign(Object.assign({ messageUrl: T, userName: (0, ge.resolveTranslatedUserNameInfo)(v, r, s), roomName: (0, ge.resolveTranslatedRoomName)(S, S.type === "unknown" ? "" : S.url, s) }, A && { note: A }), { time: (0, C.formatDateTimeForMsg)(c.completedAt, t) }))) } else b = d.newMarkdownTextObject((0, x.t)("completed_reminder_in_list_with_description", s, { description: A, time: (0, C.formatDateTimeForMsg)(c.completedAt, t) })); d.addSectionBlock({ text: b, accessory: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("delete", s)), actionId: `delete-in-modal_${m}_${c.id}_${i ? "1" : "0"}`, style: Q.ButtonStyle.DANGER }) }) } d.addSectionBlock({ text: d.newMarkdownTextObject("") }) }), d.addDividerBlock()) } else d.addActionsBlock({ elements: [d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("view_completed_reminders", s)), actionId: "view-completed-tasks", value: `${m}` })] }); return d.addSectionBlock({ text: d.newPlainTextObject((0, x.t)("note_your_timezone_is_set_to", s, { timezone: (0, C.getFormattedTimezoneForMsg)((0, C.getTimezoneUtcString)(t)) })) }), { id: m, title: d.newPlainTextObject((0, x.t)("view_reminders", s)), close: d.newButtonElement({ text: d.newPlainTextObject((0, x.t)("close", s)) }), blocks: d.getBlocks() } }; be.createReminderListModal = ta; var ra = (n, e, r) => (n.addSectionBlock({ text: n.newMarkdownTextObject((0, x.t)("no_upcoming_reminders_to_view", r)) }), n.addActionsBlock({ elements: [n.newButtonElement({ text: n.newPlainTextObject((0, x.t)("view_completed_reminders", r)), actionId: "view-completed-tasks", value: `${e}` })] }), { id: e, title: n.newPlainTextObject((0, x.t)("view_reminders", r)), close: n.newButtonElement({ text: n.newPlainTextObject((0, x.t)("close", r)) }), blocks: n.getBlocks() }) }); var Wt = k(wt => { "use strict"; Object.defineProperty(wt, "__esModule", { value: !0 }); wt.usageExceededModal = void 0; var Br = require("@rocket.chat/apps-engine/definition/uikit/blocks"), ia = et(), Le = I(), na = ({ modify: n, language: e }) => { let r = n.getCreator().getBlockBuilder(); return r.addSectionBlock({ text: r.newMarkdownTextObject((0, Le.t)("max_5_reminders_limit_exhausted_message", e)) }), r.addActionsBlock({ elements: [r.newButtonElement({ text: r.newPlainTextObject((0, Le.t)("upgrade_license", e)), url: ia.License.LicensePurchasePageUrl, style: Br.ButtonStyle.PRIMARY }), r.newButtonElement({ text: r.newPlainTextObject((0, Le.t)("view_existing_reminders", e)), actionId: "view-all-reminders" })] }), { id: "usage-exhausted-modal", title: { type: Br.TextObjectType.PLAINTEXT, text: (0, Le.t)("usage_exhausted", e) }, close: r.newButtonElement({ text: r.newPlainTextObject((0, Le.t)("close", e)) }), blocks: r.getBlocks() } }; wt.usageExceededModal = na }); var Wr = k(Tt => { "use strict"; Object.defineProperty(Tt, "__esModule", { value: !0 }); Tt.RemindCommand = void 0; var Jt = et(), qr = W(), $r = ke(), aa = Ar(), oa = L(), X = I(), sa = de(), Vr = ve(), Ne = Se(), da = Pe(), _a = Wt(), Fr = class { constructor(e) { this.app = e, this.command = "remind", this.i18nParamsExample = "remind_command_params", this.i18nDescription = "remind_command_description", this.providesPreview = !1, this.log = e == null ? void 0 : e.getLogger() } async executor(e, r, t, a, i) { let [o] = e.getArguments(), { id: s } = e.getSender(), _ = await (0, sa.getUserPreferredLanguage)(r.getPersistenceReader(), s); switch (o) { case "list": case "listar": case "liste": case "lista": { await this.processListRemindersCommand(e, r, t, _); break } case "help": case "ajuda": case "helfen": case "pomoc": { await this.processHelpCommand(e, r, t, _); break } case void 0: default: { await this.processCreateReminderCommand(e, r, t, i, _); break } } } async processHelpCommand(e, r, t, a) { let i = e.getRoom(), o = e.getSender(), s = await (0, $r.hasValidLicense)(r, this.app.getLogger()), _ = t.getCreator().getBlockBuilder(); _.addSectionBlock({ text: _.newMarkdownTextObject((0, X.t)("help_command_greeting_message", a, { name: o.name })) }), _.addDividerBlock(), _.addSectionBlock({ text: _.newMarkdownTextObject((0, X.t)("help_command_basic_usage", a)) }), _.addSectionBlock({ text: _.newMarkdownTextObject((0, X.t)("help_command_message_reminder_usage", a)) }), _.addDividerBlock(), _.addSectionBlock({ text: _.newMarkdownTextObject((0, X.t)("control_shortcuts", a)) }), _.addActionsBlock({ elements: [_.newButtonElement({ text: _.newPlainTextObject((0, X.t)("create_a_reminder", a)), actionId: "create-reminder" }), _.newButtonElement({ text: _.newPlainTextObject((0, X.t)("view_all_reminders", a)), actionId: "view-all-reminders" }), _.newButtonElement({ text: _.newPlainTextObject((0, X.t)("set_language", a)), actionId: "set-language" })] }), _.addDividerBlock(), _.addSectionBlock({ text: _.newMarkdownTextObject((0, X.t)("need_more", a)) }), _.addActionsBlock({ elements: [...s ? [] : [_.newButtonElement({ text: _.newPlainTextObject((0, X.t)("upgrade_account", a)), url: Jt.License.LicensePurchasePageUrl })], _.newButtonElement({ text: _.newPlainTextObject((0, X.t)("more_help", a)), url: Jt.License.DocumentationLink }), _.newButtonElement({ text: _.newPlainTextObject((0, X.t)("contact_us", a)), url: Jt.License.ContactUsPageUrl })] }), await (0, aa.sendUserNotification)(this.app, r, t, i, o, void 0, void 0, _) } async processCreateReminderCommand(e, r, t, a, i) { let o = e.getTriggerId(); if (!o) throw new Error("Trigger ID is required"); let s = e.getArguments(); if (await oa.UserUsage.hasExceededUsage(r.getPersistenceReader(), a, e.getSender().id) && !await (0, $r.hasValidLicense)(r, this.app.getLogger())) { let g = (0, _a.usageExceededModal)({ modify: t, language: i }); return t.getUiController().openModalView(g, { triggerId: o }, e.getSender()) } if (s.length === 0) { let g = await (0, Ne.createTaskCreationModal)({ logger: this.app.getLogger(), modify: t, read: r, persistence: a, roomId: e.getRoom().id, userId: e.getSender().id, language: i }); return t.getUiController().openModalView(g, { triggerId: o }, e.getSender()) } let _ = s.join(" "), m = s[0], d = ""; if (m === "me" || m.startsWith("@") || m.startsWith("#")) { let g = []; if (m === "me") { d = s.slice(1).join(" "); let p = await (0, Ne.createTaskCreationModal)({ logger: this.app.getLogger(), modify: t, persistence: a, read: r, roomId: e.getRoom().id, userId: e.getSender().id, initialDescription: d, language: i }); return t.getUiController().openModalView(p, { triggerId: o }, e.getSender()) } else if (m.startsWith("@")) { if (g.push(m.substring(1)), s.length > 1) if (!s[1].startsWith("@")) d = s.slice(1).join(" "); else { let l = 1; for (; l < s.length && s[l].startsWith("@"); l++)g.push(s[l].substring(1)); d = s.slice(l).join(" ") } for (let f of g) if (!await r.getUserReader().getByUsername(f)) { let h = (0, Vr.dialogModal)({ title: "Error", text: (0, X.t)("user_with_username_not_found", i, { username: f }), modify: t, language: i }); return t.getUiController().openModalView(h, { triggerId: o }, e.getSender()) } let p = await (0, Ne.createTaskCreationModal)({ logger: this.app.getLogger(), modify: t, persistence: a, read: r, roomId: e.getRoom().id, userId: e.getSender().id, initialTargetAudience: g.map(f => `@${f}`).join(","), recipientType: qr.ReminderRecipientsType.USER, moreOptionsVisible: !0, initialDescription: d, language: i }); return t.getUiController().openModalView(p, { triggerId: o }, e.getSender()) } else if (m.startsWith("#")) { if (g.push(m.substring(1)), s.length > 1) if (!s[1].startsWith("#")) d = s.slice(1).join(" "); else { let l = 1; for (; l < s.length && s[l].startsWith("#"); l++)g.push(s[l].substring(1)); d = s.slice(l).join(" ") } for (let f of g) if (!await r.getRoomReader().getByName(f)) { let h = (0, Vr.dialogModal)({ title: "Error", text: (0, X.t)("room_with_name_not_found", i, { roomName: f }), modify: t, language: i }); return t.getUiController().openModalView(h, { triggerId: o }, e.getSender()) } let p = await (0, Ne.createTaskCreationModal)({ logger: this.app.getLogger(), modify: t, persistence: a, read: r, roomId: e.getRoom().id, userId: e.getSender().id, initialTargetAudience: g.map(f => `#${f}`).join(","), recipientType: qr.ReminderRecipientsType.CHANNEL, moreOptionsVisible: !0, initialDescription: d, language: i }); return t.getUiController().openModalView(p, { triggerId: o }, e.getSender()) } } else { d = _; let g = await (0, Ne.createTaskCreationModal)({ logger: this.app.getLogger(), modify: t, persistence: a, read: r, roomId: e.getRoom().id, userId: e.getSender().id, initialDescription: d, language: i }); return t.getUiController().openModalView(g, { triggerId: o }, e.getSender()) } } async processListRemindersCommand(e, r, t, a) { let i = e.getTriggerId(); if (!i) throw new Error("Trigger ID is required"); let o = await (0, da.createReminderListModal)({ modify: t, read: r, user: e.getSender(), showCompleted: !1, language: a, logger: this.app.getLogger() }); await t.getUiController().openModalView(o, { triggerId: i }, e.getSender()) } }; Tt.RemindCommand = Fr }); var qe = k(Be => { "use strict"; Object.defineProperty(Be, "__esModule", { value: !0 }); Be.JobId = void 0; var ca; (function (n) { n.REMINDER_JOB = "reminder-job", n.STATS_COLLECTOR_JOB = "stats-job", n.JOBS_RESTART_JOB = "jobs-restart-job" })(ca = Be.JobId || (Be.JobId = {})) }); var yt = k(ye => { "use strict"; Object.defineProperty(ye, "__esModule", { value: !0 }); ye.msgReminderCreationModal = ye.MsgReminderCreateModalViewIdPrefix = void 0; var Ee = W(), bt = G(), ma = _e(), Ht = L(), O = I(), Kt = J(); ye.MsgReminderCreateModalViewIdPrefix = "msgReminderCreateModal"; var la = async ({ persistence: n, modify: e, room: r, user: t, read: a, message: i, currentDuration: o, existingViewId: s, language: _ }) => { let m = s || (0, Kt.concatStrings)([ye.MsgReminderCreateModalViewIdPrefix, (0, Kt.uuid)()], "-"), d; if (s) { let h = await Ht.MsgReminderCreateModalUiData.findOne(a.getPersistenceReader(), { viewId: m }); if (!h) throw new Error(`Could not find existing ui data for viewId: ${m}`); h.currentDuration = o, await Ht.MsgReminderCreateModalUiData.insertOrUpdate(n, h), d = h } else { if (!i || !r || !t) throw new Error("message, room and user must be provided when creating a new reminder"); let { id: h } = i; if (!h) throw new Error("Error! No message id found while trying to create a reminder"); let { id: c } = r, { id: w } = t, { utcOffset: M } = t, { messageUrl: A } = await (0, ma.resolvePreviewTitleAndMessageUrlFromMessageId)(a, h), b = { viewId: m, roomId: c, userId: w, userUtcOffset: M, messageId: h, linkedMessage: { id: h, url: A }, currentDuration: o }; await Ht.MsgReminderCreateModalUiData.insertOrUpdate(n, b), d = b } let { linkedMessage: { url: g }, userUtcOffset: p } = d, f = new Date(new Date().getTime() + p * 60 * 60 * 1e3), l = e.getCreator().getBlockBuilder(); return l.addSectionBlock({ text: l.newMarkdownTextObject(`**${(0, O.t)("when_do_you_want_to_be_reminded", _)}**`) }), l.addActionsBlock({ elements: [l.newStaticSelectElement({ options: [{ text: l.newPlainTextObject((0, O.t)("custom", _)), value: Ee.Durations.CUSTOM }, { text: l.newPlainTextObject((0, O.t)("in_20_minutes", _)), value: Ee.Durations.MINUTES_20 }, { text: l.newPlainTextObject((0, O.t)("in_1_hour", _)), value: Ee.Durations.HOUR_1 }, { text: l.newPlainTextObject((0, O.t)("tomorrow_at_9AM", _)), value: Ee.Durations.TOMORROW }, { text: l.newPlainTextObject((0, O.t)("next_week_mon_9am", _)), value: Ee.Durations.NEXT_WEEK }], actionId: `linked-msg-reminder-change-duration-option_${m}`, initialValue: o, placeholder: l.newPlainTextObject((0, O.t)("when", _)) })] }), o === Ee.Durations.CUSTOM && (l.addDividerBlock(), l.addInputBlock({ blockId: "reminder", element: { placeholder: l.newPlainTextObject((0, O.t)("date", _)), type: "datepicker", actionId: "date", initialValue: (0, Kt.getOnlyDateAsString)(f) }, label: l.newPlainTextObject((0, O.t)("date", _)) }), l.addInputBlock({ blockId: "reminder", element: l.newStaticSelectElement({ placeholder: l.newPlainTextObject((0, O.t)("time", _)), actionId: "time", initialValue: (0, bt.getNearestTimeIn15MinInterval)(f), options: (0, bt.getTimeBlockOptions)() }), label: l.newPlainTextObject((0, O.t)("time", _)) }), l.addDividerBlock()), l.addSectionBlock({ text: l.newMarkdownTextObject(`[${(0, O.t)("connected_message_link", _)}](${g})`) }), l.addInputBlock({ blockId: "reminder", element: l.newPlainTextInputElement({ actionId: "description", multiline: !0, placeholder: l.newPlainTextObject((0, O.t)("remind_me_to", _)), initialValue: "" }), label: l.newPlainTextObject(`${(0, O.t)("add_a_note", _)} (${(0, O.t)("optional", _)})`) }), l.addDividerBlock(), l.addSectionBlock({ text: l.newPlainTextObject((0, O.t)("note_your_timezone_is_set_to", _, { timezone: (0, bt.getFormattedTimezoneForMsg)((0, bt.getTimezoneUtcString)(p)) })) }), { id: m, title: l.newPlainTextObject((0, O.t)("create_reminder", _)), submit: l.newButtonElement({ text: l.newPlainTextObject((0, O.t)("create", _)) }), close: l.newButtonElement({ text: l.newPlainTextObject((0, O.t)("cancel", _)) }), blocks: l.getBlocks() } }; ye.msgReminderCreationModal = la }); var Yr = k(Mt => { "use strict"; Object.defineProperty(Mt, "__esModule", { value: !0 }); Mt.ExecuteActionButtonHandler = void 0; var Xt = require("@rocket.chat/apps-engine/definition/rooms"), $e = W(), Jr = ke(), Hr = L(), ua = gt(), Kr = I(), pa = de(), ga = ve(), ha = yt(), fa = Se(), wa = Pe(), Xr = Wt(), Gr = class { constructor(e, r, t, a, i) { this.app = e, this.read = r, this.http = t, this.modify = a, this.persistence = i } async run(e) { let { actionId: r, room: t, user: a, message: i } = e.getInteractionData(), o = await (0, pa.getUserPreferredLanguage)(this.read.getPersistenceReader(), a.id); switch (r) { case "remind_me_about_this_msg_action": { if (!i) throw new Error("Message is required"); if (await Hr.UserUsage.hasExceededUsage(this.read.getPersistenceReader(), this.persistence, a.id) && !await (0, Jr.hasValidLicense)(this.read, this.app.getLogger())) { let _ = (0, Xr.usageExceededModal)({ modify: this.modify, language: o }); return e.getInteractionResponder().openModalViewResponse(_) } let s = await (0, ha.msgReminderCreationModal)({ read: this.read, persistence: this.persistence, modify: this.modify, room: t, user: a, message: i, currentDuration: $e.Durations.HOUR_1, language: o }); return e.getInteractionResponder().openModalViewResponse(s) } case "show_my_reminders_room_action": { let s = await (0, wa.createReminderListModal)({ modify: this.modify, read: this.read, user: a, showCompleted: !1, language: o, logger: this.app.getLogger() }); return e.getInteractionResponder().openModalViewResponse(s) } case "add_reminder_message_box_action": try { if (await Hr.UserUsage.hasExceededUsage(this.read.getPersistenceReader(), this.persistence, a.id) && !await (0, Jr.hasValidLicense)(this.read, this.app.getLogger())) { let p = (0, Xr.usageExceededModal)({ modify: this.modify, language: o }); return e.getInteractionResponder().openModalViewResponse(p) } let { type: s, slugifiedName: _ } = t, m = $e.ReminderRecipientsType.ME, d = ""; switch (s) { case Xt.RoomType.PRIVATE_GROUP: case Xt.RoomType.CHANNEL: { m = $e.ReminderRecipientsType.CHANNEL, d = `#${_}`; break } case Xt.RoomType.DIRECT_MESSAGE: await (0, ua.isDMWithAppBot)(this.read, this.app.getID(), t) ? m = $e.ReminderRecipientsType.ME : (m = $e.ReminderRecipientsType.USER, d = (await this.read.getRoomReader().getMembers(t.id)).filter(l => l.id !== a.id).map(l => `@${l.username}`).join(",")) }let g = await (0, fa.createTaskCreationModal)({ modify: this.modify, read: this.read, persistence: this.persistence, roomId: t.id, userId: a.id, recipientType: m, initialTargetAudience: d, logger: this.app.getLogger(), language: o }); return e.getInteractionResponder().openModalViewResponse(g) } catch (s) { this.app.getLogger().error(s); let _ = (0, ga.dialogModal)({ title: (0, Kr.t)("error", o), modify: this.modify, text: (0, Kr.t)("error_add_reminder_message_box_action_failed", o), language: o }); return e.getInteractionResponder().openModalViewResponse(_) } default: return e.getInteractionResponder().errorResponse() } } }; Mt.ExecuteActionButtonHandler = Gr }); var Qr = k(At => { "use strict"; Object.defineProperty(At, "__esModule", { value: !0 }); At.createReminderMsgBlocks = void 0; var Ta = require("@rocket.chat/apps-engine/definition/rooms"), Zr = require("@rocket.chat/apps-engine/definition/uikit"), Ve = W(), Gt = _e(), ne = I(), ba = J(), ya = async (n, e, r, t, a, i) => { let o = e.getCreator().getBlockBuilder(), { description: s, linkedMessage: _, frequency: m } = t, d = ""; if (_) { let { url: g, msgAdditionalInfoPreview: p, metadata: { fromRoom: f, fromUser: l } = {}, id: h } = _, c = ""; p || !f || !l ? c = `You asked me to remind you about [this message](${g}) ${p}.` : c = (0, ne.t)(s ? "reminder_message_with_message_with_note" : "reminder_message_with_message", i, Object.assign({ messageUrl: g, userName: (0, Gt.resolveTranslatedUserNameInfo)(l, a.username, i), roomName: (0, Gt.resolveTranslatedRoomName)(f, f.type === "unknown" ? "" : f.url, i) }, s && { note: s })), o.addSectionBlock({ text: o.newMarkdownTextObject(c) }), f && f.type === Ta.RoomType.DIRECT_MESSAGE && await (0, Gt.addLinkedMessagePreviewBlock)(o, r, n, h), d = c } else d = (0, ne.t)("reminder_message_with_description", i, { description: s }), o.addSectionBlock({ text: o.newMarkdownTextObject(d) }); return (0, ba.isRecurringReminder)(m) || (o.addActionsBlock({ elements: [o.newButtonElement({ text: o.newMarkdownTextObject((0, ne.t)("mark_as_completed", i)), style: Zr.ButtonStyle.PRIMARY, actionId: `mark-as-completed-in-msg_${t.id}` })] }), o.addActionsBlock({ elements: [o.newButtonElement({ text: o.newMarkdownTextObject((0, ne.t)("delete", i)), style: Zr.ButtonStyle.DANGER, actionId: `delete-in-msg_${t.id}` }), o.newStaticSelectElement({ placeholder: o.newPlainTextObject((0, ne.t)("snooze", i)), actionId: `snooze-reminder-in-msg_${t.id}`, options: [{ text: o.newPlainTextObject((0, ne.t)("20_minutes", i)), value: Ve.Durations.MINUTES_20 }, { text: o.newPlainTextObject((0, ne.t)("1_hour", i)), value: Ve.Durations.HOUR_1 }, { text: o.newPlainTextObject((0, ne.t)("3_hours", i)), value: Ve.Durations.HOUR_3 }, { text: o.newPlainTextObject((0, ne.t)("tomorrow_at_9AM", i)), value: Ve.Durations.TOMORROW }, { text: o.newPlainTextObject((0, ne.t)("next_week_mon_9am", i)), value: Ve.Durations.NEXT_WEEK }] })] })), { blocks: o, previewMsgForNotifications: d } }; At.createReminderMsgBlocks = ya }); var Fe = k(vt => { "use strict"; Object.defineProperty(vt, "__esModule", { value: !0 }); vt.ReminderJob = void 0; var Ma = require("@rocket.chat/apps-engine/definition/rooms"), ei = qe(), Aa = G(), Yt = _e(), ce = L(), kt = gt(), ti = I(), ka = de(), Zt = J(), xa = Qr(), xt = class { constructor(e) { this.app = e, this.jobName = ei.JobId.REMINDER_JOB } getReminderJob() { return { id: this.jobName, processor: this.processor.bind(this) } } async scheduleReminder(e, r, t, a) { let i = (0, Zt.uuid)(), o = { reminderId: t, localJobId: i }; return await e.scheduleOnce({ id: this.jobName, when: a, data: o }), await ce.JobData.insertOrUpdate(r, { jobId: i, jobName: this.jobName, jobContext: JSON.stringify(o), when: a }), i } async cancelReminder(e, r, t) { let a = await ce.Reminder.findOne(e.getPersistenceReader(), { id: t }); if (!a) throw new Error(`No reminder found with id ${t}`); let { jobId: i } = a; if (!i) throw new Error(`No jobId found with reminder id ${t}`); await ce.JobData.clearByQuery(r, { jobId: i }) } async processor(e, r, t, a, i) { var o, s, _; let { reminderId: m, localJobId: d } = e; if (!m || !d) throw new Error("No reminderId or jobId provided"); if (!await ce.JobData.findOne(r.getPersistenceReader(), { jobId: d })) { this.app.getLogger().error(`No jobData found with jobId ${d}. Perhaps the job has been cancelled?`); return } await ce.JobData.clearByQuery(i, { jobId: d, jobName: ei.JobId.REMINDER_JOB }); let p = await ce.Reminder.findOne(r.getPersistenceReader(), { id: m }); if (!p) throw new Error(`No reminder found with id ${m}`); let { createdBy: f, status: l, audience: h, frequency: c, dueDate: w } = p; if (l === "completed") throw new Error(`Reminder with id: ${m}, has already been completed`); let M = await r.getUserReader().getById(f); if (!M) throw new Error(`No reminder creator found with id ${f}`); let A = await r.getUserReader().getAppUser(this.app.getID()); if (!A) throw new Error(`No app user found with app id ${this.app.getID()}`); let b = await (0, ka.getUserPreferredLanguage)(r.getPersistenceReader(), f); if (h && h.type) { let { ids: T, type: R } = h; switch (R) { case "room": { for (let S of T) { let v = await r.getRoomReader().getByName(S); if (!v) throw new Error(`No room found with id ${S}`); try { await (0, kt.addBotToRoomIfNotAlreadyAdded)(v, r, t, A) } catch ($) { this.app.getLogger().error("Error adding bot to room", $) } await (0, Yt.sendRoomMessage)(t, A, v, (0, ti.t)("room_reminder_from_user_with_name_with_description", b, { reminderCreatorUsername: M.username, description: p.description })) } break } case "user": { for (let S of T) { let v = await r.getUserReader().getByUsername(S); if (!v) throw new Error(`No user found with id ${S}`); let $ = await (0, kt.findDMWithBotOrCreate)(r, t, v, A); await (0, Yt.sendRoomMessage)(t, A, $, (0, ti.t)("user_reminder_from_user_with_name_with_description", b, { reminderCreatorUsername: M.username, description: p.description })) } break } }(0, Zt.isRecurringReminder)(c) || await ce.Reminder.markReminderAsComplete(r, i, p) } else { let T = await (0, kt.findDMWithBotOrCreate)(r, t, M, A); if (p.linkedMessage) try { let { roomId: $ } = p, Qe = await r.getRoomReader().getById($); if (!Qe) throw new Error(`No room found with id ${$}`); await (0, kt.addBotToRoomIfNotAlreadyAdded)(Qe, r, t, A) } catch ($) { this.app.getLogger().error("Something went wrong while trying to add bot user to room", $) } let { blocks: R, previewMsgForNotifications: S } = await (0, xa.createReminderMsgBlocks)(r, t, this.app.getLogger(), p, M, b), v = await (0, Yt.sendRoomMessage)(t, A, T, S, void 0, R, ((_ = (s = (o = p.linkedMessage) === null || o === void 0 ? void 0 : o.metadata) === null || s === void 0 ? void 0 : s.fromRoom) === null || _ === void 0 ? void 0 : _.type) === Ma.RoomType.DIRECT_MESSAGE); await ce.Reminder.insertOrUpdate(i, Object.assign(Object.assign({}, p), { messageId: v, jobId: void 0 })) } if (this.app.getLogger().info(`Reminder ${m} has been sent out`), (0, Zt.isRecurringReminder)(c)) { this.app.getLogger().info(`Scheduling next reminder for ${m}`); let T = (0, Aa.getNextScheduleTime)(w, c); p.dueDate = T; let R = await new xt(this.app).scheduleReminder(t.getScheduler(), i, p.id, p.dueDate); p.jobId = R, await ce.Reminder.insertOrUpdate(i, p), this.app.getLogger().info(`Scheduled next reminder for ${T} with reminderId ${m}`) } } }; vt.ReminderJob = xt }); var Qt = k(ee => { "use strict"; Object.defineProperty(ee, "__esModule", { value: !0 }); ee.getLanguageDisplayTextFromCode = ee.getLanguageBlockOptions = void 0; var j = I(), va = (n, e) => [{ text: n.newPlainTextObject((0, ee.getLanguageDisplayTextFromCode)(j.Language.en, e)), value: j.Language.en }, { text: n.newPlainTextObject((0, ee.getLanguageDisplayTextFromCode)(j.Language.pt, e)), value: j.Language.pt }, { text: n.newPlainTextObject((0, ee.getLanguageDisplayTextFromCode)(j.Language.de, e)), value: j.Language.de }, { text: n.newPlainTextObject((0, ee.getLanguageDisplayTextFromCode)(j.Language.ru, e)), value: j.Language.ru }, { text: n.newPlainTextObject((0, ee.getLanguageDisplayTextFromCode)(j.Language.pl, e)), value: j.Language.pl }]; ee.getLanguageBlockOptions = va; var Ra = (n, e) => { switch (n) { case j.Language.en: return (0, j.t)("language_en", e); case j.Language.de: return (0, j.t)("language_de", e); case j.Language.pt: return (0, j.t)("language_pt", e); case j.Language.ru: return (0, j.t)("language_ru", e); case j.Language.pl: return (0, j.t)("language_pl", e) } }; ee.getLanguageDisplayTextFromCode = Ra }); var er = k(Me => { "use strict"; Object.defineProperty(Me, "__esModule", { value: !0 }); Me.setPreferredLanguageModal = Me.SetPreferredLanguageModalViewIdPrefix = void 0; var We = I(), ri = J(), Sa = Qt(); Me.SetPreferredLanguageModalViewIdPrefix = "setPreferredLanguageModal"; var Pa = ({ modify: n, existingLanguage: e }) => { let r = (0, ri.concatStrings)([Me.SetPreferredLanguageModalViewIdPrefix, (0, ri.uuid)()], "-"), t = n.getCreator().getBlockBuilder(); return t.addInputBlock({ blockId: "block", element: t.newStaticSelectElement({ placeholder: t.newPlainTextObject((0, We.t)("language", e)), actionId: "language", initialValue: e, options: (0, Sa.getLanguageBlockOptions)(t, e) }), label: t.newPlainTextObject((0, We.t)("language", e)) }), { id: r, title: t.newPlainTextObject((0, We.t)("set_preferred_language", e)), close: t.newButtonElement({ text: t.newPlainTextObject((0, We.t)("close", e)) }), submit: t.newButtonElement({ text: t.newPlainTextObject((0, We.t)("update_my_preference", e)) }), blocks: t.getBlocks() } }; Me.setPreferredLanguageModal = Pa }); var tr = k(Ie => { "use strict"; Object.defineProperty(Ie, "__esModule", { value: !0 }); Ie.submitBulkDeleteConfirmationModal = Ie.bulkDeleteConfirmationModal = void 0; var Ea = require("@rocket.chat/apps-engine/definition/uikit"), Ia = _e(), Je = L(), me = I(), Ua = de(); async function za({ modify: n, persistence: e, reminderIds: r, remindersType: t, viewId: a, language: i }) { await Je.BulkDeleteConfirmationModalUiData.insertOrUpdate(e, { viewId: a, reminderIds: r, remindersType: t }); let o = n.getCreator().getBlockBuilder(); return o.addSectionBlock({ text: o.newMarkdownTextObject((0, me.t)("bulk_delete_reminders_confirmation_message", i, { total: r.length, remindersType: (0, me.t)(t, i) })) }), { id: a, title: o.newPlainTextObject((0, me.t)("delete_reminder", i)), submit: o.newButtonElement({ text: o.newPlainTextObject((0, me.t)("yes_delete_reminders", i)), style: Ea.ButtonStyle.DANGER }), close: o.newButtonElement({ text: o.newPlainTextObject((0, me.t)("no_cancel", i)) }), blocks: o.getBlocks() } } Ie.bulkDeleteConfirmationModal = za; var Da = async ({ context: n, modify: e, read: r, persistence: t, app: a }) => { let { view: { id: i }, user: { id: o } = { id: "" } } = n.getInteractionData(), s = await (0, Ua.getUserPreferredLanguage)(r.getPersistenceReader(), o), _ = await Je.BulkDeleteConfirmationModalUiData.findOne(r.getPersistenceReader(), { viewId: i }); if (!_) throw new Error("Error! No bulk delete data found"); let { reminderIds: m, remindersType: d } = _, g = await r.getUserReader().getAppUser(a.getID()); if (!g) throw new Error("Error! Unable to get the app user"); if (!m.length) return n.getInteractionResponder().errorResponse(); for (let f of m) { let l = await Je.Reminder.findOne(r.getPersistenceReader(), { id: f }); if (!l) { a.getLogger().error(`Error! No reminder found with id ${f} while bulk deleting reminders.`); continue } await Je.Reminder.clearByQuery(t, { id: f }); let { messageId: h } = l; if (!h) { a.getLogger().error(`Error! Unable to get the messageId for reminder with id ${f} while trying to perform bulk delete operation.`); continue } await (0, Ia.updateRoomMessageAfterRemovingPreviousContent)(e, h, g, { text: "" }, !0) } d === "past" && await Je.UserUsage.decrementRemindersCreatedCount(r.getPersistenceReader(), t, o, m.length); let p = ja(e, i, d, s); return n.getInteractionResponder().updateModalViewResponse(p) }; Ie.submitBulkDeleteConfirmationModal = Da; var ja = (n, e, r, t) => { let a = n.getCreator().getBlockBuilder(); return a.addSectionBlock({ text: a.newMarkdownTextObject((0, me.t)("delete_reminders_success_message", t, { remindersType: r })) }), a.addActionsBlock({ elements: [a.newButtonElement({ text: a.newPlainTextObject((0, me.t)("view_all_reminders", t)), actionId: `view-all-reminders_${e}` })] }), { id: e, title: a.newPlainTextObject((0, me.t)("delete_reminder", t)), close: a.newButtonElement({ text: a.newPlainTextObject((0, me.t)("okay_close", t)) }), blocks: a.getBlocks() } } }); var ni = k(Rt => { "use strict"; Object.defineProperty(Rt, "__esModule", { value: !0 }); Rt.ExecuteBlockActionHandler = void 0; var rr = require("@rocket.chat/apps-engine/definition/rooms"), Oa = W(), Ca = Fe(), K = _e(), le = L(), P = I(), F = de(), ir = J(), he = ve(), La = yt(), Na = er(), nr = Se(), Ba = tr(), He = Pe(), ii = class { constructor(e, r, t, a, i) { this.app = e, this.read = r, this.http = t, this.modify = a, this.persistence = i } async run(e) { let r = e.getInteractionData(), { actionId: t } = r, [a, ...i] = t.split("_"); try { switch (a) { case "create-reminder": return await this.processCreateAction(e); case "view-completed-tasks": return await this.processViewCompletedTasksAction(e); case "mark-as-completed-in-modal": return await this.processMarkAsCompletedInModalAction(e, i); case "mark-as-completed-in-msg": return await this.processMarkAsCompletedInMsgAction(e, i); case "delete-in-modal": return await this.processDeleteInModalAction(e, i); case "delete-in-msg": return await this.processDeleteInMsgAction(e, i); case "delete-all-past-reminders": return await this.processBulkDeleteRemindersAction(e, i, "past"); case "delete-all-completed-reminders": return await this.processBulkDeleteRemindersAction(e, i, "completed"); case "view-all-reminders": return await this.processViewAllRemindersAction(e, i); case "snooze-reminder-in-msg": return await this.processSnoozeReminderInMsgAction(e, i); case "snooze-reminder-in-modal": return await this.processSnoozeReminderInModalAction(e, i); case "hide-msg": return await this.processHideMsgAction(e); case "create-reminder-recipient-type-change": return await this.processCreateReminderRecipientTypeChangeAction(e, i); case "create-reminder-more-options": return await this.processCreateReminderMoreOptionsAction(e, i); case "linked-msg-reminder-change-duration-option": return await this.processLinkedMsgReminderChangeDurationOptionAction(e, i); case "set-language": return await this.processSetLanguageAction(e) } } catch (o) { this.app.getLogger().error(o) } return e.getInteractionResponder().successResponse() } async processSetLanguageAction(e) { let { user: r } = e.getInteractionData(), t = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), r.id), a = (0, Na.setPreferredLanguageModal)({ modify: this.modify, existingLanguage: t }); return e.getInteractionResponder().openModalViewResponse(a) } async processLinkedMsgReminderChangeDurationOptionAction(e, r) { let [t] = r, { value: a, user: { id: i } = { id: "" } } = e.getInteractionData(); if (!a) throw new Error("No value provided while trying to change duration option"); let o = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), i), s = await (0, La.msgReminderCreationModal)({ read: this.read, persistence: this.persistence, modify: this.modify, currentDuration: a, existingViewId: t, language: o }); return e.getInteractionResponder().updateModalViewResponse(s) } async processCreateReminderMoreOptionsAction(e, r) { let [t, a] = r, { user: { id: i } = { id: "" } } = e.getInteractionData(), o = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), i), s = await (0, nr.createTaskCreationModal)({ logger: this.app.getLogger(), existingViewId: t, recipientType: Oa.ReminderRecipientsType.ME, modify: this.modify, read: this.read, persistence: this.persistence, existingUserUtcOffset: Number(a), moreOptionsVisible: !0, language: o }); return e.getInteractionResponder().updateModalViewResponse(s) } async processCreateReminderRecipientTypeChangeAction(e, r) { let { value: t, user: { id: a } = { id: "" } } = e.getInteractionData(); if (!t) throw new Error("No value provided for reminder recipient type change"); let i = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), a), [o, s] = r, _ = await (0, nr.createTaskCreationModal)({ logger: this.app.getLogger(), existingViewId: o, recipientType: t, modify: this.modify, read: this.read, persistence: this.persistence, existingUserUtcOffset: Number(s), moreOptionsVisible: !0, language: i }); return e.getInteractionResponder().updateModalViewResponse(_) } async processHideMsgAction(e) { let { message: { id: r } = { id: null }, user: { id: t } = { id: "" } } = e.getInteractionData(); if (!r) throw new Error("Message id is not defined"); let a = await this.read.getUserReader().getAppUser(this.app.getID()); if (!a) throw new Error("Error! Unable to get the app user"); let i = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), t), o = this.modify.getCreator().getBlockBuilder(); return o.addContextBlock({ elements: [o.newMarkdownTextObject(`__${(0, P.t)("message_is_hidden", i)}__`)] }), await (0, K.updateRoomMessageAfterRemovingPreviousContent)(this.modify, r, a, { blocks: o, text: " " }, !0), e.getInteractionResponder().successResponse() } async processSnoozeReminderInModalAction(e, r) { let [t, a, i] = r, { user: { id: o } = { id: "" } } = e.getInteractionData(), s = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), o), _ = await le.Reminder.findOne(this.read.getPersistenceReader(), { id: a }); if (!_) return e.getInteractionResponder().openModalViewResponse((0, he.dialogModal)({ title: (0, P.t)("something_went_wrong", s), text: (0, P.t)("error_unable_to_find_reminder", s), modify: this.modify, language: s })); let { dueDate: m, messageId: d, description: g, linkedMessage: p } = _, { value: f, user: { utcOffset: l, username: h } } = e.getInteractionData(); if (!f) throw new Error("Value is not defined"); let { nextSnoozeDate: c, nextSnoozeMsg: w } = (0, ir.getNextSnoozedDateAndMsg)(m, f, l, s), { errorModal: M } = await this._snoozeReminderHelper(e, _, c, s); if (M) return M; try { if (!d) throw new Error(`Error! Unable to get the messageId for reminder with id ${a}. Perhaps the reminder was not yet sent to the room?`); let b = await this.read.getUserReader().getAppUser(this.app.getID()); if (!b) throw new Error("Error! Unable to get the app user"); let T = this.modify.getCreator().getBlockBuilder(); if (p) { let { url: R, msgAdditionalInfoPreview: S, metadata: { fromRoom: v, fromUser: $ } = {}, id: Qe } = p, Lt = (0, P.t)("reminder_snoozed", s, { nextScheduledTime: w }); S || !v || !$ ? Lt = `This reminder has been snoozed!  I'll remind you about [this message](${R}) ${S}, ${w}.` : Lt = (0, P.t)(g ? "reminder_snoozed_for_message_with_note" : "reminder_snoozed_for_message", s, Object.assign({ messageUrl: R, userName: (0, K.resolveTranslatedUserNameInfo)($, h, s), roomName: (0, K.resolveTranslatedRoomName)(v, v.type === "unknown" ? "" : v.url, s), nextScheduledTime: w }, g && { note: g })), T.addSectionBlock({ text: T.newMarkdownTextObject(Lt) }), v && v.type === rr.RoomType.DIRECT_MESSAGE && await (0, K.addLinkedMessagePreviewBlock)(T, this.app.getLogger(), this.read, Qe) } else { let R = (0, P.t)("reminder_snoozed_with_description", s, { description: _.description, nextScheduledTime: w }); T.addSectionBlock({ text: T.newMarkdownTextObject(R) }) } T.addActionsBlock({ elements: [T.newButtonElement({ text: T.newPlainTextObject((0, P.t)("view_all_reminders", s)), actionId: "view-all-reminders" }), T.newButtonElement({ text: T.newPlainTextObject((0, P.t)("hide_this_message", s)), actionId: "hide-msg" })] }), await (0, K.updateRoomMessageAfterRemovingPreviousContent)(this.modify, d, b, { blocks: T, text: " " }) } catch (b) { this.app.getLogger().error(b) } let A = await (0, He.createReminderListModal)({ modify: this.modify, read: this.read, user: e.getInteractionData().user, showCompleted: i === "1", existingViewId: t, language: s, logger: this.app.getLogger() }); return e.getInteractionResponder().updateModalViewResponse(A) } async processSnoozeReminderInMsgAction(e, r) { let [t] = r, { user: { id: a } = { id: "" } } = e.getInteractionData(), i = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), a), o = await le.Reminder.findOne(this.read.getPersistenceReader(), { id: t }); if (!o) return e.getInteractionResponder().openModalViewResponse((0, he.dialogModal)({ title: (0, P.t)("something_went_wrong", i), text: (0, P.t)("error_unable_to_find_reminder", i), modify: this.modify, language: i })); let { dueDate: s, messageId: _, linkedMessage: m, description: d } = o, { value: g, user: { utcOffset: p, username: f } } = e.getInteractionData(); if (!g) throw new Error("Value is not defined"); let { nextSnoozeDate: l, nextSnoozeMsg: h } = (0, ir.getNextSnoozedDateAndMsg)(s, g, p, i), { errorModal: c } = await this._snoozeReminderHelper(e, o, l, i); if (c) return c; try { if (!_) throw new Error(`Error! Unable to get the messageId for reminder with id ${t}. Perhaps the reminder was not yet sent to the room?`); let w = await this.read.getUserReader().getAppUser(this.app.getID()); if (!w) throw new Error("Error! Unable to get the app user"); let M = this.modify.getCreator().getBlockBuilder(); if (m) { let { url: A, msgAdditionalInfoPreview: b, metadata: { fromRoom: T, fromUser: R } = {}, id: S } = m, v = (0, P.t)("reminder_snoozed", i, { nextScheduledTime: h }); b || !T || !R ? v = `This reminder has been snoozed!  I'll remind you about [this message](${A}) ${b}, ${h}.` : v = (0, P.t)(d ? "reminder_snoozed_for_message_with_note" : "reminder_snoozed_for_message", i, Object.assign({ messageUrl: A, userName: (0, K.resolveTranslatedUserNameInfo)(R, f, i), roomName: (0, K.resolveTranslatedRoomName)(T, T.type === "unknown" ? "" : T.url, i), nextScheduledTime: h }, d && { note: d })), M.addSectionBlock({ text: M.newMarkdownTextObject(v) }), T && T.type === rr.RoomType.DIRECT_MESSAGE && await (0, K.addLinkedMessagePreviewBlock)(M, this.app.getLogger(), this.read, S) } else { let A = (0, P.t)("reminder_snoozed_with_description", i, { description: o.description, nextScheduledTime: h }); M.addSectionBlock({ text: M.newMarkdownTextObject(A) }) } M.addActionsBlock({ elements: [M.newButtonElement({ text: M.newPlainTextObject((0, P.t)("view_all_reminders", i)), actionId: "view-all-reminders" }), M.newButtonElement({ text: M.newPlainTextObject((0, P.t)("hide_this_message", i)), actionId: "hide-msg" })] }), await (0, K.updateRoomMessageAfterRemovingPreviousContent)(this.modify, _, w, { blocks: M, text: " " }) } catch (w) { this.app.getLogger().error(w) } return e.getInteractionResponder().successResponse() } async processViewAllRemindersAction(e, r) { let [t] = r, { user: { id: a } = { id: "" } } = e.getInteractionData(), i = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), a), o = await (0, He.createReminderListModal)(Object.assign(Object.assign({ modify: this.modify, read: this.read, user: e.getInteractionData().user, showCompleted: !1 }, t && { existingViewId: t }), { language: i, logger: this.app.getLogger() })); return t ? e.getInteractionResponder().updateModalViewResponse(o) : e.getInteractionResponder().openModalViewResponse(o) } async processBulkDeleteRemindersAction(e, r, t) { let [a] = r, { user: { id: i } = { id: "" } } = e.getInteractionData(), o = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), i), { value: s } = e.getInteractionData(); if (!s) { let m = (0, he.dialogModal)({ title: (0, P.t)("something_went_wrong", o), text: (0, P.t)("error_unable_to_find_reminder", o), modify: this.modify, language: o }); return e.getInteractionResponder().openModalViewResponse(m) } let _ = await (0, Ba.bulkDeleteConfirmationModal)({ modify: this.modify, remindersType: t, persistence: this.persistence, reminderIds: s.split(","), viewId: a, language: o }); return e.getInteractionResponder().updateModalViewResponse(_) } async processDeleteInMsgAction(e, r) { let [t] = r, { user: { id: a } = { id: "" } } = e.getInteractionData(), i = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), a), { errorModal: o } = await this._deleteReminderHelper(e, t, i); if (o) return o; let s = (0, he.dialogModal)({ title: (0, P.t)("success", i), text: (0, P.t)("reminder_delete_success", i), modify: this.modify, language: i }); return e.getInteractionResponder().openModalViewResponse(s) } async processDeleteInModalAction(e, r) { let [t, a, i] = r, { user: { id: o } = { id: "" } } = e.getInteractionData(), s = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), o), { errorModal: _ } = await this._deleteReminderHelper(e, a, s); if (_) return _; let m = await (0, He.createReminderListModal)({ modify: this.modify, read: this.read, user: e.getInteractionData().user, showCompleted: i === "1", existingViewId: t, language: s, logger: this.app.getLogger() }); return e.getInteractionResponder().updateModalViewResponse(m) } async processMarkAsCompletedInMsgAction(e, r) { let [t] = r, { user: { id: a } = { id: "" } } = e.getInteractionData(), i = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), a), { errorModal: o } = await this._markReminderAsCompletedHelper(e, t, i); return o || e.getInteractionResponder().successResponse() } async processMarkAsCompletedInModalAction(e, r) { let [t, a, i] = r, { user: { id: o } = { id: "" } } = e.getInteractionData(), s = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), o), { errorModal: _ } = await this._markReminderAsCompletedHelper(e, a, s); if (_) return _; let m = await (0, He.createReminderListModal)({ modify: this.modify, read: this.read, user: e.getInteractionData().user, showCompleted: i === "1", existingViewId: t, language: s, logger: this.app.getLogger() }); return e.getInteractionResponder().updateModalViewResponse(m) } async processViewCompletedTasksAction(e) { let { user: { id: r } = { id: "" }, value: t } = e.getInteractionData(); if (!t) throw new Error("Error! Unable to get the previous modal viewId while trying to show completed tasks"); let a = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), r), i = await (0, He.createReminderListModal)({ modify: this.modify, read: this.read, user: e.getInteractionData().user, showCompleted: !0, existingViewId: t, language: a, logger: this.app.getLogger() }); return e.getInteractionResponder().updateModalViewResponse(i) } async processCreateAction(e) { let { room: r, user: { id: t } = { id: "" } } = e.getInteractionData(); if (!r) throw new Error("Error! Unable to get the room"); let a = await (0, F.getUserPreferredLanguage)(this.read.getPersistenceReader(), t), i = await (0, nr.createTaskCreationModal)({ logger: this.app.getLogger(), modify: this.modify, read: this.read, persistence: this.persistence, roomId: r.id, userId: t, language: a }); return e.getInteractionResponder().openModalViewResponse(i) } async _snoozeReminderHelper(e, r, t, a) { if (r.status === "completed") return { errorModal: e.getInteractionResponder().openModalViewResponse((0, he.dialogModal)({ title: (0, P.t)("error", a), text: (0, P.t)("reminder_already_completed", a), modify: this.modify, language: a })) }; if (r.dueDate.getTime() > new Date().getTime()) return { errorModal: e.getInteractionResponder().openModalViewResponse((0, he.dialogModal)({ title: (0, P.t)("error", a), text: (0, P.t)("reminder_already_snoozed", a), modify: this.modify, language: a })) }; let { jobId: i } = r; i && await le.JobData.clearByQuery(this.persistence, { jobId: i }); let o = await new Ca.ReminderJob(this.app).scheduleReminder(this.modify.getScheduler(), this.persistence, r.id, t); return await le.Reminder.insertOrUpdate(this.persistence, Object.assign(Object.assign({}, r), { dueDate: t, jobId: o })), {} } async _markReminderAsCompletedHelper(e, r, t) { let a = await le.Reminder.findOne(this.read.getPersistenceReader(), { id: r }); if (!a) { let m = (0, he.dialogModal)({ title: (0, P.t)("something_went_wrong", t), text: (0, P.t)("error_unable_to_find_reminder", t), modify: this.modify, language: t }); return { errorModal: e.getInteractionResponder().openModalViewResponse(m) } } let { user: { username: i } } = e.getInteractionData(), { messageId: o, linkedMessage: s, description: _ } = a; await le.Reminder.markReminderAsComplete(this.read, this.persistence, a); try { if (!o) throw new Error(`Error! Unable to get the messageId for reminder with id ${r}. Perhaps the reminder was not yet sent to the room?`); let m = await this.read.getUserReader().getAppUser(this.app.getID()); if (!m) throw new Error("Error! Unable to get the app user"); let d = this.modify.getCreator().getBlockBuilder(); if (s) try { let g = (0, P.t)("reminder_marked_as_completed", t), { url: p, msgAdditionalInfoPreview: f, metadata: { fromRoom: l, fromUser: h } = {}, id: c } = s; f || !l || !h ? g = `Ok, I've marked the reminder about [this message](${p}) ${f} as complete` : g = (0, P.t)(_ ? "reminder_completed_for_message_with_note" : "reminder_completed_for_message", t, Object.assign({ messageUrl: p, userName: (0, K.resolveTranslatedUserNameInfo)(h, i, t), roomName: (0, K.resolveTranslatedRoomName)(l, l.type === "unknown" ? "" : l.url, t) }, _ && { note: _ })), d.addSectionBlock({ text: d.newMarkdownTextObject(g) }), l && l.type === rr.RoomType.DIRECT_MESSAGE && await (0, K.addLinkedMessagePreviewBlock)(d, this.app.getLogger(), this.read, c) } catch (g) { this.app.getLogger().error(`Something went wrong while trying to resolve the additional info for reminder with id ${r}`, g) } else { let g = (0, P.t)("reminder_completed_with_description", t, { description: _ }); d.addSectionBlock({ text: d.newMarkdownTextObject(g) }) } d.addActionsBlock({ elements: [d.newButtonElement({ text: d.newPlainTextObject((0, P.t)("view_all_reminders", t)), actionId: "view-all-reminders" }), d.newButtonElement({ text: d.newPlainTextObject((0, P.t)("hide_this_message", t)), actionId: "hide-msg" })] }), await (0, K.updateRoomMessageAfterRemovingPreviousContent)(this.modify, o, m, { blocks: d }) } catch (m) { this.app.getLogger().error(m) } return {} } async _deleteReminderHelper(e, r, t) { let a = await le.Reminder.findOne(this.read.getPersistenceReader(), { id: r }); if (!a) { let i = (0, he.dialogModal)({ title: (0, P.t)("something_went_wrong", t), text: (0, P.t)("error_unable_to_find_reminder", t), modify: this.modify, language: t }); return { errorModal: e.getInteractionResponder().openModalViewResponse(i) } } if (await le.Reminder.clearByQuery(this.persistence, { id: r }), a.status === "active" && await le.UserUsage.decrementRemindersCreatedCount(this.read.getPersistenceReader(), this.persistence, a.createdBy, 1), (0, ir.isRecurringReminder)(a.frequency)) return {}; try { if (!a.messageId) { if (a.audience) return {}; throw new Error(`Error! Unable to get the messageId for reminder with id ${r} while trying to perform delete operation. Perhaps the reminder was not yet sent to the room?`) } let i = await this.read.getUserReader().getAppUser(this.app.getID()); if (!i) throw new Error("Error! Unable to get the app user"); await (0, K.updateRoomMessageAfterRemovingPreviousContent)(this.modify, a.messageId, i, { text: "" }, !0) } catch (i) { this.app.getLogger().error(i) } return {} } }; Rt.ExecuteBlockActionHandler = ii }); var ar = k(St => { "use strict"; Object.defineProperty(St, "__esModule", { value: !0 }); St.reminderCreatedModal = void 0; var qa = require("@rocket.chat/apps-engine/definition/uikit"), $a = G(), Ke = I(), Va = ({ modify: n, viewId: e, reminderDueDate: r, userUtcOffset: t, language: a }) => { let i = n.getCreator().getBlockBuilder(); return i.addSectionBlock({ text: i.newMarkdownTextObject((0, Ke.t)("okay_i_will_remind_you_about_this_at_time", a, { time: (0, $a.formatDateTimeForMsg)(r, t) })) }), i.addActionsBlock({ elements: [i.newButtonElement({ text: i.newMarkdownTextObject((0, Ke.t)("view_all_reminders", a)), actionId: "view-all-reminders", style: qa.ButtonStyle.PRIMARY })] }), i.addSectionBlock({ text: i.newMarkdownTextObject((0, Ke.t)("tip_on_how_to_list_all_reminders", a)) }), { id: e, title: i.newMarkdownTextObject((0, Ke.t)("reminder_created", a)), close: i.newButtonElement({ text: i.newPlainTextObject((0, Ke.t)("close", a)) }), blocks: i.getBlocks() } }; St.reminderCreatedModal = Va }); var oi = k(Pt => { "use strict"; Object.defineProperty(Pt, "__esModule", { value: !0 }); Pt.submitMsgReminderCreateModal = void 0; var or = L(), Xe = J(), Ge = G(), Fa = Fe(), Wa = _e(), ai = W(), Ja = ar(), Ye = I(), Ha = de(), Ka = async ({ app: n, context: e, modify: r, read: t, persistence: a }) => { let { view: { id: i, state: o }, user: { id: s } = { id: "" } } = e.getInteractionData(), _ = await (0, Ha.getUserPreferredLanguage)(t.getPersistenceReader(), s), m = await or.MsgReminderCreateModalUiData.findOne(t.getPersistenceReader(), { viewId: i }); if (!m) throw new Error("Error! No answer poll data found"); let { errors: d, reminder: g } = await Xa(t, n.getLogger(), m, o, _); if (d && Object.keys(d).length > 0) return e.getInteractionResponder().viewErrorResponse({ viewId: i, errors: d }); if (!g) return e.getInteractionResponder().viewErrorResponse({ viewId: i, errors: { name: (0, Ye.t)("please_complete_this_required_field", _) } }); let p = await new Fa.ReminderJob(n).scheduleReminder(r.getScheduler(), a, g.id, g.dueDate); g.jobId = p, await or.Reminder.insertOrUpdate(a, g), await or.UserUsage.incrementRemindersCreatedCount(t.getPersistenceReader(), a, g.createdBy); let { userUtcOffset: f } = m, l = (0, Ja.reminderCreatedModal)({ modify: r, reminderDueDate: g.dueDate, userUtcOffset: f, viewId: i, language: _ }); return e.getInteractionResponder().updateModalViewResponse(l) }; Pt.submitMsgReminderCreateModal = Ka; var Xa = async (n, e, r, t, a) => { let { roomId: i, userId: o, userUtcOffset: s, linkedMessage: _, currentDuration: m } = r, d; if (m === ai.Durations.CUSTOM) { let h = new Date(new Date().getTime() + s * 60 * 60 * 1e3); (!t || !t.reminder) && (t = { reminder: { date: (0, Xe.getOnlyDateAsString)(h), time: (0, Ge.getNearestTimeIn15MinInterval)(h) } }), t.reminder && t.reminder.date === void 0 && (t.reminder.date = (0, Xe.getOnlyDateAsString)(h)), t.reminder && t.reminder.time === void 0 && (t.reminder.time = (0, Ge.getNearestTimeIn15MinInterval)(h)); let { reminder: { date: c, time: w } = {} } = t; if (!c) { if (c === "") return { errors: { date: (0, Ye.t)("please_complete_this_required_field", a) } }; c = (0, Xe.getOnlyDateAsString)(h) } if (!w) { if (w === "") return { errors: { time: (0, Ye.t)("please_complete_this_required_field", a) } }; w = (0, Ge.getNearestTimeIn15MinInterval)(h) } let M = (0, Ge.parseDateAndTimeStringFromUI)(c, w, s || 0); if (M.getTime() < new Date().getTime()) return { errors: { date: (0, Ye.t)("please_give_a_valid_time_in_future", a), time: (0, Ye.t)("please_give_a_valid_time_in_future", a) } }; d = M } else { let { nextSnoozeDate: h } = (0, Xe.getNextSnoozedDateAndMsg)(new Date, m, s, a); d = h } let g = await n.getUserReader().getById(o); if (!g) throw new Error(`Error! No user found with id: ${o}`); let { reminder: { description: p } = {} } = t, f = await (0, Wa.resolveAdditionalInfoForReminderWithLinkedMessage)(n, e, { description: p || "", linkedMessage: _ }, g); if (!f) throw new Error("Error! Unable to get message metadata"); return { reminder: { id: (0, Xe.uuid)(), roomId: i, createdBy: o, createdAt: (0, Ge.getDateWithUTCOffset)(new Date, 0), description: p || "", dueDate: d, status: "active", timeZone: { utcOffset: s || 0 }, linkedMessage: Object.assign(Object.assign({}, _), { metadata: f }), frequency: ai.RecurringReminderFrequencies.DO_NOT_REPEAT } } } }); var di = k(Et => { "use strict"; Object.defineProperty(Et, "__esModule", { value: !0 }); Et.submitSetPreferredLanguageModal = void 0; var Ga = L(), si = I(), sr = de(), Ya = Qt(), Za = ve(), Qa = async ({ context: n, modify: e, read: r, persistence: t }) => { let { user: a, view: { id: i } } = n.getInteractionData(), { view: { state: o } } = n.getInteractionData(); o || (o = { block: { language: await (0, sr.getUserPreferredLanguage)(r.getPersistenceReader(), a.id) } }); let { language: s } = o.block; if (!(0, sr.isSupportedLanguage)(s)) return n.getInteractionResponder().viewErrorResponse({ viewId: i, errors: { language: (0, si.t)("unsupported_language", await (0, sr.getUserPreferredLanguage)(r.getPersistenceReader(), a.id)) } }); await Ga.UserPreference.insertOrUpdate(t, { userId: a.id, language: s }); let _ = (0, Za.dialogModal)({ text: (0, si.t)("your_preferred_language_has_been_updated_to_language", s, { language: (0, Ya.getLanguageDisplayTextFromCode)(s, s) }), language: s, modify: e, viewId: i }); return n.getInteractionResponder().updateModalViewResponse(_) }; Et.submitSetPreferredLanguageModal = Qa }); var ci = k(It => { "use strict"; Object.defineProperty(It, "__esModule", { value: !0 }); It.submitTaskCreateModal = void 0; var dr = L(), _i = J(), Ze = G(), eo = Fe(), to = _e(), ro = ke(), io = ar(), no = W(), ao = ut(), N = I(), oo = de(), so = async ({ app: n, context: e, modify: r, read: t, persistence: a }) => { let { view: { id: i, state: o }, user: { id: s } = { id: "" } } = e.getInteractionData(), _ = await (0, oo.getUserPreferredLanguage)(t.getPersistenceReader(), s), m = await dr.ReminderCreateModalUiData.findOne(t.getPersistenceReader(), { viewId: i }); if (!m) throw new Error("Error! No answer poll data found"); let { errors: d, reminder: g } = await _o(t, n.getLogger(), m, o, _); if (d && Object.keys(d).length > 0) return e.getInteractionResponder().viewErrorResponse({ viewId: i, errors: d }); if (!g) return e.getInteractionResponder().viewErrorResponse({ viewId: i, errors: { name: (0, N.t)("please_complete_this_required_field", _) } }); if (g.audience) { let { audience: { type: l, ids: h }, frequency: c } = g; if (l === "room") { let { userUtcOffset: w, userId: M } = m, A = await t.getUserReader().getById(M); if (!A) throw new Error(`Error! No user found with id ${M}`); for (let b of h) { let T = await t.getRoomReader().getByName(b); if (!T) throw new Error(`Room ${b} not found`); let R = (0, N.t)("channel_reminder_message", _, { description: g.description, time: (0, Ze.formatDateTimeForMsg)(g.dueDate, w || 0), frequency: (0, ao.convertFrequencyToText)(c, _), timezone: (0, Ze.getFormattedTimezoneForMsg)((0, Ze.getTimezoneUtcString)(w || 0)) }); await (0, to.sendRoomMessage)(r, A, T, R) } } } let p = await new eo.ReminderJob(n).scheduleReminder(r.getScheduler(), a, g.id, g.dueDate); g.jobId = p, await dr.Reminder.insertOrUpdate(a, g), await dr.UserUsage.incrementRemindersCreatedCount(t.getPersistenceReader(), a, g.createdBy); let f = (0, io.reminderCreatedModal)({ modify: r, reminderDueDate: g.dueDate, userUtcOffset: m.userUtcOffset || 0, viewId: i, language: _ }); return e.getInteractionResponder().updateModalViewResponse(f) }; It.submitTaskCreateModal = so; var _o = async (n, e, r, t, a) => { if (!t || !t.reminder) return { errors: { date: (0, N.t)("please_complete_this_required_field", a), time: (0, N.t)("please_complete_this_required_field", a), description: (0, N.t)("please_complete_this_required_field", a) } }; let { reminder: { date: i, description: o, time: s, target_channel: _, target_user: m } } = t, { reminder: { frequency: d } } = t; if (!i) return { errors: { date: (0, N.t)("please_complete_this_required_field", a) } }; if (!s) return { errors: { time: (0, N.t)("please_complete_this_required_field", a) } }; if (!o) return { errors: { description: (0, N.t)("please_complete_this_required_field", a) } }; let { roomId: g, userId: p, userUtcOffset: f, recipientType: l } = r, h, c = []; if (d || (d = no.RecurringReminderFrequencies.DO_NOT_REPEAT), l === "user") { if (!m || !m.trim()) return { errors: { target_user: (0, N.t)("please_complete_this_required_field", a) } }; m.split(",").map(b => { let T = b.trim(); return T.startsWith("@") ? T.substring(1) : T }).forEach(b => c.push(b)); for (let b of c) if (!await n.getUserReader().getByUsername(b)) return { errors: { target_user: (0, N.t)("user_with_username_not_found", a, { username: b }) } }; h = { type: "user", ids: c } } else if (l === "channel") { if (!_ || !_.trim()) return { errors: { target_channel: (0, N.t)("please_complete_this_required_field", a) } }; _.split(",").map(b => { let T = b.trim(); return T.startsWith("#") ? T.substring(1) : T }).forEach(b => c.push(b)); for (let b of c) if (!await n.getRoomReader().getByName(b)) return { errors: { target_channel: (0, N.t)("room_with_name_not_found", a, { roomName: b }) } }; h = { type: "room", ids: c } } let w = await (0, ro.hasValidLicense)(n, e); if (!w && (l === "user" || l === "channel")) return { errors: { target_channel: (0, N.t)("premium_license_warning", a), target_user: (0, N.t)("premium_license_warning", a) } }; if (!w && (0, _i.isRecurringReminder)(d)) return { errors: { frequency: (0, N.t)("premium_license_warning", a) } }; let M = (0, Ze.parseDateAndTimeStringFromUI)(i, s, f || 0); return M.getTime() < new Date().getTime() ? { errors: { date: (0, N.t)("please_give_a_valid_time_in_future", a), time: (0, N.t)("please_give_a_valid_time_in_future", a) } } : { reminder: Object.assign(Object.assign({ id: (0, _i.uuid)(), roomId: g, createdBy: p, createdAt: (0, Ze.getDateWithUTCOffset)(new Date, 0), description: o, dueDate: M, status: "active", timeZone: { utcOffset: f || 0 } }, h && { audience: h }), { frequency: d }) } } }); var li = k(Ut => { "use strict"; Object.defineProperty(Ut, "__esModule", { value: !0 }); Ut.ExecuteViewSubmitHandler = void 0; var _r = L(), co = yt(), mo = oi(), lo = er(), uo = di(), po = Se(), go = ci(), ho = tr(), fo = Pe(), mi = class { constructor(e, r, t, a, i) { this.app = e, this.read = r, this.http = t, this.modify = a, this.persistence = i } async run(e) { let { view: { id: r } } = e.getInteractionData(), t = { success: !0 }, a = r.split("-")[0]; if (await _r.ModalClickEventLock.findOne(this.read.getPersistenceReader(), { viewId: r })) return e.getInteractionResponder().viewErrorResponse({ viewId: r, errors: {} }); try { switch (await _r.ModalClickEventLock.insertOrUpdate(this.persistence, { viewId: r }), a) { case po.ReminderCreateModalViewIdPrefix: { t = await (0, go.submitTaskCreateModal)({ app: this.app, context: e, read: this.read, modify: this.modify, persistence: this.persistence }); break } case fo.ReminderListModalViewIdPrefix: { t = await (0, ho.submitBulkDeleteConfirmationModal)({ app: this.app, context: e, read: this.read, modify: this.modify, persistence: this.persistence }); break } case co.MsgReminderCreateModalViewIdPrefix: { t = await (0, mo.submitMsgReminderCreateModal)({ app: this.app, context: e, read: this.read, modify: this.modify, persistence: this.persistence }); break } case lo.SetPreferredLanguageModalViewIdPrefix: { t = await (0, uo.submitSetPreferredLanguageModal)({ app: this.app, context: e, read: this.read, modify: this.modify, persistence: this.persistence }); break } default: break } } finally { await _r.ModalClickEventLock.clearByQuery(this.persistence, { viewId: r }) } return t } }; Ut.ExecuteViewSubmitHandler = mi }); var gi = k(jt => { "use strict"; Object.defineProperty(jt, "__esModule", { value: !0 }); jt.JobsRestartJob = void 0; var zt = qe(), ui = G(), Dt = L(), wo = J(), pi = class { constructor(e) { this.app = e, this.jobId = zt.JobId.JOBS_RESTART_JOB } getJobsRestartJob() { return { id: this.jobId, processor: this.processor.bind(this) } } async processor(e, r, t, a, i) { this.app.getLogger().info("Attempting to restart jobs"), await t.getScheduler().cancelAllJobs(); let o = [zt.JobId.REMINDER_JOB]; for (let s of o) { let _ = await Dt.JobData.findAll(r.getPersistenceReader(), { jobName: s }), m = 0; for (let d of _) { let { when: g, jobId: p, jobContext: f } = d; if (g > new Date) await t.getScheduler().scheduleOnce({ id: s, when: g, data: JSON.parse(f) }), m++; else { let l = !0; if (s === zt.JobId.REMINDER_JOB) { let { reminderId: h } = JSON.parse(f), c = await Dt.Reminder.findOne(r.getPersistenceReader(), { id: h }); if (c && (0, wo.isRecurringReminder)(c.frequency)) { let { frequency: w } = c, { dueDate: M } = c, A = await (0, ui.calculateNextSchedulingTime)(M, w); c.dueDate = A, await t.getScheduler().scheduleOnce({ id: s, when: c.dueDate, data: JSON.parse(f) }), await Dt.Reminder.insertOrUpdate(i, c), this.app.getLogger().info(`Restarted recurring job with id: ${h}`), m++, l = !1 } } l && await Dt.JobData.clearByQuery(i, { jobId: p }) } } this.app.getLogger().info(`Successfully restarted ${m} out of ${_.length} job(s) with job id/name ${s}`) } this.app.getLogger().info("Attempting to restart stats collector job now"), await t.getScheduler().scheduleOnce({ id: zt.JobId.STATS_COLLECTOR_JOB, when: (0, ui.addMinutesToDate)(new Date, 1) }), this.app.getLogger().info("Stats collector job restarted") } }; jt.JobsRestartJob = pi }); var hi = k(Ot => { "use strict"; Object.defineProperty(Ot, "__esModule", { value: !0 }); Ot.STATS_COLLECTOR_ENDPOINT_METADATA_URL = void 0; Ot.STATS_COLLECTOR_ENDPOINT_METADATA_URL = "https://addreminders.github.io/stats-collector-metadata/Data/stats.json" }); var bi = k(Ct => { "use strict"; Object.defineProperty(Ct, "__esModule", { value: !0 }); Ct.StatsCollectorJob = void 0; var To = require("@rocket.chat/apps-engine/definition/accessors"), bo = De(), fi = qe(), yo = hi(), Mo = G(), Ao = ke(), wi = L(), ko = J(), Ti = class { constructor(e) { this.app = e, this.jobId = fi.JobId.STATS_COLLECTOR_JOB } getStatsCollectorJob() { return { id: this.jobId, processor: this.processor.bind(this) } } async processor(e, r, t, a, i) { this.app.getLogger().info("Attempting to send stats"); try { if (!(await r.getEnvironmentReader().getSettings().getById(bo.AppSetting.SendStats)).value) this.app.getLogger().info("Stats are disabled"); else { this.app.getLogger().info("Stats are enabled"); let s = await (0, ko.getSiteUrl)(r.getEnvironmentReader()); (!s || !s.trim().length) && this.app.getLogger().error("Site URL is not set"); let _ = await (0, Ao.hasValidLicense)(r, this.app.getLogger(), !0), m = await a.get(yo.STATS_COLLECTOR_ENDPOINT_METADATA_URL); if (m.statusCode !== To.HttpStatusCode.OK || !m.data) throw new Error("Stats metadata is not available"); let { url: d } = m.data; if (!d || !d.trim().length) throw new Error("Stats endpoint URL is not available"); let g = await wi.UserUsage.getUsageStats(r.getPersistenceReader()), p = await a.post(d, { data: { siteUrl: s, appVersion: this.app.getVersion(), validLicense: _, usage: g }, headers: { "Content-Type": "application/json" } }); p.statusCode === 200 ? (this.app.getLogger().info("Stats sent successfully"), await wi.UserUsage.markStatsSynced(i, g)) : this.app.getLogger().error("Stats sending failed. Api response:", p.content) } } catch (o) { this.app.getLogger().error("Error sending stats", o) } finally { this.app.getLogger().info("Scheduling next stats collection in 48 hours"), await t.getScheduler().scheduleOnce({ id: fi.JobId.STATS_COLLECTOR_JOB, when: (0, Mo.addHoursToDate)(new Date, 48) }) } } }; Ct.StatsCollectorJob = Ti }); "use strict"; Object.defineProperty(exports, "__esModule", { value: !0 }); exports.RemindApp = void 0; var xo = require("@rocket.chat/apps-engine/definition/App"), cr = require("@rocket.chat/apps-engine/definition/ui"), vo = Wr(), mr = De(), Ro = qe(), So = Yr(), Po = ni(), Eo = li(), Io = gi(), Uo = Fe(), zo = bi(), Do = G(), lr = L(), jo = Se(), Oo = Pe(), yi = class extends xo.App { constructor(e, r, t) { super(e, r, t) } async executeViewClosedHandler(e, r, t, a) { try { let { view: { id: i } } = e.getInteractionData(); if (!i) throw new Error("No viewId found within View closed handler"); switch (await lr.ModalClickEventLock.clearByQuery(a, { viewId: i }), i.split("-")[0]) { case jo.ReminderCreateModalViewIdPrefix: { await lr.ReminderCreateModalUiData.clearByQuery(a, { viewId: i }); break } case Oo.ReminderListModalViewIdPrefix: { await lr.BulkDeleteConfirmationModalUiData.clearByQuery(a, { viewId: i }); break } } } catch (i) { this.getLogger().error(i) } return e.getInteractionResponder().successResponse() } async executeViewSubmitHandler(e, r, t, a, i) { try { return await new Eo.ExecuteViewSubmitHandler(this, r, t, i, a).run(e) } catch (o) { return this.getLogger().error(o), e.getInteractionResponder().errorResponse() } } async executeBlockActionHandler(e, r, t, a, i) { try { return await new Po.ExecuteBlockActionHandler(this, r, t, i, a).run(e) } catch (o) { return this.getLogger().error(o), e.getInteractionResponder().errorResponse() } } async initialize(e, r) { await e.slashCommands.provideSlashCommand(new vo.RemindCommand(this)), await e.scheduler.registerProcessors([new Uo.ReminderJob(this).getReminderJob(), new Io.JobsRestartJob(this).getJobsRestartJob(), new zo.StatsCollectorJob(this).getStatsCollectorJob()]), await Promise.all(mr.settings.map(i => e.settings.provideSetting(i))); let [t, a] = await Promise.all([r.getSettings().getById(mr.AppSetting.ShowAddReminderButton), r.getSettings().getById(mr.AppSetting.ShowViewAllReminderButton)]); e.ui.registerButton({ actionId: "remind_me_about_this_msg_action", labelI18n: "remind_me_about_this_msg_action", context: cr.UIActionButtonContext.MESSAGE_ACTION }), t.value !== !1 && e.ui.registerButton({ actionId: "add_reminder_message_box_action", context: cr.UIActionButtonContext.MESSAGE_BOX_ACTION, labelI18n: "add_reminder_message_box_action" }), a.value !== !1 && e.ui.registerButton({ actionId: "show_my_reminders_room_action", context: cr.UIActionButtonContext.ROOM_ACTION, labelI18n: "show_my_reminders_room_action" }) } async executeActionButtonHandler(e, r, t, a, i) { try { return await new So.ExecuteActionButtonHandler(this, r, t, i, a).run(e) } catch (o) { return this.getLogger().error(o), e.getInteractionResponder().errorResponse() } } async onEnable(e, r) { try { this.getLogger().info("RemindApp is getting enabled. Attempting to restart jobs."), await r.scheduler.scheduleOnce({ id: Ro.JobId.JOBS_RESTART_JOB, when: (0, Do.addSecondsToDate)(new Date, 10) }), this.getLogger().info("Successfully scheduled restart job in 10 seconds.") } catch (t) { this.getLogger().error("Something went wrong while trying to restart jobs. Some reminders may be missed until the next restart.", t) } return !0 } }; exports.RemindApp = yi;
